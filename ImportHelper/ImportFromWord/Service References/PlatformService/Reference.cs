//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImportFromWord.PlatformService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceElement", Namespace="http://schemas.datacontract.org/2004/07/Texxtoor.Portal.ServiceApi.Services.Servi" +
        "ceDtos")]
    [System.SerializableAttribute()]
    public partial class ServiceElement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ImportFromWord.PlatformService.ServiceElement> ChildrenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ImportFromWord.PlatformService.ServiceElement> Children {
            get {
                return this.ChildrenField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildrenField, value) != true)) {
                    this.ChildrenField = value;
                    this.RaisePropertyChanged("Children");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignFault", Namespace="http://www.texxtoor.com/Fault")]
    [System.SerializableAttribute()]
    public partial class SignFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operation {
            get {
                return this.OperationField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationField, value) != true)) {
                    this.OperationField = value;
                    this.RaisePropertyChanged("Operation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentProperties", Namespace="http://schemas.datacontract.org/2004/07/Texxtoor.Portal.ServiceApi.Services.Servi" +
        "ceDtos")]
    [System.SerializableAttribute()]
    public partial class DocumentProperties : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowChaptersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowMetaDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChapterDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentLanguageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ListingSnippetDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SectionDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowNumberChainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextSnippetDefaultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowChapters {
            get {
                return this.AllowChaptersField;
            }
            set {
                if ((this.AllowChaptersField.Equals(value) != true)) {
                    this.AllowChaptersField = value;
                    this.RaisePropertyChanged("AllowChapters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowMetaData {
            get {
                return this.AllowMetaDataField;
            }
            set {
                if ((this.AllowMetaDataField.Equals(value) != true)) {
                    this.AllowMetaDataField = value;
                    this.RaisePropertyChanged("AllowMetaData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChapterDefault {
            get {
                return this.ChapterDefaultField;
            }
            set {
                if ((object.ReferenceEquals(this.ChapterDefaultField, value) != true)) {
                    this.ChapterDefaultField = value;
                    this.RaisePropertyChanged("ChapterDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentLanguage {
            get {
                return this.DocumentLanguageField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentLanguageField, value) != true)) {
                    this.DocumentLanguageField = value;
                    this.RaisePropertyChanged("DocumentLanguage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ListingSnippetDefault {
            get {
                return this.ListingSnippetDefaultField;
            }
            set {
                if ((object.ReferenceEquals(this.ListingSnippetDefaultField, value) != true)) {
                    this.ListingSnippetDefaultField = value;
                    this.RaisePropertyChanged("ListingSnippetDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SectionDefault {
            get {
                return this.SectionDefaultField;
            }
            set {
                if ((object.ReferenceEquals(this.SectionDefaultField, value) != true)) {
                    this.SectionDefaultField = value;
                    this.RaisePropertyChanged("SectionDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowNumberChain {
            get {
                return this.ShowNumberChainField;
            }
            set {
                if ((this.ShowNumberChainField.Equals(value) != true)) {
                    this.ShowNumberChainField = value;
                    this.RaisePropertyChanged("ShowNumberChain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TextSnippetDefault {
            get {
                return this.TextSnippetDefaultField;
            }
            set {
                if ((object.ReferenceEquals(this.TextSnippetDefaultField, value) != true)) {
                    this.TextSnippetDefaultField = value;
                    this.RaisePropertyChanged("TextSnippetDefault");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Comment", Namespace="http://schemas.datacontract.org/2004/07/Texxtoor.Portal.ServiceApi.Services.Servi" +
        "ceDtos")]
    [System.SerializableAttribute()]
    public partial class Comment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TermType", Namespace="http://schemas.datacontract.org/2004/07/Texxtoor.DataModels.Models.Author")]
    public enum TermType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cite = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Definition = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Abbreviation = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Idiom = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Variable = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Link = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PlatformService.IUploadService")]
    public interface IUploadService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/PublishDocument", ReplyAction="http://tempuri.org/IUploadService/PublishDocumentResponse")]
        int PublishDocument(string ssid, int documentId, string html);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/PublishDocument", ReplyAction="http://tempuri.org/IUploadService/PublishDocumentResponse")]
        System.Threading.Tasks.Task<int> PublishDocumentAsync(string ssid, int documentId, string html);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/PublishNewDocument", ReplyAction="http://tempuri.org/IUploadService/PublishNewDocumentResponse")]
        int PublishNewDocument(string ssid, int projectId, string name, string html);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/PublishNewDocument", ReplyAction="http://tempuri.org/IUploadService/PublishNewDocumentResponse")]
        System.Threading.Tasks.Task<int> PublishNewDocumentAsync(string ssid, int projectId, string name, string html);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetAllProjects", ReplyAction="http://tempuri.org/IUploadService/GetAllProjectsResponse")]
        System.Collections.Generic.List<ImportFromWord.PlatformService.ServiceElement> GetAllProjects(string ssid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetAllProjects", ReplyAction="http://tempuri.org/IUploadService/GetAllProjectsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ImportFromWord.PlatformService.ServiceElement>> GetAllProjectsAsync(string ssid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/SignOut", ReplyAction="http://tempuri.org/IUploadService/SignOutResponse")]
        string SignOut(string ssid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/SignOut", ReplyAction="http://tempuri.org/IUploadService/SignOutResponse")]
        System.Threading.Tasks.Task<string> SignOutAsync(string ssid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/SignIn", ReplyAction="http://tempuri.org/IUploadService/SignInResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ImportFromWord.PlatformService.SignFault), Action="http://tempuri.org/IUploadService/SignInSignFaultFault", Name="SignFault", Namespace="http://www.texxtoor.com/Fault")]
        string SignIn(string uname, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/SignIn", ReplyAction="http://tempuri.org/IUploadService/SignInResponse")]
        System.Threading.Tasks.Task<string> SignInAsync(string uname, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetDocumentSettings", ReplyAction="http://tempuri.org/IUploadService/GetDocumentSettingsResponse")]
        ImportFromWord.PlatformService.DocumentProperties GetDocumentSettings(string ssid, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetDocumentSettings", ReplyAction="http://tempuri.org/IUploadService/GetDocumentSettingsResponse")]
        System.Threading.Tasks.Task<ImportFromWord.PlatformService.DocumentProperties> GetDocumentSettingsAsync(string ssid, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/SaveComment", ReplyAction="http://tempuri.org/IUploadService/SaveCommentResponse")]
        System.Collections.Generic.List<ImportFromWord.PlatformService.Comment> SaveComment(string ssid, int id, int snippetId, string target, string subject, string comment, bool closed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/SaveComment", ReplyAction="http://tempuri.org/IUploadService/SaveCommentResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ImportFromWord.PlatformService.Comment>> SaveCommentAsync(string ssid, int id, int snippetId, string target, string subject, string comment, bool closed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/LoadComments", ReplyAction="http://tempuri.org/IUploadService/LoadCommentsResponse")]
        System.Collections.Generic.List<ImportFromWord.PlatformService.Comment> LoadComments(string ssid, int id, int snippetId, string target);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/LoadComments", ReplyAction="http://tempuri.org/IUploadService/LoadCommentsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ImportFromWord.PlatformService.Comment>> LoadCommentsAsync(string ssid, int id, int snippetId, string target);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/SemanticLists", ReplyAction="http://tempuri.org/IUploadService/SemanticListsResponse")]
        System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, string>> SemanticLists(string ssid, int id, ImportFromWord.PlatformService.TermType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/SemanticLists", ReplyAction="http://tempuri.org/IUploadService/SemanticListsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, string>>> SemanticListsAsync(string ssid, int id, ImportFromWord.PlatformService.TermType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetServerImages", ReplyAction="http://tempuri.org/IUploadService/GetServerImagesResponse")]
        System.Collections.Generic.List<int> GetServerImages(string ssid, int documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetServerImages", ReplyAction="http://tempuri.org/IUploadService/GetServerImagesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetServerImagesAsync(string ssid, int documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetServerImage", ReplyAction="http://tempuri.org/IUploadService/GetServerImageResponse")]
        byte[] GetServerImage(string ssid, int id, bool asThumbnail, string thumbNailSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetServerImage", ReplyAction="http://tempuri.org/IUploadService/GetServerImageResponse")]
        System.Threading.Tasks.Task<byte[]> GetServerImageAsync(string ssid, int id, bool asThumbnail, string thumbNailSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetServerImageName", ReplyAction="http://tempuri.org/IUploadService/GetServerImageNameResponse")]
        string GetServerImageName(string ssid, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetServerImageName", ReplyAction="http://tempuri.org/IUploadService/GetServerImageNameResponse")]
        System.Threading.Tasks.Task<string> GetServerImageNameAsync(string ssid, int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUploadServiceChannel : ImportFromWord.PlatformService.IUploadService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadServiceClient : System.ServiceModel.ClientBase<ImportFromWord.PlatformService.IUploadService>, ImportFromWord.PlatformService.IUploadService {
        
        public UploadServiceClient() {
        }
        
        public UploadServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UploadServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int PublishDocument(string ssid, int documentId, string html) {
            return base.Channel.PublishDocument(ssid, documentId, html);
        }
        
        public System.Threading.Tasks.Task<int> PublishDocumentAsync(string ssid, int documentId, string html) {
            return base.Channel.PublishDocumentAsync(ssid, documentId, html);
        }
        
        public int PublishNewDocument(string ssid, int projectId, string name, string html) {
            return base.Channel.PublishNewDocument(ssid, projectId, name, html);
        }
        
        public System.Threading.Tasks.Task<int> PublishNewDocumentAsync(string ssid, int projectId, string name, string html) {
            return base.Channel.PublishNewDocumentAsync(ssid, projectId, name, html);
        }
        
        public System.Collections.Generic.List<ImportFromWord.PlatformService.ServiceElement> GetAllProjects(string ssid) {
            return base.Channel.GetAllProjects(ssid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ImportFromWord.PlatformService.ServiceElement>> GetAllProjectsAsync(string ssid) {
            return base.Channel.GetAllProjectsAsync(ssid);
        }
        
        public string SignOut(string ssid) {
            return base.Channel.SignOut(ssid);
        }
        
        public System.Threading.Tasks.Task<string> SignOutAsync(string ssid) {
            return base.Channel.SignOutAsync(ssid);
        }
        
        public string SignIn(string uname, string password) {
            return base.Channel.SignIn(uname, password);
        }
        
        public System.Threading.Tasks.Task<string> SignInAsync(string uname, string password) {
            return base.Channel.SignInAsync(uname, password);
        }
        
        public ImportFromWord.PlatformService.DocumentProperties GetDocumentSettings(string ssid, int id) {
            return base.Channel.GetDocumentSettings(ssid, id);
        }
        
        public System.Threading.Tasks.Task<ImportFromWord.PlatformService.DocumentProperties> GetDocumentSettingsAsync(string ssid, int id) {
            return base.Channel.GetDocumentSettingsAsync(ssid, id);
        }
        
        public System.Collections.Generic.List<ImportFromWord.PlatformService.Comment> SaveComment(string ssid, int id, int snippetId, string target, string subject, string comment, bool closed) {
            return base.Channel.SaveComment(ssid, id, snippetId, target, subject, comment, closed);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ImportFromWord.PlatformService.Comment>> SaveCommentAsync(string ssid, int id, int snippetId, string target, string subject, string comment, bool closed) {
            return base.Channel.SaveCommentAsync(ssid, id, snippetId, target, subject, comment, closed);
        }
        
        public System.Collections.Generic.List<ImportFromWord.PlatformService.Comment> LoadComments(string ssid, int id, int snippetId, string target) {
            return base.Channel.LoadComments(ssid, id, snippetId, target);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ImportFromWord.PlatformService.Comment>> LoadCommentsAsync(string ssid, int id, int snippetId, string target) {
            return base.Channel.LoadCommentsAsync(ssid, id, snippetId, target);
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, string>> SemanticLists(string ssid, int id, ImportFromWord.PlatformService.TermType type) {
            return base.Channel.SemanticLists(ssid, id, type);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, string>>> SemanticListsAsync(string ssid, int id, ImportFromWord.PlatformService.TermType type) {
            return base.Channel.SemanticListsAsync(ssid, id, type);
        }
        
        public System.Collections.Generic.List<int> GetServerImages(string ssid, int documentId) {
            return base.Channel.GetServerImages(ssid, documentId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetServerImagesAsync(string ssid, int documentId) {
            return base.Channel.GetServerImagesAsync(ssid, documentId);
        }
        
        public byte[] GetServerImage(string ssid, int id, bool asThumbnail, string thumbNailSize) {
            return base.Channel.GetServerImage(ssid, id, asThumbnail, thumbNailSize);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetServerImageAsync(string ssid, int id, bool asThumbnail, string thumbNailSize) {
            return base.Channel.GetServerImageAsync(ssid, id, asThumbnail, thumbNailSize);
        }
        
        public string GetServerImageName(string ssid, int id) {
            return base.Channel.GetServerImageName(ssid, id);
        }
        
        public System.Threading.Tasks.Task<string> GetServerImageNameAsync(string ssid, int id) {
            return base.Channel.GetServerImageNameAsync(ssid, id);
        }
    }
}
