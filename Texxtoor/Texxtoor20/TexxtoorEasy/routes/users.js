var async = require('async');
var express = require('express');
var router = express.Router();

module.exports = router;

/* GET users listing. */
router.get('/', function (req, res, next) {
  try {
    var entityQuery = EntityQuery.from("Users").orderBy("id");
    executeEntityQuery(entityQuery, null, res, next);
  } catch (e) {
    next(e);
  }
});

router.get('/mex', function (req, res, next) {
  try {
    var metadata = readMetadata();
    res.send(metadata);
  } catch (e) {
    next(e);
  }
});

router.get('/:id', function (req, res, next) {
  try {
    var id = req.params.id;
    var entityQuery = EntityQuery.fromUrl(req.url, id);
    executeEntityQuery(entityQuery, null, res, next);
  } catch (e) {
    next(e);
  }
});


//#region Infrastructure
var breezeSequelize = require("breeze-sequelize");
var Promise = require('bluebird');

var SequelizeManager = breezeSequelize.SequelizeManager;
var SequelizeQuery = breezeSequelize.SequelizeQuery;
var SequelizeSaveHandler = breezeSequelize.SequelizeSaveHandler;
var breeze = breezeSequelize.breeze;
var EntityQuery = breeze.EntityQuery;
//#endregion

var dbConfig = {
  server: 'JOERGDEVELOPER',
  userName: 'Node_User',
  password: 'Node_User',
  options: {
    database: 'Node_EventBooking',
    instanceName: 'SQLEXPRESS'
  },
  dialect: "mssql",
  encrypt: false // true for Azure users
};

var _sequelizeManager = createSequelizeManager();

function createSequelizeManager() {
  var metadata = readMetadata();
  var sm = new SequelizeManager(dbConfig);
  sm.importMetadata(metadata);
  
  return sm;
}

function readMetadata() {
  return {
    "metadataVersion": "1.0.5",
    "namingConvention": "camelCase",
    "localQueryComparisonOptions": "caseInsensitiveSQL",
    "dataServices": [
      {
        "serviceName": "breeze/",
        "hasServerMetadata": true,
        "jsonResultsAdapter": "webApi_default",
        "useJsonp": false
      }
    ],
    "structuralTypes": [
      {
        "shortName": "User",
        "namespace": "DomainModel",
        "autoGeneratedKeyType": "None",
        "defaultResourceName": "Users",
        "dataProperties": [
          // id
          {
            "name": "id",
            "dataType": "Int32",
            "isNullable": false,
            "defaultValue": "0",
            "isPartOfKey": true,
            "validators": [
              {
                "name": "required"
              }
            ]
          },
          // name
          {
            "name": "name",
            "dataType": "String",
            "isNullable": true,
            "defaultValue": ""
          }
        ]
      }
    ]
  };
}

function executeEntityQuery(entityQuery, returnResultsFn, res, next) {
  var returnResultsFn = returnResultsFn || returnResults;
  var query = new SequelizeQuery(_sequelizeManager, entityQuery);
  query.execute().then(function (r) {
    returnResultsFn(r, res);
  }).catch(next)
}

function executeEntityQueries(entityQueries, returnResultsFn, res, next) {
  var returnResultsFn = returnResultsFn || returnResults;
  var promises = entityQueries.map(function (entityQuery) {
    var query = new SequelizeQuery(_sequelizeManager, entityQuery);
    return query.execute();
  });
  Promise.all(promises).then(function (results) {
    returnResultsFn(results, res);
  }).catch(next);
}

function returnResults(results, res) {
  res.setHeader("Content-Type:", "application/json");
  res.send(results);
}