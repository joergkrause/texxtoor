@model IEnumerable<Texxtoor.ViewModels.Editor.RibbonImages>
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Library</title>
  <script src="~/Scripts/jquery-2.0.3.js"></script>
  <style>
    li {
      min-height: 115px;
      font-family: Arial;
      font-size: 12pt;
      list-style-type: none;
    }
    li:hover {
      background-color: #bbbbbb;
      cursor: pointer;
    }
    img.preview {
      width: 100px;
      float: right;
      box-shadow: silver 2px 2px inset;
    }
  </style>
  <script>
  $(document).on('click', 'img', function () {
    'use strict';
    var meta_str;
    var href = this.src;
    var target = window.parent;
    // Convert Non-SVG images to data URL first
    // (this could also have been done server-side by the library)
    if (this.src.indexOf('image/svg+xml') === -1) {

      meta_str = JSON.stringify({
        name: $(this).data('text'),
        id: $(this).data('id')
      });
      target.postMessage(meta_str, '*');

      var img = new Image();
      img.onload = function () {
        var canvas = document.createElement('canvas');
        canvas.width = this.width;
        canvas.height = this.height;
        // load the raster image into the canvas
        canvas.getContext('2d').drawImage(this, 0, 0);
        // retrieve the data: URL
        var dataurl;
        try {
          dataurl = canvas.toDataURL();
        } catch (err) {
          // This fails in Firefox with file:// URLs :(
          alert("Data URL conversion failed: " + err);
          dataurl = "";
        }
        target.postMessage('|' + href + '|' + dataurl, '*');
      };
      img.src = href;
    } else {
      // Send metadata (also indicates file is about to be sent)
      meta_str = JSON.stringify({
        name: $(this).data('text'),
        id: $(this).data('id')
      });
      target.postMessage(meta_str, '*');
      // Do ajax request for image's href value
      $.get(href, function (data) {
        data = '|' + href + '|' + data;
        // This is where the magic happens!
        target.postMessage(data, '*');

      }, 'html'); // 'html' is necessary to keep returned data as a string
    }
    return false;
  });
  </script>

</head>
  <body>
    <ul>
      @foreach (var item in Model) {
        <li>
          [@item.id] @(String.IsNullOrEmpty(item.name) ? "No name provided" : item.name)<img src="@item.imageUrl" class="preview" data-text="@item.name" data-id="@item.id" />
        </li>
      }
    </ul>
  </body>
</html>
