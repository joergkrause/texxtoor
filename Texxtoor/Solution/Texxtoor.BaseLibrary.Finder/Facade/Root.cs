using System;
using System.Drawing;
using System.IO;
using Texxtoor.BaseLibrary.Core.Utilities.Storage;
using Texxtoor.DataModels.Models.Content;

namespace Texxtoor.BaseLibrary.Finder {
  /// <summary>
  /// Represents a root of file system
  /// </summary>
  public class Root {
    #region public

    /// <summary>
    /// Initialize new instanse of class <see cref="ElFinder.Root"/>
    /// </summary>
    /// <param name="directory">Directory which will be root</param>
    /// <param name="url">Url to root</param>
    public Root(ResourceFolder directory, string url) {
      if (directory == null)
        throw new ArgumentNullException("directory", "Root directory can not be null");
      _alias = directory.Name;
      _directory = directory;
      _url = url;
      _uploadOverwrite = true;
      _thumbnailsSize = 48;
    }

    /// <summary>
    /// Initialize new instanse of class <see cref="ElFinder.Root"/>
    /// </summary>
    /// <param name="directory">Directory which will be root</param>
    public Root(ResourceFolder directory) : this(directory, null) { }

    /// <summary>
    /// Gets a autogenerated prefix of root
    /// </summary>
    public string VolumeId {
      get { return _volumeId; }
      internal set { _volumeId = value; }
    }

    /// <summary>
    /// Get or sets alias for root. If not set will use directory name of path
    /// </summary>
    public string Alias {
      get { return _alias; }
      set { _alias = value; }
    }

    /// <summary>
    /// Get or sets a directory which is root 
    /// </summary>
    public ResourceFolder Directory {
      get { return _directory; }
      set {
        if (value == null)
          throw new ArgumentNullException("Root directory can not be null", "value");
        _directory = value;
      }
    }

    /// <summary>
    /// Get or sets url that points to path directory (also called 'root URL'). 
    /// </summary>
    public string Url { get; set; }

    /// <summary>
    /// Get or sets if root for read only (users can't change file)
    /// </summary>
    public bool IsReadOnly { get; set; }

    /// <summary>
    /// Get or sets if user can only show files (and cannot download).
    /// Note: if you set url property, than users can access to directory by the provided url
    /// </summary>
    public bool IsShowOnly { get; set; }

    /// <summary>
    /// Get or sets if root is locked (user can't remove, rename or delete files or subdirectories)  
    /// </summary>
    public bool IsLocked { get; set; }

    /// <summary>
    /// Get or sets a subfolder of root diretory, which will be start 
    /// </summary>
    public ResourceFolder StartPath { get; set; }

    /// <summary>
    /// Get or sets maximum upload file size. This size is per files in bytes. 
    /// Note: you still to configure maxupload limits in web.config for whole application
    /// </summary>
    public int? MaxUploadSize {
      get { return _maxUploadSize; }
      set {
        if (value.HasValue && value.Value < 0)
          throw new ArgumentException("Max upload size can not be less than zero", "value");
        _maxUploadSize = value;
      }
    }

    /// <summary>
    /// Get or sets maximum upload file size. This size is per files in kb. 
    /// Note: you still to configure maxupload limits in web.config for whole application
    /// </summary>
    public double? MaxUploadSizeInKb {
      get { return _maxUploadSize.HasValue ? (double?)(_maxUploadSize.Value / 1024.0) : null; }
      set {
        MaxUploadSize = value.HasValue ? (int?)(value * 1024) : null;
      }
    }

    /// <summary>
    /// Get or sets maximum upload file size. This size is per files in Mb. 
    /// Note: you still to configure maxupload limits in web.config for whole application
    /// </summary>
    public double? MaxUploadSizeInMb {
      get { return MaxUploadSizeInKb.HasValue ? (double?)(MaxUploadSizeInKb.Value / 1024.0) : null; }
      set {
        MaxUploadSizeInKb = value.HasValue ? (int?)(value * 1024) : null;
      }
    }

    /// <summary>
    /// Get or sets if files on upload will replace or give them new names. true - replace old files, false give new names like original_name-number.ext
    /// </summary>
    public bool UploadOverwrite {
      get { return _uploadOverwrite; }
      set { _uploadOverwrite = value; }
    }

    /// <summary>
    /// Get or sets thumbnails size
    /// </summary>
    public int ThumbnailsSize {
      get { return _thumbnailsSize; }
      set {
        if (value <= 0)
          throw new ArgumentException("Size can not be less or equals zero");
        _thumbnailsSize = value;
      }
    }

    /// <summary>
    /// Get ot sets thumbnals url
    /// </summary>
    public string ThumbnailsUrl {
      get { return _thumbnailsUrl; }
      set {
        if (string.IsNullOrEmpty(value))
          throw new ArgumentNullException("Url can not be null or empty");
        _thumbnailsUrl = value;
      }
    }

    /// <summary>
    /// Get or sets pictures editor. The object responsible for generating thumnails and .
    /// </summary>
    public IPicturesEditor PicturesEditor {
      get {
        if (_picturesEditor == null)
          _picturesEditor = new DefaultPicturesEditor();
        return _picturesEditor;
      }
      set {
        if (value == null)
          throw new ArgumentNullException("value");
        _picturesEditor = value;
      }
    }

    #endregion


    #region private
    internal Size GetImageDimension(ResourceFile file) {
      using (var blob = BlobFactory.GetBlobStorage(file.ResourceId, BlobFactory.Container.Resources)) {
        using (var ms = new MemoryStream()) {
          ms.Write(blob.Content, 0, blob.Content.Length);
          using (var image = Image.FromStream(ms)) {
            return new Size(image.Width, image.Height);
          }
        }
      }
    }

    private string _volumeId;
    private string _alias;
    private ResourceFolder _directory;
    private int? _maxUploadSize;
    private bool _uploadOverwrite;
    private string _url;

    private string _thumbnailsUrl;
    private int _thumbnailsSize;
    private IPicturesEditor _picturesEditor;
    #endregion
  }
}