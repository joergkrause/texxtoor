<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:document xmlns:wpc="http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:m="http://schemas.openxmlformats.org/officeDocument/2006/math" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:wp14="http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing" xmlns:wp="http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing" xmlns:w10="urn:schemas-microsoft-com:office:word" xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" xmlns:w14="http://schemas.microsoft.com/office/word/2010/wordml" xmlns:wpg="http://schemas.microsoft.com/office/word/2010/wordprocessingGroup" xmlns:wpi="http://schemas.microsoft.com/office/word/2010/wordprocessingInk" xmlns:wne="http://schemas.microsoft.com/office/word/2006/wordml" xmlns:wps="http://schemas.microsoft.com/office/word/2010/wordprocessingShape" mc:Ignorable="w14 wp14"><w:body><w:p w:rsidR="00165A64" w:rsidRDefault="002569A7" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="ChapterTitle"/></w:pPr><w:r><w:t>Understanding ASP.NET</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">In this </w:t></w:r><w:r w:rsidRPr="008C0D0F"><w:t>chapter</w:t></w:r><w:r w:rsidR="00D03A92"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> we look </w:t></w:r><w:r w:rsidR="00D03A92"><w:t>under the covers of</w:t></w:r><w:r><w:t xml:space="preserve"> ASP.NET. Many fundamentals </w:t></w:r><w:r w:rsidR="00116593"><w:t xml:space="preserve">of </w:t></w:r><w:r><w:t xml:space="preserve">ASP.NET just scratch the surface but to get </w:t></w:r><w:r w:rsidR="00C31A4D"><w:t>the most out of</w:t></w:r><w:r w:rsidR="00EA705E"><w:t xml:space="preserve"> the framework </w:t></w:r><w:r w:rsidR="00116593"><w:t>it is</w:t></w:r><w:r><w:t xml:space="preserve"> a good idea to look </w:t></w:r><w:r w:rsidR="00D03A92"><w:t>much deeper</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>Objectives in this chapter:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00CD53EB" w:rsidP="009A02DC"><w:pPr><w:pStyle w:val="BulletFirst"/><w:numPr><w:ilvl w:val="0"/><w:numId w:val="1"/></w:numPr></w:pPr><w:r><w:t>E</w:t></w:r><w:r w:rsidR="00931275"><w:t xml:space="preserve">xplain </w:t></w:r><w:r w:rsidR="00165A64"><w:t>how ASP.NET works internally and</w:t></w:r><w:r w:rsidR="00116593"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="007A1919"><w:t xml:space="preserve">highlight </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">the relevant </w:t></w:r><w:r w:rsidR="007A1919"><w:t>features</w:t></w:r><w:r w:rsidR="006A7106"><w:t xml:space="preserve"> need</w:t></w:r><w:r w:rsidR="00116593"><w:t>ed</w:t></w:r><w:r w:rsidR="007A1919"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">for </w:t></w:r><w:r w:rsidR="006A7106"><w:t xml:space="preserve">your everyday </w:t></w:r><w:r w:rsidR="00165A64"><w:t>tasks</w:t></w:r><w:r w:rsidR="007A1919"><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00C31A4D" w:rsidRDefault="00931275" w:rsidP="009A02DC"><w:pPr><w:pStyle w:val="Bullet"/><w:numPr><w:ilvl w:val="0"/><w:numId w:val="1"/></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Outline </w:t></w:r><w:r w:rsidR="00165A64"><w:t>the behind</w:t></w:r><w:r><w:t>-</w:t></w:r><w:r w:rsidR="00165A64"><w:t>the</w:t></w:r><w:r><w:t>-</w:t></w:r><w:r w:rsidR="00165A64"><w:t>scene</w:t></w:r><w:r w:rsidR="007A1919"><w:t>s concepts:</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> the</w:t></w:r><w:r w:rsidR="00C31A4D"><w:t xml:space="preserve"> application life cycle, </w:t></w:r><w:r w:rsidR="007A1919"><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="00C31A4D"><w:t xml:space="preserve">page life cycle and </w:t></w:r><w:r w:rsidR="007A1919"><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="00C31A4D"><w:t>control creation process</w:t></w:r><w:r w:rsidR="00116593"><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00CD53EB" w:rsidP="009A02DC"><w:pPr><w:pStyle w:val="Bullet"/><w:numPr><w:ilvl w:val="0"/><w:numId w:val="1"/></w:numPr></w:pPr><w:r><w:t>Cover</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="004A3EFF"><w:t>the steps</w:t></w:r><w:r w:rsidR="006A7106"><w:t xml:space="preserve"> taken to </w:t></w:r><w:r w:rsidR="004A6986"><w:t>translate</w:t></w:r><w:r w:rsidR="004A3EFF"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00C31A4D"><w:t>your</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="007A1919" w:rsidRPr="00FA109C"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>*.</w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00FA109C"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>aspx</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> and </w:t></w:r><w:r w:rsidR="00C31A4D" w:rsidRPr="00FA109C"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>*.</w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00FA109C"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>cs</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> files </w:t></w:r><w:r w:rsidR="004A6986"><w:t>into</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> compiled </w:t></w:r><w:r w:rsidR="004A6986"><w:t>code.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="004A6986" w:rsidP="009A02DC"><w:pPr><w:pStyle w:val="BulletLast"/><w:numPr><w:ilvl w:val="0"/><w:numId w:val="1"/></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Delve </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">beyond the </w:t></w:r><w:r w:rsidR="00C31A4D"><w:t xml:space="preserve">common </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">ASP.NET </w:t></w:r><w:r w:rsidR="00C31A4D"><w:t xml:space="preserve">features </w:t></w:r><w:r><w:t xml:space="preserve">such as </w:t></w:r><w:r w:rsidR="00C31A4D"><w:t xml:space="preserve">form stickiness and </w:t></w:r><w:r w:rsidR="00F02A8E"><w:t>view state</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00EA705E" w:rsidP="00AE2AE7"><w:pPr><w:pStyle w:val="berschrift2"/></w:pPr><w:r><w:t>A Promise in Advance</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>ASP.NET is a powerful</w:t></w:r><w:r w:rsidR="004A6986"><w:t xml:space="preserve"> and flexible</w:t></w:r><w:r><w:t xml:space="preserve"> architecture for building web applications. The high level parts</w:t></w:r><w:r w:rsidR="00C951E4"><w:t xml:space="preserve"> –</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>WebForms</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>WebServices</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00C951E4"><w:t xml:space="preserve"> –</w:t></w:r><w:r><w:t xml:space="preserve"> are </w:t></w:r><w:r w:rsidR="00116593"><w:t>well-</w:t></w:r><w:r><w:t xml:space="preserve">known. </w:t></w:r><w:r w:rsidR="00C31A4D"><w:t>However</w:t></w:r><w:r><w:t xml:space="preserve">, </w:t></w:r><w:r w:rsidR="00C951E4"><w:t xml:space="preserve">as your </w:t></w:r><w:r w:rsidR="00A06D9B"><w:t>applications scale up</w:t></w:r><w:r w:rsidR="00214C2F"><w:t xml:space="preserve"> in real life</w:t></w:r><w:r w:rsidR="00A06D9B"><w:t xml:space="preserve">, </w:t></w:r><w:r><w:t xml:space="preserve">sooner or later </w:t></w:r><w:r w:rsidR="00A06D9B"><w:t xml:space="preserve">you </w:t></w:r><w:r w:rsidR="00116593"><w:t>encounter</w:t></w:r><w:r><w:t xml:space="preserve"> performance issues, or find that things </w:t></w:r><w:r w:rsidR="00214C2F"><w:t xml:space="preserve">which </w:t></w:r><w:r><w:t>seem</w:t></w:r><w:r w:rsidR="00A06D9B"><w:t>ed</w:t></w:r><w:r><w:t xml:space="preserve"> easy </w:t></w:r><w:r w:rsidR="00A06D9B"><w:t>become challenging</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00A06D9B"><w:t>That</w:t></w:r><w:r><w:t xml:space="preserve"> is what this</w:t></w:r><w:r w:rsidR="00A06D9B"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">book </w:t></w:r><w:r w:rsidR="00A06D9B"><w:t>provides</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00A06D9B"><w:t xml:space="preserve">– </w:t></w:r><w:r><w:t xml:space="preserve">a look beyond the </w:t></w:r><w:r w:rsidR="00EA705E"><w:t>big picture</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00EA705E"><w:t>The little details are</w:t></w:r><w:r><w:t xml:space="preserve"> harder to understand and sometimes more abstract</w:t></w:r><w:r w:rsidR="00116593"><w:t>;</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00116593"><w:t xml:space="preserve">less </w:t></w:r><w:r><w:t xml:space="preserve">fun for more work. But let me </w:t></w:r><w:r w:rsidR="00116593"><w:t>begin</w:t></w:r><w:r><w:t xml:space="preserve"> with a promise</w:t></w:r><w:r w:rsidR="00116593"><w:t>:</w:t></w:r><w:r><w:t xml:space="preserve"> it’s worth the effort. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="berschrift2"/></w:pPr><w:r><w:t xml:space="preserve">The </w:t></w:r><w:r w:rsidR="00EA705E"><w:t>Low Level Architecture of Request Handling</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="0030602F" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>U</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">nderstanding the innermost parts of a platform </w:t></w:r><w:r w:rsidR="00214C2F"><w:t>is highly satisfying. You will feel confident knowing that you can write better applications</w:t></w:r><w:r w:rsidR="008C79E5"><w:t xml:space="preserve"> and recognizing why they work.</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> In this section we </w:t></w:r><w:r w:rsidR="00214C2F"><w:t xml:space="preserve">will </w:t></w:r><w:r><w:t>examine</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> the system level of ASP.NET </w:t></w:r><w:r w:rsidR="00214C2F"><w:t xml:space="preserve">in order </w:t></w:r><w:r><w:t xml:space="preserve">to understand </w:t></w:r><w:r w:rsidR="00C31A4D"><w:t>how re</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">quests flow through the processing pipeline. This is not </w:t></w:r><w:r w:rsidR="00137423"><w:t>aimed at those learning</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> the </w:t></w:r><w:r w:rsidR="008C79E5"><w:t xml:space="preserve">basics </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">or </w:t></w:r><w:r w:rsidR="00137423"><w:t xml:space="preserve">creating </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">a simple interactive page. </w:t></w:r><w:r w:rsidR="00214C2F"><w:t xml:space="preserve">This is </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">what you need to know when you write or </w:t></w:r><w:r w:rsidR="00F93EF8"><w:t>build</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00214C2F"><w:t xml:space="preserve">large </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">sites </w:t></w:r><w:r w:rsidR="008C79E5"><w:t xml:space="preserve">which involve </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">hundreds of pages handling requests from thousands of users. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>WebForms</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>WebServices</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> are both sophisticated</w:t></w:r><w:r w:rsidR="008C79E5"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> high level implementations of HTTP handlers. They are built on top of the ASP.NET framework and </w:t></w:r><w:r w:rsidR="00137423"><w:t>exposed as</w:t></w:r><w:r><w:t xml:space="preserve"> default</w:t></w:r><w:r w:rsidR="00137423"><w:t xml:space="preserve"> project templates</w:t></w:r><w:r><w:t xml:space="preserve">. Most developers are happy with these </w:t></w:r><w:r w:rsidR="00137423"><w:t>pro</w:t></w:r><w:r w:rsidR="00BE7CDD"><w:t xml:space="preserve">ject types, and are ignorant of, or misunderstand, </w:t></w:r><w:r w:rsidR="00137423"><w:t xml:space="preserve">the additional </w:t></w:r><w:r w:rsidR="00BE7CDD"><w:t>potential that exists</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00BE7CDD"><w:t xml:space="preserve">The </w:t></w:r><w:r><w:t xml:space="preserve">basic </w:t></w:r><w:r w:rsidR="00BE7CDD"><w:t xml:space="preserve">HTTP </w:t></w:r><w:r><w:t xml:space="preserve">handlers are built </w:t></w:r><w:r w:rsidR="00BE7CDD"><w:t xml:space="preserve">with </w:t></w:r><w:r><w:t xml:space="preserve">managed code. </w:t></w:r><w:r w:rsidR="00BE7CDD"><w:t>This means that you can</w:t></w:r><w:r><w:t xml:space="preserve"> get </w:t></w:r><w:r w:rsidR="00E7144D"><w:t>highly customized</w:t></w:r><w:r><w:t xml:space="preserve"> behavior processing request</w:t></w:r><w:r w:rsidR="00E7144D"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00BE7CDD"><w:t xml:space="preserve">through </w:t></w:r><w:r><w:t xml:space="preserve">the pipeline by </w:t></w:r><w:r w:rsidR="00BE7CDD"><w:t xml:space="preserve">using </w:t></w:r><w:r><w:t>your very own code.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t>What is ASP.NET</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>In general terms</w:t></w:r><w:r w:rsidR="00BE7CDD"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> ASP.NET is a request processing engine. It takes an incoming request and passes it through its internal pipeline to an end point</w:t></w:r><w:r w:rsidR="00C31A4D"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> where you as a developer can attach code to process that request. This </w:t></w:r><w:r w:rsidRPr="008C0D0F"><w:t>engine</w:t></w:r><w:r><w:t xml:space="preserve"> is completely separate from HTTP</w:t></w:r><w:r w:rsidR="00F93EF8"><w:t xml:space="preserve"> runtime</w:t></w:r><w:r><w:t xml:space="preserve"> or the Web Server. In fact, the HTTP </w:t></w:r><w:r w:rsidR="00F93EF8"><w:t>r</w:t></w:r><w:r><w:t>untime is a component that you can host in your own applications outside of</w:t></w:r><w:r w:rsidR="00F93EF8"><w:t xml:space="preserve"> Internet Information Services</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00F93EF8"><w:t>(I</w:t></w:r><w:r><w:t>IS</w:t></w:r><w:r w:rsidR="00F93EF8"><w:t>)</w:t></w:r><w:r><w:t xml:space="preserve"> or any server side application altogether. Visual Studio and the integrated development server is a good </w:t></w:r><w:r w:rsidR="00F93EF8"><w:t>ex</w:t></w:r><w:r><w:t xml:space="preserve">ample of an implementation </w:t></w:r><w:r w:rsidR="00BE7CDD"><w:t>that bypasses IIS</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00C31A4D"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>The</w:t></w:r><w:r w:rsidR="00F93EF8"><w:t xml:space="preserve"> HTTP</w:t></w:r><w:r><w:t xml:space="preserve"> runtime </w:t></w:r><w:r w:rsidR="00C31A4D"><w:t xml:space="preserve">is responsible for routing requests through this pipeline, a </w:t></w:r><w:r><w:t xml:space="preserve">complex yet very elegant mechanism. </w:t></w:r><w:r w:rsidR="00C804A8"><w:t xml:space="preserve">Several </w:t></w:r><w:r w:rsidR="00C31A4D"><w:t xml:space="preserve">interrelated objects, extensible via </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00C31A4D"><w:t>subclassing</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00C31A4D"><w:t xml:space="preserve"> or through interfaces, are available for customization work. This makes the </w:t></w:r><w:r><w:t xml:space="preserve">framework highly </w:t></w:r><w:r w:rsidR="00C804A8"><w:t>adaptable</w:t></w:r><w:r><w:t xml:space="preserve">. In this book I’ll cover most </w:t></w:r><w:r w:rsidR="00680620"><w:t xml:space="preserve">of </w:t></w:r><w:r><w:t xml:space="preserve">these extensibility </w:t></w:r><w:r w:rsidR="00C804A8"><w:t xml:space="preserve">points </w:t></w:r><w:r><w:t xml:space="preserve">and show that there are virtually no limits </w:t></w:r><w:r w:rsidR="00680620"><w:t xml:space="preserve">when </w:t></w:r><w:r><w:t>using ASP.NET.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>Through this mechanism it’s possible to hook into low</w:t></w:r><w:r w:rsidR="00C804A8"><w:t>-</w:t></w:r><w:r><w:t xml:space="preserve">level interfaces such as authentication, authorization, and caching. You can even filter content by </w:t></w:r><w:r w:rsidR="0022748C"><w:t>routing</w:t></w:r><w:r><w:t xml:space="preserve"> incoming requests that match a specific signature directly to your code. Of course</w:t></w:r><w:r w:rsidR="0022748C"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> there are a lot of different ways to accomplish the same thing</w:t></w:r><w:r w:rsidR="0022748C" w:rsidRPr="0022748C"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="0022748C"><w:t>–</w:t></w:r><w:r><w:t xml:space="preserve"> but all of the approaches are straightforward to implement. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The ASP.NET engine was </w:t></w:r><w:r w:rsidR="008B67ED"><w:t xml:space="preserve">written </w:t></w:r><w:r w:rsidR="0022748C"><w:t xml:space="preserve">entirely </w:t></w:r><w:r><w:t xml:space="preserve">in managed code and all of the extensibility functionality is provided via </w:t></w:r><w:r w:rsidR="008B67ED"><w:t>“</w:t></w:r><w:r><w:t>managed code extensions</w:t></w:r><w:r w:rsidR="008B67ED"><w:t>”</w:t></w:r><w:r w:rsidR="00F93EF8"><w:t>.</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="008B67ED"><w:t xml:space="preserve">The </w:t></w:r><w:r><w:t>impressive part of ASP.NET</w:t></w:r><w:r w:rsidR="00F93EF8"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">is </w:t></w:r><w:r w:rsidR="00665266"><w:t xml:space="preserve">that it is </w:t></w:r><w:r w:rsidR="008C79E5"><w:t xml:space="preserve">very </w:t></w:r><w:r w:rsidR="00665266"><w:t>powerful</w:t></w:r><w:r w:rsidR="008C79E5"><w:t xml:space="preserve"> but</w:t></w:r><w:r w:rsidR="00665266"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00F93EF8"><w:t>simple</w:t></w:r><w:r w:rsidR="008C79E5"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00665266"><w:t xml:space="preserve">to work with. Despite its breadth and complexity, </w:t></w:r><w:r w:rsidR="008C79E5"><w:t xml:space="preserve">accomplishing your desired outcomes is easy. </w:t></w:r><w:r><w:t xml:space="preserve">ASP.NET </w:t></w:r><w:r w:rsidR="00665266"><w:t>enables</w:t></w:r><w:r w:rsidR="006B7975"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">you </w:t></w:r><w:r w:rsidR="006B7975"><w:t xml:space="preserve">to </w:t></w:r><w:r><w:t xml:space="preserve">perform tasks that were </w:t></w:r><w:r w:rsidR="00665266"><w:t xml:space="preserve">previously </w:t></w:r><w:r><w:t>the domain of ISAPI extensions and filters on IIS</w:t></w:r><w:r w:rsidR="00665266"><w:t>.</w:t></w:r><w:r><w:t xml:space="preserve"> ISAPI is a low</w:t></w:r><w:r w:rsidR="00A776C6"><w:t>-</w:t></w:r><w:r><w:t>level Win32 API that ha</w:t></w:r><w:r w:rsidR="00A776C6"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> a very </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00C92007"><w:t>spartan</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00C92007"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>interface</w:t></w:r><w:r w:rsidR="006B7975"><w:t>.</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="006B7975"><w:t>It</w:t></w:r><w:r><w:t xml:space="preserve"> was very difficult </w:t></w:r><w:r w:rsidR="006B7975"><w:t>to develop anything on top of this interface</w:t></w:r><w:r><w:t>. Since ISAPI is low</w:t></w:r><w:r w:rsidR="00A776C6"><w:t>-</w:t></w:r><w:r><w:t>level</w:t></w:r><w:r w:rsidR="00A776C6"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> it </w:t></w:r><w:r w:rsidR="00A776C6"><w:t>is very</w:t></w:r><w:r><w:t xml:space="preserve"> fast</w:t></w:r><w:r w:rsidR="00A776C6"><w:t>. But writing ISAPI filters in C++ is not included in most current</w:t></w:r><w:r><w:t xml:space="preserve"> application level development. </w:t></w:r><w:r w:rsidR="00A776C6"><w:t>Thus</w:t></w:r><w:r><w:t xml:space="preserve">, </w:t></w:r><w:r w:rsidR="00A776C6"><w:t xml:space="preserve">for some time </w:t></w:r><w:r><w:t>ISAPI</w:t></w:r><w:r w:rsidR="00A776C6"><w:t xml:space="preserve"> development</w:t></w:r><w:r><w:t xml:space="preserve"> has been </w:t></w:r><w:r w:rsidR="00A776C6"><w:t xml:space="preserve">largely </w:t></w:r><w:r><w:t>relegated to providing bridge interfaces to other application or platforms</w:t></w:r><w:r w:rsidR="00F93EF8"><w:t>, such as PHP</w:t></w:r><w:r><w:t xml:space="preserve">. But ISAPI </w:t></w:r><w:r w:rsidR="006B7975"><w:t>did not become</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="006B7975"><w:t>obsolete</w:t></w:r><w:r><w:t xml:space="preserve"> with the appearance of ASP.NET. </w:t></w:r><w:r w:rsidR="006B7975"><w:t xml:space="preserve">The </w:t></w:r><w:r><w:t xml:space="preserve">ASP.NET </w:t></w:r><w:r w:rsidR="006B7975"><w:t>engine</w:t></w:r><w:r w:rsidR="00520CFC"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">interfaces with IIS through an ISAPI extension. This extension hosts .NET through the ASP.NET runtime. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:commentRangeStart w:id="0"/><w:r><w:t xml:space="preserve">ISAPI provides the core interface from the Web Server and ASP.NET uses the unmanaged ISAPI code </w:t></w:r><w:r w:rsidR="00520CFC"><w:t xml:space="preserve">portion </w:t></w:r><w:r><w:t xml:space="preserve">to retrieve input and send output back to the client. The content that ISAPI provides is </w:t></w:r><w:r w:rsidR="00520CFC"><w:t xml:space="preserve">passed </w:t></w:r><w:r><w:t xml:space="preserve">using common objects like </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="006B7975"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="006B7975"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpResponse</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> that expose the unmanaged data as managed objects. Back </w:t></w:r><w:r w:rsidR="00520CFC"><w:t xml:space="preserve">in </w:t></w:r><w:r><w:t>the .NET world it becomes very easy to use</w:t></w:r><w:r w:rsidR="00D153AA"><w:t xml:space="preserve"> these objects</w:t></w:r><w:r><w:t xml:space="preserve"> in </w:t></w:r><w:r w:rsidR="00D153AA"><w:t xml:space="preserve">your own </w:t></w:r><w:r><w:t>code.</w:t></w:r><w:commentRangeEnd w:id="0"/><w:r w:rsidR="00520CFC"><w:rPr><w:rStyle w:val="Kommentarzeichen"/></w:rPr><w:commentReference w:id="0"/></w:r><w:r w:rsidR="00F93EF8"><w:t xml:space="preserve"> I’ll later explain how the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00F93EF8"><w:t>umanaged</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00F93EF8"><w:t xml:space="preserve"> and managed world interoperate.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="006B7975" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t>The Lifetime of a Request</w:t></w:r></w:p><w:p w:rsidR="006B7975" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>The lifetime starts with a</w:t></w:r><w:r w:rsidR="00D153AA"><w:t>n</w:t></w:r><w:r><w:t xml:space="preserve"> ASP.NET request. </w:t></w:r><w:r w:rsidR="006B7975"><w:t>Whenever</w:t></w:r><w:r><w:t xml:space="preserve"> the user types in a URL, clicks on a hyperlink</w:t></w:r><w:r w:rsidR="008C79E5"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> or submits an HTML form</w:t></w:r><w:r w:rsidR="006B7975"><w:t xml:space="preserve"> on the browser, a request is sent to the server</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r></w:p><w:p w:rsidR="006B7975" w:rsidRDefault="006B7975" w:rsidP="006B7975"><w:pPr><w:pStyle w:val="NoteTipCaution"/></w:pPr><w:r><w:t xml:space="preserve">Note: </w:t></w:r><w:r><w:tab/></w:r><w:r w:rsidR="008C79E5"><w:t>It’s essentially the same for web services.</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> A client application call</w:t></w:r><w:r w:rsidR="00983366"><w:t>s</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> an ASP.NET based Web Service </w:t></w:r><w:r w:rsidR="00983366"><w:t>by sending a request</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. </w:t></w:r><w:r><w:t>Therefore</w:t></w:r><w:r w:rsidR="00983366"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> I refer to the term Request and don’t </w:t></w:r><w:r w:rsidR="00983366"><w:t>differentiate between Web Service and browser requests.</w:t></w:r><w:r w:rsidR="00E7144D"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00983366"><w:t>You can</w:t></w:r><w:r><w:t xml:space="preserve"> assume that </w:t></w:r><w:r w:rsidR="00983366"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">examples </w:t></w:r><w:r w:rsidR="00983366"><w:t xml:space="preserve">given </w:t></w:r><w:r><w:t xml:space="preserve">are </w:t></w:r><w:r w:rsidR="00DB0236"><w:t xml:space="preserve">intended </w:t></w:r><w:r><w:t>to run in a browser environment.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00446D44"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t>For the sake of clarity</w:t></w:r><w:r w:rsidR="008C79E5"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> we left out the steps made behind the scene</w:t></w:r><w:r w:rsidR="00484AD0"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> in the browser and through the protocol stacks. </w:t></w:r><w:r w:rsidR="00484AD0"><w:t>This</w:t></w:r><w:r><w:t xml:space="preserve"> includes port assignment within the TCP/IP stack and name resolution using the DNS protocol. As long as we’re talking about ASP.NET we have no direct influence</w:t></w:r><w:r w:rsidR="00F93EF8"><w:t xml:space="preserve"> on DNS, </w:t></w:r><w:r><w:t xml:space="preserve">so let’s keep this in mind but </w:t></w:r><w:r w:rsidR="00484AD0"><w:t xml:space="preserve">not complicate </w:t></w:r><w:r><w:t xml:space="preserve">the description </w:t></w:r><w:r w:rsidR="00484AD0"><w:t xml:space="preserve">with </w:t></w:r><w:r><w:t xml:space="preserve">side </w:t></w:r><w:r w:rsidR="00484AD0"><w:t>effects</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00F93EF8" w:rsidRDefault="00F93EF8" w:rsidP="00F93EF8"><w:pPr><w:pStyle w:val="SBHead"/></w:pPr><w:r><w:t>Domain NAME SYSTEM</w:t></w:r></w:p><w:p w:rsidR="00F53C34" w:rsidRDefault="00F93EF8" w:rsidP="00F53C34"><w:pPr><w:pStyle w:val="SBBodyFirst"/></w:pPr><w:r><w:t xml:space="preserve">The Domain Name System (DNS) is hierarchical naming system for internet resources. Mainly these are computers that </w:t></w:r><w:r w:rsidR="00F53C34"><w:t xml:space="preserve">get human readable names—the hostnames—the DNS translates into IP addresses. Beginning with some root servers the DNS is a hierarchy of name resolution servers for particular levels of the hostname. The protocol running between the servers and clients is called DNS protocol. </w:t></w:r></w:p><w:p w:rsidR="00F93EF8" w:rsidRPr="00F53C34" w:rsidRDefault="00F53C34" w:rsidP="00F53C34"><w:pPr><w:pStyle w:val="SBBodyLast"/></w:pPr><w:r><w:t xml:space="preserve">.NET Framework supports DNS with several classes. However, for ASP.NET applications usually there is no need to program directly against this low level protocol. The request we focus on begins when the name resolution process is done. </w:t></w:r></w:p><w:p w:rsidR="000B2FCA" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>On the server side the web server picks up the request. In this description we focus mainly on ISS7 with some words for IIS6, which is still widely used. However, most parts will not refer to a specifi</w:t></w:r><w:r w:rsidR="00446D44"><w:t>c</w:t></w:r><w:r><w:t xml:space="preserve"> version, so the term IIS covers all from IIS5 to IIS7 (and beyond, probably). Within IIS the request is </w:t></w:r><w:r w:rsidR="00E7144D"><w:t xml:space="preserve">usually </w:t></w:r><w:r><w:t xml:space="preserve">routed to the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>aspx</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> page. How this process works internally depends entirely on the HTTP handler that handles the request. The mapping between the .</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>aspx</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> extension and </w:t></w:r><w:r w:rsidR="00446D44"><w:t xml:space="preserve">the ISAPI </w:t></w:r><w:r w:rsidR="00156050"><w:t>DLL</w:t></w:r><w:r w:rsidR="00446D44"><w:t>, aspnet_isapi.dll</w:t></w:r><w:r w:rsidR="008C79E5"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> is responsible for this. Every request that handles applications extensions </w:t></w:r><w:r w:rsidR="008C79E5"><w:t xml:space="preserve">which </w:t></w:r><w:r><w:t xml:space="preserve">we want to be served by ASP.NET must be routed that way. </w:t></w:r><w:r w:rsidR="008C79E5"><w:t xml:space="preserve">This </w:t></w:r><w:r><w:t>means that the extension is a pre</w:t></w:r><w:r w:rsidR="0022273F"><w:t>-</w:t></w:r><w:r><w:t>defined</w:t></w:r><w:r w:rsidR="0022273F"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> yet voluntary</w:t></w:r><w:r w:rsidR="0022273F"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> definition. </w:t></w:r><w:r w:rsidR="0022273F"><w:t>Imagine</w:t></w:r><w:r><w:t xml:space="preserve"> if you map</w:t></w:r><w:r w:rsidR="00ED4AD7"><w:t>ped</w:t></w:r><w:r><w:t xml:space="preserve"> .html pages </w:t></w:r><w:r w:rsidR="0022273F"><w:t>to be</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00803A25"><w:t>processed</w:t></w:r><w:r><w:t xml:space="preserve"> by ASP.NET as well </w:t></w:r><w:r w:rsidR="000B2FCA"><w:t xml:space="preserve">— </w:t></w:r><w:r><w:t>it</w:t></w:r><w:r w:rsidR="0022273F"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00ED4AD7"><w:t xml:space="preserve">wouldn’t be </w:t></w:r><w:r w:rsidR="0022273F"><w:t>obvious</w:t></w:r><w:r><w:t xml:space="preserve"> that ASP.NET </w:t></w:r><w:r w:rsidR="00ED4AD7"><w:t xml:space="preserve">was </w:t></w:r><w:r><w:t xml:space="preserve">doing the trick. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">This means, too, that different extensions might route to different handlers. </w:t></w:r><w:r w:rsidR="006638C4"><w:t>For instance, the</w:t></w:r><w:r><w:t xml:space="preserve"> .</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>asmx</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> extension is routed to the web service handler. Instead of </w:t></w:r><w:r w:rsidR="007106A6"><w:t xml:space="preserve">opening </w:t></w:r><w:r><w:t>a page and start</w:t></w:r><w:r w:rsidR="007106A6"><w:t>ing</w:t></w:r><w:r><w:t xml:space="preserve"> a page parser</w:t></w:r><w:r w:rsidR="00ED4AD7"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> this request does not open a file but a specially attributed class that identifies the </w:t></w:r><w:r w:rsidR="00803A25"><w:t>implementation</w:t></w:r><w:r><w:t xml:space="preserve">. Many other handlers are installed with ASP.NET and you </w:t></w:r><w:r w:rsidR="00ED4AD7"><w:t xml:space="preserve">are also able to </w:t></w:r><w:r><w:t xml:space="preserve">define your own. All these handlers are mapped to the ASP.NET ISAPI extension and configured in </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>web.config</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> to get routed to a specific implementation. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F1361C" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">In coding terms the handler is </w:t></w:r><w:r w:rsidR="00446D44"><w:t xml:space="preserve">a </w:t></w:r><w:r><w:t xml:space="preserve">type, implemented by a .NET class that handles a specific extension. You can also attach </w:t></w:r><w:r w:rsidR="0022273F"><w:t xml:space="preserve">your </w:t></w:r><w:r><w:t>own handlers to existing extensions and route the request through both</w:t></w:r><w:r w:rsidR="000B2FCA"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>you</w:t></w:r><w:r w:rsidR="0022273F"><w:t>r</w:t></w:r><w:r><w:t xml:space="preserve"> own and the default </w:t></w:r><w:r w:rsidR="00803A25"><w:t>implementation</w:t></w:r><w:r><w:t>. The extension is the basic mapping</w:t></w:r><w:r w:rsidR="00446D44"><w:t xml:space="preserve"> where</w:t></w:r><w:r><w:t xml:space="preserve"> the processing starts. The basic mappings alread</w:t></w:r><w:r w:rsidR="00F1361C"><w:t xml:space="preserve">y available are shown in </w:t></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C"><w:instrText xml:space="preserve"> REF _Ref219276320 \h </w:instrText></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="00446D44"><w:t xml:space="preserve">Table </w:t></w:r><w:r w:rsidR="00446D44"><w:rPr><w:noProof/></w:rPr><w:t>1</w:t></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="end"/></w:r><w:r w:rsidR="00446D44"><w:t>.</w:t></w:r><w:r w:rsidR="00446D44" w:rsidRPr="00F1361C"><w:t xml:space="preserve"> </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00F1361C" w:rsidP="00F1361C"><w:pPr><w:pStyle w:val="TableCaption"/></w:pPr><w:bookmarkStart w:id="1" w:name="_Ref219276320"/><w:r><w:t xml:space="preserve">Table </w:t></w:r><w:r w:rsidR="0051228A"><w:t>1-</w:t></w:r><w:r w:rsidR="009A02DC"><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="009A02DC"><w:instrText xml:space="preserve"> SEQ Table \* ARABIC </w:instrText></w:r><w:r w:rsidR="009A02DC"><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>1</w:t></w:r><w:r w:rsidR="009A02DC"><w:fldChar w:fldCharType="end"/></w:r><w:bookmarkEnd w:id="1"/><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00165A64"><w:t>Application mappings assigned to aspnet_isapi.dll</w:t></w:r></w:p><w:tbl><w:tblPr><w:tblStyle w:val="Tabellenraster"/><w:tblW w:w="0" w:type="auto"/><w:tblInd w:w="108" w:type="dxa"/><w:tblLook w:val="04A0" w:firstRow="1" w:lastRow="0" w:firstColumn="1" w:lastColumn="0" w:noHBand="0" w:noVBand="1"/></w:tblPr><w:tblGrid><w:gridCol w:w="1985"/><w:gridCol w:w="2835"/><w:gridCol w:w="3685"/></w:tblGrid><w:tr w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidTr="00A77356"><w:tc><w:tcPr><w:tcW w:w="1985" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableHead"/><w:pBdr><w:top w:val="none" w:sz="0" w:space="0" w:color="auto"/></w:pBdr><w:ind w:left="0" w:firstLine="0"/><w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman"/><w:b w:val="0"/><w:sz w:val="24"/></w:rPr></w:pPr><w:r w:rsidRPr="00A77356"><w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman"/><w:b w:val="0"/><w:sz w:val="24"/></w:rPr><w:t>Extension</w:t></w:r></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="2835" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableHead"/><w:pBdr><w:top w:val="none" w:sz="0" w:space="0" w:color="auto"/></w:pBdr><w:ind w:left="0" w:firstLine="0"/><w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman"/><w:b w:val="0"/><w:sz w:val="24"/></w:rPr></w:pPr><w:r w:rsidRPr="00A77356"><w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman"/><w:b w:val="0"/><w:sz w:val="24"/></w:rPr><w:t>Resource Type</w:t></w:r></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="3685" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableHead"/><w:pBdr><w:top w:val="none" w:sz="0" w:space="0" w:color="auto"/></w:pBdr><w:ind w:left="0" w:firstLine="0"/></w:pPr><w:r w:rsidRPr="00A77356"><w:rPr><w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman"/><w:b w:val="0"/><w:sz w:val="24"/></w:rPr><w:t>Comments</w:t></w:r></w:p></w:tc></w:tr><w:tr w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidTr="00A77356"><w:tc><w:tcPr><w:tcW w:w="1985" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>.</w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A77356"><w:t>asax</w:t></w:r><w:proofErr w:type="spellEnd"/></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="2835" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>ASP.NET application files.</w:t></w:r></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="3685" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t xml:space="preserve">Usually the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A77356"><w:t>global.asax</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidRPr="00A77356"><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="gramStart"/><w:r w:rsidRPr="00A77356"><w:t>file</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r w:rsidRPr="00A77356"><w:t xml:space="preserve"> only.</w:t></w:r></w:p></w:tc></w:tr><w:tr w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidTr="00A77356"><w:tc><w:tcPr><w:tcW w:w="1985" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>.</w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A77356"><w:t>ascx</w:t></w:r><w:proofErr w:type="spellEnd"/></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="2835" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>ASP.NET user control files.</w:t></w:r></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="3685" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>Usually these files are not called directly.</w:t></w:r></w:p></w:tc></w:tr><w:tr w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidTr="00A77356"><w:tc><w:tcPr><w:tcW w:w="1985" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>.</w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A77356"><w:t>ashx</w:t></w:r><w:proofErr w:type="spellEnd"/></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="2835" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>HTTP handlers.</w:t></w:r></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="3685" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>The managed counterpart of ISAPI extensions; see chapter 3 for details.</w:t></w:r></w:p></w:tc></w:tr><w:tr w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidTr="00A77356"><w:tc><w:tcPr><w:tcW w:w="1985" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:lastRenderedPageBreak/><w:t>.</w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A77356"><w:t>asmx</w:t></w:r><w:proofErr w:type="spellEnd"/></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="2835" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>ASP.NET web services.</w:t></w:r></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="3685" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t xml:space="preserve"> Obsolete since the appearance of Windows Communication Foundation (WCF).</w:t></w:r></w:p></w:tc></w:tr><w:tr w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidTr="00A77356"><w:tc><w:tcPr><w:tcW w:w="1985" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>.</w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A77356"><w:t>aspx</w:t></w:r><w:proofErr w:type="spellEnd"/></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="2835" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>ASP.NET web pages.</w:t></w:r></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="3685" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>The regular page handler.</w:t></w:r></w:p></w:tc></w:tr><w:tr w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidTr="00A77356"><w:tc><w:tcPr><w:tcW w:w="1985" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>.</w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A77356"><w:t>axd</w:t></w:r><w:proofErr w:type="spellEnd"/></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="2835" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>ASP.NET internal HTTP handler.</w:t></w:r></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="3685" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r w:rsidRPr="00A77356"><w:t>Used for embedded resources like JavaScript or images pulled from compiled code.</w:t></w:r></w:p></w:tc></w:tr><w:tr w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidTr="00A77356"><w:tc><w:tcPr><w:tcW w:w="1985" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableTextLast"/><w:pBdr><w:bottom w:val="none" w:sz="0" w:space="0" w:color="auto"/></w:pBdr></w:pPr><w:r w:rsidRPr="00A77356"><w:t>.svc</w:t></w:r></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="2835" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableTextLast"/><w:pBdr><w:bottom w:val="none" w:sz="0" w:space="0" w:color="auto"/></w:pBdr></w:pPr><w:r w:rsidRPr="00A77356"><w:t>Web service handler.</w:t></w:r></w:p></w:tc><w:tc><w:tcPr><w:tcW w:w="3685" w:type="dxa"/></w:tcPr><w:p w:rsidR="00A77356" w:rsidRPr="00A77356" w:rsidRDefault="00A77356" w:rsidP="00BB5246"><w:pPr><w:pStyle w:val="TableTextLast"/><w:pBdr><w:bottom w:val="none" w:sz="0" w:space="0" w:color="auto"/></w:pBdr></w:pPr><w:r w:rsidRPr="00A77356"><w:t>WCF based services now have its own extension.</w:t></w:r></w:p></w:tc></w:tr></w:tbl><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Let’s </w:t></w:r><w:r w:rsidRPr="007F16F7"><w:t>talk</w:t></w:r><w:r><w:t xml:space="preserve"> about the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>asmx</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> extension shown in the table. With the </w:t></w:r><w:r w:rsidR="007106A6"><w:t xml:space="preserve">introduction </w:t></w:r><w:r><w:t>of .NET 3.0</w:t></w:r><w:r w:rsidR="007106A6"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> Microsoft moved all the communication stuff like .NET </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>remoting</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="007106A6"><w:t xml:space="preserve">and </w:t></w:r><w:r><w:t>web services to Windows Communication Foundation (WCF) base library</w:t></w:r><w:r w:rsidR="00F53C34"><w:rPr><w:rStyle w:val="Funotenzeichen"/></w:rPr><w:footnoteReference w:id="1"/></w:r><w:r><w:t xml:space="preserve">. This means that the ASP.NET based </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>webservices</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00407520"><w:t xml:space="preserve">are </w:t></w:r><w:r w:rsidR="006F52F8"><w:t>superseded</w:t></w:r><w:r><w:t xml:space="preserve">. Even </w:t></w:r><w:r w:rsidR="00407520"><w:t xml:space="preserve">though </w:t></w:r><w:r><w:t xml:space="preserve">they are still fully supported it makes sense to consider moving web service projects from ASP.NET platform to WCF. It’s not a </w:t></w:r><w:r w:rsidR="007B2012"><w:t>significant change</w:t></w:r><w:r><w:t>, as most classes are similar and WCF ha</w:t></w:r><w:r w:rsidR="00446D44"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> some more powerful </w:t></w:r><w:r w:rsidR="007B2012"><w:t>approaches</w:t></w:r><w:r><w:t xml:space="preserve">. However, </w:t></w:r><w:r w:rsidR="00446D44"><w:t>I</w:t></w:r><w:r><w:t xml:space="preserve"> don’t cover WCF in this book and therefore the following description is limited to the ASP.NET </w:t></w:r><w:r w:rsidR="007B2012"><w:t>portion.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="006B7975" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t>From</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> ISAPI </w:t></w:r><w:r><w:t>to ASP.NET</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>The Internet Service API</w:t></w:r><w:r w:rsidR="006B7975"><w:rPr><w:rStyle w:val="Funotenzeichen"/></w:rPr><w:footnoteReference w:id="2"/></w:r><w:r><w:t xml:space="preserve"> (ISAPI) is a common Win32 API to access IIS on a very low level. This means </w:t></w:r><w:r w:rsidR="002115EC"><w:t xml:space="preserve">that </w:t></w:r><w:r><w:t>it’s both fast and</w:t></w:r><w:r w:rsidR="008D032D"><w:t xml:space="preserve"> “unfriendly”</w:t></w:r><w:r><w:t xml:space="preserve">. The interface is optimized for performance but it’s </w:t></w:r><w:r w:rsidR="002115EC"><w:t xml:space="preserve">also </w:t></w:r><w:r><w:t xml:space="preserve">very simple and straightforward. For developers with .NET experience it’s pretty hard to use, because the </w:t></w:r><w:r w:rsidR="008D032D"><w:t>coding style you use in</w:t></w:r><w:r><w:t xml:space="preserve"> .NET</w:t></w:r><w:r w:rsidR="008D032D"><w:t xml:space="preserve"> to</w:t></w:r><w:r><w:t xml:space="preserve">, say, </w:t></w:r><w:r w:rsidR="008D032D"><w:t xml:space="preserve">create </w:t></w:r><w:r><w:t xml:space="preserve">sophisticated infrastructure solutions, is </w:t></w:r><w:r w:rsidR="002115EC"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>opposite</w:t></w:r><w:r w:rsidR="002115EC"><w:t xml:space="preserve"> of</w:t></w:r><w:r><w:t xml:space="preserve"> the style you see when coding ISAPI extensions in C++. Many high level web development languages </w:t></w:r><w:r w:rsidR="008D032D"><w:t>(such as</w:t></w:r><w:r><w:t xml:space="preserve"> PHP, Perl, </w:t></w:r><w:r w:rsidR="008D032D"><w:t xml:space="preserve">and </w:t></w:r><w:r><w:t>even ASP.NET</w:t></w:r><w:r w:rsidR="008D032D"><w:t>)</w:t></w:r><w:r><w:t xml:space="preserve"> are </w:t></w:r><w:r w:rsidR="00446D44"><w:t>built</w:t></w:r><w:r><w:t xml:space="preserve"> on top of ISAPI. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>ISAPI is good for writing such environments. For application developers it’s not</w:t></w:r><w:r w:rsidR="002115EC"><w:t xml:space="preserve"> the best way</w:t></w:r><w:r><w:t xml:space="preserve"> to write our sites </w:t></w:r><w:r w:rsidR="008D032D"><w:t xml:space="preserve">on </w:t></w:r><w:r><w:t xml:space="preserve">time and </w:t></w:r><w:r w:rsidR="008D032D"><w:t xml:space="preserve">within </w:t></w:r><w:r><w:t xml:space="preserve">budget. However, ISAPI is the layer our ASP.NET engine is built on and a good understanding is helpful for getting the most out of ASP.NET. For ASP.NET the ISAPI level is just acting as a routing layer. </w:t></w:r><w:r w:rsidR="006F52F8"><w:t xml:space="preserve">The heavy stuff, </w:t></w:r><w:r w:rsidR="00E772A9"><w:t xml:space="preserve">such as </w:t></w:r><w:r w:rsidR="006F52F8"><w:t xml:space="preserve">processing and request </w:t></w:r><w:r w:rsidR="00E772A9"><w:t>management,</w:t></w:r><w:r w:rsidR="006F52F8"><w:t xml:space="preserve"> occurs inside the ASP.NET engine and is mostly done in managed code.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">You can think of ISAPI as </w:t></w:r><w:r w:rsidR="008D032D"><w:t xml:space="preserve">a </w:t></w:r><w:r><w:t>sort of protocol. This protocol supports</w:t></w:r><w:r w:rsidR="00446D44"><w:t xml:space="preserve"> two</w:t></w:r><w:r><w:t xml:space="preserve"> flavors, ISAPI extensions and ISAPI filters. Extensions act as a transaction interface; they handle </w:t></w:r><w:r w:rsidR="00645385"><w:t>the flow</w:t></w:r><w:r><w:t xml:space="preserve"> of data </w:t></w:r><w:r w:rsidR="00645385"><w:t xml:space="preserve">in to and out of </w:t></w:r><w:r><w:t xml:space="preserve">the web server. Each request coming down the pipeline is going through the extensions and the code </w:t></w:r><w:r w:rsidR="00645385"><w:t xml:space="preserve">decides </w:t></w:r><w:r><w:t xml:space="preserve">how they are treated. As you might imagine, ASP.NET is such an extension. ASP.NET has several ways to give you as much control as possible to hook into this extension and modify the default behavior. The low level ISAPI interfaces are now available as high level .NET interfaces, named </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>IHttpHandler</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>IHttpModule</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">. This is </w:t></w:r><w:r><w:lastRenderedPageBreak/><w:t>very powerful and still provides good performance, because it’s a well written balance between lean access to the lower level and an easy</w:t></w:r><w:r w:rsidR="00645385"><w:t>-</w:t></w:r><w:r><w:t>to</w:t></w:r><w:r w:rsidR="00645385"><w:t>-</w:t></w:r><w:r><w:t>use high level API.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>Like any other ISAPI extension the code is provided as</w:t></w:r><w:r w:rsidR="00645385"><w:t xml:space="preserve"> a</w:t></w:r><w:r><w:t xml:space="preserve"> DLL and</w:t></w:r><w:r w:rsidR="00645385"><w:t xml:space="preserve"> is</w:t></w:r><w:r><w:t xml:space="preserve"> hooked into the IIS management. You can find this DLL here:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Query"/></w:pPr><w:r><w:t xml:space="preserve">&lt;.NET </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>FrameworkDir</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>&gt;\aspnet_isapi.dll</w:t></w:r></w:p><w:p w:rsidR="00446D44" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">If you have several versions of .NET framework installed you </w:t></w:r><w:r w:rsidR="00645385"><w:t xml:space="preserve">may </w:t></w:r><w:r><w:t>wonder why there is just one</w:t></w:r><w:r w:rsidR="00645385"><w:t xml:space="preserve"> such</w:t></w:r><w:r><w:t xml:space="preserve"> DLL in the tree. I predict that you</w:t></w:r><w:r w:rsidR="002115EC"><w:t xml:space="preserve"> will</w:t></w:r><w:r><w:t xml:space="preserve"> find this in the v2.0.50727 folder or at least in one with v2.0 at the beginning.</w:t></w:r><w:r w:rsidR="00E772A9"><w:t xml:space="preserve"> If you have .NET 1 installed, another version might reside in a folder named v1.1.x. </w:t></w:r><w:r><w:t xml:space="preserve"> The reason is that Microsoft has added a lot of features in .NET 3.</w:t></w:r><w:r w:rsidR="00446D44"><w:t>0</w:t></w:r><w:r><w:t xml:space="preserve"> and .NET </w:t></w:r><w:r w:rsidR="00446D44"><w:t>3</w:t></w:r><w:r><w:t>.</w:t></w:r><w:r w:rsidR="00446D44"><w:t>5</w:t></w:r><w:r><w:t xml:space="preserve"> regarding ASP.NET, but the low level interfaces are still the same. All new </w:t></w:r><w:r w:rsidR="00C862BE"><w:t xml:space="preserve">functionality </w:t></w:r><w:r><w:t>is completely written in managed code. This is indeed a transition as it shows that it’s possible to write infrastructure components in managed code. With powerful hardware the performance loss is not that critical whereas the benefits regarding security, reliability, and shorter development cycles matter.</w:t></w:r></w:p><w:p w:rsidR="00446D44" w:rsidRDefault="00E772A9" w:rsidP="00E772A9"><w:pPr><w:pStyle w:val="NoteTipCaution"/></w:pPr><w:r><w:t>Note:</w:t></w:r><w:r><w:tab/></w:r><w:r w:rsidR="00446D44"><w:t xml:space="preserve">With </w:t></w:r><w:r w:rsidR="00C862BE"><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="00446D44"><w:t xml:space="preserve">upcoming .NET 4.0 a new engine appears </w:t></w:r><w:r w:rsidR="00C862BE"><w:t xml:space="preserve">on </w:t></w:r><w:r w:rsidR="00446D44"><w:t xml:space="preserve">the horizon that is closer to IIS7 and has several internal improvements. </w:t></w:r><w:r w:rsidR="00C862BE"><w:t>For</w:t></w:r><w:r w:rsidR="00446D44"><w:t xml:space="preserve"> now, it seems </w:t></w:r><w:r w:rsidR="002115EC"><w:t xml:space="preserve">as though </w:t></w:r><w:r w:rsidR="00446D44"><w:t xml:space="preserve">most of the techniques and internal behaviors </w:t></w:r><w:r w:rsidR="006F52F8"><w:t>described</w:t></w:r><w:r w:rsidR="00446D44"><w:t xml:space="preserve"> here </w:t></w:r><w:r w:rsidR="002115EC"><w:t xml:space="preserve">have barely </w:t></w:r><w:r w:rsidR="00C862BE"><w:t>changed</w:t></w:r><w:r w:rsidR="00446D44"><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t>The extension mapping</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">As you have </w:t></w:r><w:r w:rsidR="00C862BE"><w:t>already seen,</w:t></w:r><w:r><w:t xml:space="preserve"> the web server recognizes resource request</w:t></w:r><w:r w:rsidR="00446D44"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00446D44"><w:t xml:space="preserve">by </w:t></w:r><w:r><w:t xml:space="preserve">analyzing the file extension. The first step to get the ASP.NET ISAPI extension running is a mapping between the several file types and the DLL I mentioned earlier. In IIS7 you can see this by </w:t></w:r><w:r w:rsidR="005266DA"><w:t>following these steps</w:t></w:r><w:r><w:t>:</w:t></w:r></w:p><w:p w:rsidR="00E772A9" w:rsidRDefault="00E772A9" w:rsidP="00E772A9"><w:pPr><w:pStyle w:val="BulletFirst"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t>Open Internet Information Services (IIS) Manager</w:t></w:r></w:p><w:p w:rsidR="00E772A9" w:rsidRDefault="00E772A9" w:rsidP="00E772A9"><w:pPr><w:pStyle w:val="Bullet"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t>Choose the server node</w:t></w:r></w:p><w:p w:rsidR="00E772A9" w:rsidRDefault="00E772A9" w:rsidP="00E772A9"><w:pPr><w:pStyle w:val="Bullet"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t>In the right pane scroll to the IIS table</w:t></w:r></w:p><w:p w:rsidR="00E772A9" w:rsidRDefault="00E772A9" w:rsidP="00E772A9"><w:pPr><w:pStyle w:val="BulletLast"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t>Double click Handler Mappings</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>In the table you</w:t></w:r><w:r w:rsidR="002115EC"><w:t xml:space="preserve"> will</w:t></w:r><w:r><w:t xml:space="preserve"> see a column Path with the extensions already assigned. In the column Handler you </w:t></w:r><w:r w:rsidR="002115EC"><w:t xml:space="preserve">will </w:t></w:r><w:r><w:t xml:space="preserve">see the assigned module. For </w:t></w:r><w:r w:rsidR="002115EC"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>*.</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>aspx</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="007F16F7"><w:t>extension</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="002115EC"><w:t xml:space="preserve">there are </w:t></w:r><w:r w:rsidR="00446D44"><w:t>these</w:t></w:r><w:r><w:t xml:space="preserve"> mappings:</w:t></w:r></w:p><w:p w:rsidR="00E772A9" w:rsidRDefault="00E772A9" w:rsidP="00E772A9"><w:pPr><w:pStyle w:val="BulletFirst"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>PageHandlerFactory</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>-Integrated</w:t></w:r></w:p><w:p w:rsidR="00E772A9" w:rsidRDefault="00E772A9" w:rsidP="00E772A9"><w:pPr><w:pStyle w:val="BulletLast"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t>PageHandlerFactory-ISAPI-2.0</w:t></w:r></w:p><w:p w:rsidR="00446D44" w:rsidRDefault="00446D44" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Additionally, with .NET 4.0, two additional mappings </w:t></w:r><w:r w:rsidR="005266DA"><w:t xml:space="preserve">are </w:t></w:r><w:r><w:t>installed</w:t></w:r><w:r w:rsidR="00E772A9"><w:t xml:space="preserve"> (on a 32-bit machine)</w:t></w:r><w:r><w:t>:</w:t></w:r></w:p><w:p w:rsidR="00E772A9" w:rsidRDefault="00E772A9" w:rsidP="00E772A9"><w:pPr><w:pStyle w:val="BulletFirst"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t>PageHandlerFactory-Integrated-4.0</w:t></w:r></w:p><w:p w:rsidR="00E772A9" w:rsidRDefault="00E772A9" w:rsidP="00E772A9"><w:pPr><w:pStyle w:val="BulletLast"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t>PageHandlerFactory-ISAPI-4.0_32bit</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t>For the unmanaged side you</w:t></w:r><w:r w:rsidR="002115EC"><w:t xml:space="preserve"> will</w:t></w:r><w:r><w:t xml:space="preserve"> see the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>IsapiModule</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> handler and for the managed one .NET types used to handle the pages.</w:t></w:r></w:p><w:p w:rsidR="00446D44" w:rsidRDefault="00446D44" w:rsidP="00446D44"><w:pPr><w:pStyle w:val="Figure"/></w:pPr><w:bookmarkStart w:id="2" w:name="_GoBack"/><w:r><w:rPr><w:noProof/><w:lang w:val="de-DE" w:eastAsia="de-DE"/></w:rPr><w:drawing><wp:inline distT="0" distB="0" distL="0" distR="0" wp14:anchorId="76A476C2" wp14:editId="1E6CE6F1"><wp:extent cx="4391025" cy="3543300"/><wp:effectExtent l="19050" t="0" r="9525" b="0"/><wp:docPr id="1" name="ASPEXTf0101.tif" descr="D:\UserData\jkrause\Documents\Meine Daten\Bücher\Fachbuchprojekte\ASP.NET Extensibility\Images\ASPEXTf0101.tif"/><wp:cNvGraphicFramePr><a:graphicFrameLocks xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" noChangeAspect="1"/></wp:cNvGraphicFramePr><a:graphic xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:nvPicPr><pic:cNvPr id="0" name="ASPEXTf0101.tif"/><pic:cNvPicPr/></pic:nvPicPr><pic:blipFill><a:blip r:link="rId11"/><a:stretch><a:fillRect/></a:stretch></pic:blipFill><pic:spPr><a:xfrm><a:off x="0" y="0"/><a:ext cx="4391025" cy="3543300"/></a:xfrm><a:prstGeom prst="rect"><a:avLst/></a:prstGeom></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r><w:bookmarkEnd w:id="2"/></w:p><w:p w:rsidR="00446D44" w:rsidRPr="00446D44" w:rsidRDefault="005C6485" w:rsidP="00446D44"><w:pPr><w:pStyle w:val="Production"/></w:pPr><w:r><w:t xml:space="preserve">Insert </w:t></w:r><w:r w:rsidR="00446D44" w:rsidRPr="00446D44"><w:t>ASPEXTf0101.tif</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="FigureCaption"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="00014600"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Figure \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>1</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. IIS7 maps extensions like *.aspx to ISAPI extensions</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00DB61AC" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>If</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> the mapping isn’t there</w:t></w:r><w:r><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> ASP.NET is probably not correctly installed. Don’t try to map this by hand. There is a lot of </w:t></w:r><w:r><w:t xml:space="preserve">configuration that happens </w:t></w:r><w:r w:rsidR="00165A64"><w:t>behind the scene</w:t></w:r><w:r><w:t>s</w:t></w:r><w:r w:rsidR="00165A64"><w:t>. To register or re-register the mappings just invoke the following command:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="003B7E25"><w:pPr><w:pStyle w:val="Query"/></w:pPr><w:proofErr w:type="gramStart"/><w:r><w:t>cd</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t xml:space="preserve"> &lt;.</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>NetFrameworkDirectory</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="003B7E25"><w:pPr><w:pStyle w:val="Query"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>aspnet_regiis</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> - </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>i</w:t></w:r><w:proofErr w:type="spellEnd"/></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>Again, this command is not available for all .NET framework versions. Version 2.0 will do the trick, even if you run 3.0 or 3.5. With ASP.NET 4.0</w:t></w:r><w:r w:rsidR="00DB61AC"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> a new ISAPI</w:t></w:r><w:r w:rsidR="00337FDD"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">DLL </w:t></w:r><w:r w:rsidR="00337FDD"><w:t>will be</w:t></w:r><w:r><w:t xml:space="preserve"> introduced</w:t></w:r><w:r w:rsidR="00337FDD"><w:t xml:space="preserve"> —</w:t></w:r><w:r><w:t xml:space="preserve"> but backward compatibility is still guaranteed. If you still</w:t></w:r><w:r w:rsidR="00337FDD"><w:t xml:space="preserve"> have version</w:t></w:r><w:r><w:t xml:space="preserve"> 1.</w:t></w:r><w:r w:rsidR="00337FDD"><w:t xml:space="preserve">x </w:t></w:r><w:r><w:t xml:space="preserve">sites running, there is another version available. It’s </w:t></w:r><w:r w:rsidR="00337FDD"><w:t xml:space="preserve">a </w:t></w:r><w:r><w:t>bit tricky, but</w:t></w:r><w:r w:rsidR="002115EC"><w:t xml:space="preserve"> in order</w:t></w:r><w:r><w:t xml:space="preserve"> to run two different ASP.NET versions</w:t></w:r><w:r w:rsidR="002115EC"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> just register with the highest available. In IIS6 the properties of </w:t></w:r><w:r w:rsidR="005D72D5"><w:t xml:space="preserve">a </w:t></w:r><w:r><w:t xml:space="preserve">specific site of </w:t></w:r><w:r w:rsidR="00337FDD"><w:t xml:space="preserve">a </w:t></w:r><w:r><w:t>web server let you cho</w:t></w:r><w:r w:rsidR="005D72D5"><w:t>o</w:t></w:r><w:r><w:t xml:space="preserve">se the right framework. In IIS7 </w:t></w:r><w:r w:rsidR="005D72D5"><w:t xml:space="preserve">it has been </w:t></w:r><w:r><w:t xml:space="preserve">moved to the application pool settings dialog. Each application pool can run only one version of the runtime. </w:t></w:r><w:r w:rsidR="005C6485"><w:t>T</w:t></w:r><w:r><w:t>o set another framework for a specific site</w:t></w:r><w:r w:rsidR="005D72D5"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> you have to create another application pool, set the appropriate framework version</w:t></w:r><w:r w:rsidR="005D72D5"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> and assign the application pool to the site.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="005C6485" w:rsidP="005C6485"><w:pPr><w:pStyle w:val="Figure"/></w:pPr><w:r><w:rPr><w:noProof/><w:lang w:val="de-DE" w:eastAsia="de-DE"/></w:rPr><w:lastRenderedPageBreak/><w:drawing><wp:inline distT="0" distB="0" distL="0" distR="0" wp14:anchorId="52E465C5" wp14:editId="1F211594"><wp:extent cx="2914650" cy="2600325"/><wp:effectExtent l="19050" t="0" r="0" b="0"/><wp:docPr id="2" name="Grafik 1" descr="ASPEXTf0102.tif"/><wp:cNvGraphicFramePr><a:graphicFrameLocks xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" noChangeAspect="1"/></wp:cNvGraphicFramePr><a:graphic xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:nvPicPr><pic:cNvPr id="0" name="ASPEXTf0102.tif"/><pic:cNvPicPr/></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId12"/><a:stretch><a:fillRect/></a:stretch></pic:blipFill><pic:spPr><a:xfrm><a:off x="0" y="0"/><a:ext cx="2914650" cy="2600325"/></a:xfrm><a:prstGeom prst="rect"><a:avLst/></a:prstGeom></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r></w:p><w:p w:rsidR="005C6485" w:rsidRPr="005C6485" w:rsidRDefault="005C6485" w:rsidP="005C6485"><w:pPr><w:pStyle w:val="Production"/></w:pPr><w:r><w:t xml:space="preserve">Insert </w:t></w:r><w:r w:rsidRPr="005C6485"><w:t>ASPEXTf0102</w:t></w:r><w:r><w:t>.tif</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="FigureCaption"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="00014600"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Figure \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>2</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. Adding a new application pool and get the right framework there</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t>The request comes in</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">When a request comes in, IIS checks for the script map and routes the request to the associated extension. In case of ASP.NET we assume that the request is something like Default.aspx, so it’s being </w:t></w:r><w:r w:rsidR="00337FDD"><w:t xml:space="preserve">routed </w:t></w:r><w:r><w:t>to aspnet_isapi.dll.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="003B7E25"><w:pPr><w:pStyle w:val="Figure"/></w:pPr><w:r w:rsidRPr="007E0518"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="003B7E25"><w:rPr><w:noProof/><w:lang w:val="de-DE" w:eastAsia="de-DE"/></w:rPr><w:drawing><wp:inline distT="0" distB="0" distL="0" distR="0" wp14:anchorId="53458E87" wp14:editId="2E79C0FD"><wp:extent cx="3556111" cy="3650776"/><wp:effectExtent l="19050" t="0" r="6239" b="0"/><wp:docPr id="4" name="ASPEXTf0103.tif" descr="D:\UserData\jkrause\Documents\Meine Daten\Bücher\Fachbuchprojekte\ASP.NET Extensibility\Images\ASPEXTf0103.tif"/><wp:cNvGraphicFramePr><a:graphicFrameLocks xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" noChangeAspect="1"/></wp:cNvGraphicFramePr><a:graphic xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:nvPicPr><pic:cNvPr id="0" name="ASPEXTf0103.tif"/><pic:cNvPicPr/></pic:nvPicPr><pic:blipFill><a:blip r:link="rId13"/><a:stretch><a:fillRect/></a:stretch></pic:blipFill><pic:spPr><a:xfrm><a:off x="0" y="0"/><a:ext cx="3557847" cy="3652559"/></a:xfrm><a:prstGeom prst="rect"><a:avLst/></a:prstGeom></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F1361C" w:rsidRDefault="00165A64" w:rsidP="003B7E25"><w:pPr><w:pStyle w:val="Production"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:lastRenderedPageBreak/><w:t>Insert ASPEXTf0103.tif</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="FigureCaption"/></w:pPr><w:bookmarkStart w:id="3" w:name="_Ref219454890"/><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="00014600"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Figure \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>3</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:bookmarkEnd w:id="3"/><w:r><w:t>. Request flow through IIS and down to ASP.NET runtime</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>I assume that you have already worked with and probably configured the application pool. The application pool was introduced with IIS6 and allows the complete isolation of application</w:t></w:r><w:r w:rsidR="00DB5329"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> from each other. </w:t></w:r><w:r w:rsidR="00D15E95"><w:t xml:space="preserve">This </w:t></w:r><w:r><w:t xml:space="preserve">means </w:t></w:r><w:r w:rsidR="00D15E95"><w:t xml:space="preserve">that </w:t></w:r><w:r><w:t xml:space="preserve">IIS is able to </w:t></w:r><w:r w:rsidR="00D15E95"><w:t xml:space="preserve">completely </w:t></w:r><w:r><w:t>separate things happen</w:t></w:r><w:r w:rsidR="00D15E95"><w:t>ing</w:t></w:r><w:r><w:t xml:space="preserve"> in one application </w:t></w:r><w:r w:rsidR="00DB5329"><w:t xml:space="preserve">from </w:t></w:r><w:r w:rsidR="00D15E95"><w:t xml:space="preserve">those in </w:t></w:r><w:r w:rsidR="00DB5329"><w:t>another</w:t></w:r><w:r><w:t>. Putting application</w:t></w:r><w:r w:rsidR="00DB5329"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> together in one pool could still make sense, because another pool </w:t></w:r><w:r w:rsidR="005D72D5"><w:t xml:space="preserve">would </w:t></w:r><w:r><w:t>create its own worker pro</w:t></w:r><w:r w:rsidR="00DB5329"><w:t xml:space="preserve">cess and, as shown in </w:t></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00DB5329"><w:instrText xml:space="preserve"> REF _Ref219454890 \h </w:instrText></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="00DB5329" w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="00593C6C"><w:t>1-</w:t></w:r><w:r w:rsidR="00DB5329"><w:rPr><w:noProof/></w:rPr><w:t>3</w:t></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t xml:space="preserve">, could </w:t></w:r><w:r w:rsidR="003B04DD"><w:t>use up many</w:t></w:r><w:r><w:t xml:space="preserve"> resources. Separate applications make the web server more reliable. If an application hangs, consumes too much CPU time</w:t></w:r><w:r w:rsidR="00DB5329"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> or behaves unpredictabl</w:t></w:r><w:r w:rsidR="003B04DD"><w:t>y,</w:t></w:r><w:r><w:t xml:space="preserve"> it influence</w:t></w:r><w:r w:rsidR="003B04DD"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> its </w:t></w:r><w:r w:rsidR="003B04DD"><w:t xml:space="preserve">entire </w:t></w:r><w:r><w:t>pool. Other application pool</w:t></w:r><w:r w:rsidR="003B04DD"><w:t>s (and the applications within them) will continue to</w:t></w:r><w:r><w:t xml:space="preserve"> run. Additionally</w:t></w:r><w:r w:rsidR="003B04DD"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the application pools are </w:t></w:r><w:r w:rsidR="003B04DD"><w:t xml:space="preserve">highly </w:t></w:r><w:r><w:t>configurable. You</w:t></w:r><w:r w:rsidR="003B04DD"><w:t>’ve</w:t></w:r><w:r><w:t xml:space="preserve"> already learned that the framework version </w:t></w:r><w:r w:rsidR="003B04DD"><w:t xml:space="preserve">can </w:t></w:r><w:r><w:t xml:space="preserve">be different for </w:t></w:r><w:r w:rsidR="003B04DD"><w:t>each</w:t></w:r><w:r><w:t xml:space="preserve"> pool, </w:t></w:r><w:r w:rsidR="00DB5329"><w:t>which</w:t></w:r><w:r><w:t xml:space="preserve"> is </w:t></w:r><w:r w:rsidR="00E772A9"><w:t>very useful</w:t></w:r><w:r><w:t xml:space="preserve"> for migration scenarios. You can configure the security environment by choosing the impersonation level and </w:t></w:r><w:r w:rsidR="005D72D5"><w:t xml:space="preserve">customizing </w:t></w:r><w:r><w:t xml:space="preserve">the rights given to a web application. Application pools are </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>executables</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> that run as any other program. This makes </w:t></w:r><w:r w:rsidR="003B04DD"><w:t xml:space="preserve">them </w:t></w:r><w:r><w:t xml:space="preserve">easy to monitor and configure. Although this </w:t></w:r><w:r w:rsidR="005D72D5"><w:t xml:space="preserve">does not </w:t></w:r><w:r><w:t xml:space="preserve">sound very “low level”, </w:t></w:r><w:r w:rsidR="005D72D5"><w:t xml:space="preserve">application pools </w:t></w:r><w:r><w:t xml:space="preserve">are highly optimized to talk directly to the kernel mode driver http.sys. Incoming requests are directly routed to </w:t></w:r><w:r w:rsidR="00DB5329"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">pool attached to the application. At this point you might </w:t></w:r><w:r w:rsidR="005D72D5"><w:t xml:space="preserve">be </w:t></w:r><w:r><w:t>wonder</w:t></w:r><w:r w:rsidR="005D72D5"><w:t>ing</w:t></w:r><w:r><w:t xml:space="preserve"> where </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>InetInfo</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is gone. </w:t></w:r><w:r w:rsidR="005D72D5"><w:t>I</w:t></w:r><w:r><w:t>t</w:t></w:r><w:r w:rsidR="00E772A9"><w:t xml:space="preserve"> i</w:t></w:r><w:r><w:t>s still there, but it</w:t></w:r><w:r w:rsidR="00E772A9"><w:t xml:space="preserve"> i</w:t></w:r><w:r><w:t xml:space="preserve">s </w:t></w:r><w:r w:rsidR="005D72D5"><w:t xml:space="preserve">basically </w:t></w:r><w:r><w:t>just an administration and configuration service. The flow of data through the IIS system goes as direct</w:t></w:r><w:r w:rsidR="003B04DD"><w:t>ly</w:t></w:r><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:r w:rsidR="003B04DD"><w:t xml:space="preserve">quickly </w:t></w:r><w:r><w:t xml:space="preserve">as possible, straight down from http.sys to </w:t></w:r><w:r w:rsidR="003B04DD"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">application pools. This is one reason why IIS7 is much faster and </w:t></w:r><w:r w:rsidR="003B04DD"><w:t xml:space="preserve">more </w:t></w:r><w:r><w:t>reliable than any other IIS before</w:t></w:r><w:r w:rsidR="003B04DD"><w:t xml:space="preserve"> it</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">An IIS7 application pool also has intrinsic knowledge of ASP.NET and in turn ASP.NET can communicate with </w:t></w:r><w:r w:rsidR="00780765"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">new low level </w:t></w:r><w:r w:rsidRPr="007F16F7"><w:t>APIs</w:t></w:r><w:r><w:t xml:space="preserve"> that allow direct access to the HTTP Cache APIs. This can offload caching from the ASP.NET level directly into the Web Server’s cache, which again will improve performance </w:t></w:r><w:r w:rsidRPr="007F16F7"><w:t>drastically</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">In IIS7, ISAPI extensions run in the Application Pool’s worker process. The .NET Runtime also runs in this same process, </w:t></w:r><w:r w:rsidR="00780765"><w:t xml:space="preserve">and consequently </w:t></w:r><w:r><w:t xml:space="preserve">communication between the ISAPI extension and the .NET runtime runs “in-process”, which is inherently more efficient. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t>Getting into the .NET runtime</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Now let’s look </w:t></w:r><w:r w:rsidR="00780765"><w:t xml:space="preserve">at </w:t></w:r><w:r><w:t>what happens to the request when accessing the managed level. The worker process w3wp.exe hosts the .NET runtime</w:t></w:r><w:r w:rsidR="00780765"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> and the ISAPI DLL calls into a small set of unman</w:t></w:r><w:r w:rsidR="00DB5329"><w:t>a</w:t></w:r><w:r><w:t>ged interfaces via low level COM</w:t></w:r><w:r w:rsidR="00E772A9"><w:rPr><w:rStyle w:val="Funotenzeichen"/></w:rPr><w:footnoteReference w:id="3"/></w:r><w:r><w:t>. Unfortunat</w:t></w:r><w:r w:rsidR="00780765"><w:t>e</w:t></w:r><w:r><w:t>ly</w:t></w:r><w:r w:rsidR="005D72D5"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> there is not much information available </w:t></w:r><w:r w:rsidR="00DB5329"><w:t>from Microsoft</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00780765"><w:t xml:space="preserve">Apart from </w:t></w:r><w:r><w:t xml:space="preserve">a few blogs </w:t></w:r><w:r w:rsidR="005D72D5"><w:t xml:space="preserve">that </w:t></w:r><w:r><w:t>we can’t always trust</w:t></w:r><w:r w:rsidR="00780765"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> it’s hard to say how the interaction between ASP.NET and ISAPI is made. Reading the manual do</w:t></w:r><w:r w:rsidR="00780765"><w:t>es</w:t></w:r><w:r><w:t xml:space="preserve">n’t help either. Microsoft </w:t></w:r><w:r w:rsidR="005D72D5"><w:t xml:space="preserve">states that the API </w:t></w:r><w:r><w:t>“supports the .NET Framework infrastructure and is not intended to be used directly from your code”</w:t></w:r><w:r w:rsidR="005D72D5"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="005D72D5"><w:t xml:space="preserve">which confirms the existence of the interface but nothing more. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">Using a disassembly tool like </w:t></w:r><w:r w:rsidR="005129FC"><w:t xml:space="preserve">.NET </w:t></w:r><w:r><w:t>Reflector (</w:t></w:r><w:r w:rsidR="00780765"><w:t>from red-gate.com</w:t></w:r><w:r><w:t xml:space="preserve">) is one way to look into the details. </w:t></w:r><w:r w:rsidR="000706A5"><w:t>Let’s</w:t></w:r><w:r><w:t xml:space="preserve"> examine the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>System.Web</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="000706A5"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="006F52F8"><w:t>DLL</w:t></w:r><w:r><w:t>, which contains everything we</w:t></w:r><w:r w:rsidR="000706A5"><w:t>’d</w:t></w:r><w:r><w:t xml:space="preserve"> like to know. </w:t></w:r><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">First, the entry point is the namespace </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>System.Web.Hosting</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="005D72D5"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> where </w:t></w:r><w:r w:rsidR="00DB5329"><w:t>you</w:t></w:r><w:r w:rsidR="005D72D5"><w:t>’ll</w:t></w:r><w:r><w:t xml:space="preserve"> see how the runtime interacts with the ISAPI part.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="003B7E25"><w:pPr><w:pStyle w:val="Figure"/></w:pPr><w:r><w:rPr><w:noProof/><w:lang w:val="de-DE" w:eastAsia="de-DE"/></w:rPr><w:drawing><wp:inline distT="0" distB="0" distL="0" distR="0" wp14:anchorId="0FED6BA0" wp14:editId="22469811"><wp:extent cx="5486400" cy="3672205"/><wp:effectExtent l="19050" t="0" r="0" b="0"/><wp:docPr id="5" name="ASPEXTf0104.tif" descr="D:\UserData\jkrause\Documents\Meine Daten\Bücher\Fachbuchprojekte\ASP.NET Extensibility\Images\ASPEXTf0104.tif"/><wp:cNvGraphicFramePr><a:graphicFrameLocks xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" noChangeAspect="1"/></wp:cNvGraphicFramePr><a:graphic xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:nvPicPr><pic:cNvPr id="0" name="ASPEXTf0104.tif"/><pic:cNvPicPr/></pic:nvPicPr><pic:blipFill><a:blip r:link="rId14"/><a:stretch><a:fillRect/></a:stretch></pic:blipFill><pic:spPr><a:xfrm><a:off x="0" y="0"/><a:ext cx="5486400" cy="3672205"/></a:xfrm><a:prstGeom prst="rect"><a:avLst/></a:prstGeom></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F1361C" w:rsidRDefault="00165A64" w:rsidP="003B7E25"><w:pPr><w:pStyle w:val="Production"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t>Insert ASPEXTf0104.tif</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="FigureCaption"/></w:pPr><w:bookmarkStart w:id="4" w:name="_Ref219276007"/><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="000706A5"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Figure \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>4</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:bookmarkEnd w:id="4"/><w:r><w:t>.</w:t></w:r><w:r w:rsidR="00B73674"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">If there is no information available we </w:t></w:r><w:r w:rsidR="000706A5"><w:t xml:space="preserve">can </w:t></w:r><w:r><w:t xml:space="preserve">use Reflector to </w:t></w:r><w:r w:rsidR="000706A5"><w:t xml:space="preserve">reveal </w:t></w:r><w:r><w:t>the internal</w:t></w:r><w:r w:rsidR="000706A5"><w:t xml:space="preserve"> code</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>If the runtime handles a request, it calls</w:t></w:r><w:r w:rsidR="005129FC"><w:t xml:space="preserve"> the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00DB5329"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ProcessRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method of</w:t></w:r><w:r w:rsidR="005129FC"><w:t xml:space="preserve"> the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00DB5329"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IISAPIRuntime</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> interface. The interface is part of ISAPI and exposed as COM. The first parameter will return a pointer which gives access to the ISAPI module. </w:t></w:r></w:p><w:p w:rsidR="00F173FD" w:rsidRDefault="00F173FD" w:rsidP="00F173FD"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:r w:rsidRPr="00011B23"><w:t xml:space="preserve">Listing </w:t></w:r><w:r><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidRPr="00011B23"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r><w:t>1</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. Definition of the ProcessRequest method</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>[return: MarshalAs(UnmanagedType.I4)]</w:t></w:r></w:p><w:p w:rsidR="00F173FD" w:rsidRDefault="00165A64" w:rsidP="00F173FD"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">int ProcessRequest([In] IntPtr ecb, </w:t></w:r><w:r w:rsidR="00F173FD"><w:sym w:font="Wingdings" w:char="F0C3"/></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00F173FD" w:rsidP="00F173FD"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">                    </w:t></w:r><w:r w:rsidR="00165A64"><w:t>[In, MarshalAs(UnmanagedType.I4)] int useProcessModel);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>The parameter called “</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>ecb</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">” returns the ISAPI Extension Control Block (ECB, (Microsoft)) that is passed as an unmanaged resource. The method takes the ECB and uses it as the base input and output interface used with the Request and Response objects. An ISAPI ECB contains all low level request information. This includes server variables, an input stream for form variables as well as an output stream that is used to write data back to the client. The output is later accessible via the Response objects, but </w:t></w:r><w:r w:rsidR="00090866"><w:t>you</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">can </w:t></w:r><w:r><w:t xml:space="preserve">see the tight relation between incoming request and outgoing response. The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>ecb</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> pointer basically provides access to the functionality</w:t></w:r><w:r w:rsidR="005129FC"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00B73674"><w:t xml:space="preserve">of </w:t></w:r><w:r><w:t>an ISAPI request.</w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve"> The</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ProcessRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">method </w:t></w:r><w:r><w:t xml:space="preserve">is the entry and exit point where this resource initially </w:t></w:r><w:r w:rsidR="00F173FD"><w:t>enters</w:t></w:r><w:r><w:t xml:space="preserve"> the street </w:t></w:r><w:r w:rsidR="00F173FD"><w:t>up to our managed code world and where the managed processing ends.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t>Threads and processes</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>So far things are not quite easy</w:t></w:r><w:r w:rsidR="00F173FD"><w:t xml:space="preserve"> but the flow of the request through the code is straight</w:t></w:r><w:r><w:t>. However, in real life things tend to become more complex. The ISAPI extension runs requests asynchronously. This means that the ISAPI extension immediately returns on the calling worker process or IIS thread, but keeps the ECB for the current request alive. The ECB then includes a mechanism for letting ISAPI know when the request is complete. This asynchronous processing releases the ISAPI worker thread immediately, and forwards processing to a separate thread that is managed by ASP.NET. We’ll look into threading later to understand what ASP.NET is doing. For now</w:t></w:r><w:r w:rsidR="000F514E"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> ASP.NET receives this </w:t></w:r><w:r w:rsidR="000F514E"><w:t xml:space="preserve">ECB </w:t></w:r><w:r><w:t xml:space="preserve">reference and uses it internally to retrieve information about the current request. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">This includes such </w:t></w:r><w:r w:rsidR="000F514E"><w:t xml:space="preserve">information </w:t></w:r><w:r><w:t>as server variables, POST data</w:t></w:r><w:r w:rsidR="000F514E"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="000F514E"><w:t xml:space="preserve">and output </w:t></w:r><w:r><w:t xml:space="preserve">returning to the server. The </w:t></w:r><w:r w:rsidR="000F514E"><w:t xml:space="preserve">ECB </w:t></w:r><w:r><w:t xml:space="preserve">data block stays alive until the request finishes or times out in IIS. The ASP.NET engine continues to communicate with it until the request is done. Any output is written into the ISAPI output stream using the appropriate method call and when the request is done, the ISAPI extension is notified of request completion. The extension will </w:t></w:r><w:r w:rsidR="000F514E"><w:t xml:space="preserve">then </w:t></w:r><w:r><w:t>free the ECB from memory. Just remember that in this</w:t></w:r><w:r w:rsidR="00F173FD"><w:t xml:space="preserve"> cruel</w:t></w:r><w:r><w:t xml:space="preserve"> unmanaged world the code is responsible </w:t></w:r><w:r w:rsidR="002629C0"><w:t xml:space="preserve">for </w:t></w:r><w:r><w:t>handl</w:t></w:r><w:r w:rsidR="002629C0"><w:t>ing</w:t></w:r><w:r><w:t xml:space="preserve"> all in-memory actions</w:t></w:r><w:r w:rsidR="000F514E"><w:t xml:space="preserve">, </w:t></w:r><w:r><w:t>and not releasing memory leads to memory leaks. However, the implementation is very efficient as the .NET classes essentially act as a thin wrapper around ISAPI.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t>Loading the .NET runtime</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Again, there is not much information available about the loading procedure. I assume that the runtime is loaded, if not yet present, when the first request to ASP.NET is made by a mapped extension. The managed </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ISAPIRuntime</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is then instantiated and starts talking to the unmanaged world. For isolation purposes</w:t></w:r><w:r w:rsidR="004B04C6"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> each virtual directory creates a new application domain (</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>AppDomain</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">). Within this </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>AppDomain</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ISAPIRuntime</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> resides. Starting the application is also the beginn</w:t></w:r><w:r w:rsidR="00691465"><w:t>i</w:t></w:r><w:r><w:t>ng of the application’s life cycle</w:t></w:r><w:r w:rsidR="00B73674"><w:t xml:space="preserve">, which we’ll </w:t></w:r><w:r><w:t xml:space="preserve">look into later in this chapter. It’s also likely that the instantiation is made by the unmanaged part, because the wrapper interface is exposing the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ComVisible</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> attribute. This makes it available from the other side.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">To create the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>ISAPIRuntime</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> instance the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="007F16F7"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>AppDomainFactory.Create</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method is called. The following code snippet, created with Reflector, shows how </w:t></w:r><w:r w:rsidR="00090866"><w:t>it’s done</w:t></w:r><w:r><w:t xml:space="preserve"> internally.</w:t></w:r></w:p><w:p w:rsidR="00F173FD" w:rsidRDefault="00F173FD" w:rsidP="00F173FD"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:r w:rsidRPr="00011B23"><w:t xml:space="preserve">Listing </w:t></w:r><w:r><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidRPr="00011B23"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r><w:t>2</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. The code of the AppDomainFactory.Create methode</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>[return: MarshalAs(UnmanagedType.Interface)]</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public object Create(string appId, string appPath)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  object obj2;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  try</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    if (appPath[0] == '.')</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">       FileInfo info = new FileInfo(appPath);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">       appPath = info.FullName;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    if (!StringUtil.StringEndsWith(appPath, '\\'))</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">       appPath = appPath + @"\";</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    ISAPIApplicationHost appHost = new ISAPIApplicationHost(appId, appPath, false);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    ISAPIRuntime o = (ISAPIRuntime) this._appManager.CreateObjectInternal(</w:t></w:r><w:r><w:sym w:font="Wingdings" w:char="F0C3"/></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">                                           appId, typeof(ISAPIRuntime), </w:t></w:r><w:r><w:sym w:font="Wingdings" w:char="F0C3"/></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">                                           appHost, false, null);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    o.StartProcessing();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    obj2 = new ObjectHandle(o);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  catch (Exception)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     throw;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  return obj2;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Even if it </w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">is </w:t></w:r><w:r><w:t xml:space="preserve">not visible in this code snippet, internally the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>appId</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is used to cache the relation with the requested virtual directory. Therefore subsequent calls do not start the application again but process the existing </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="007F16F7"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>AppDomain</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">. Finally, in this code </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="007F16F7"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>StartProcessing</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> forces ISAPI to process the request, and, </w:t></w:r><w:r w:rsidR="002629C0"><w:t>because it is</w:t></w:r><w:r><w:t xml:space="preserve"> asynchronous</w:t></w:r><w:r w:rsidR="002629C0"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the call return</w:t></w:r><w:r w:rsidR="00090866"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> immediately and the method </w:t></w:r><w:proofErr w:type="gramStart"/><w:r><w:t>returns</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t xml:space="preserve"> the ECB as </w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">type </w:t></w:r><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>object</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="003B7E25"><w:pPr><w:pStyle w:val="Figure"/></w:pPr><w:r><w:rPr><w:noProof/><w:lang w:val="de-DE" w:eastAsia="de-DE"/></w:rPr><w:lastRenderedPageBreak/><w:drawing><wp:inline distT="0" distB="0" distL="0" distR="0" wp14:anchorId="09448DD5" wp14:editId="2601ED10"><wp:extent cx="4543949" cy="5213445"/><wp:effectExtent l="19050" t="0" r="9001" b="0"/><wp:docPr id="6" name="ASPEXTf0105.tif" descr="D:\UserData\jkrause\Documents\Meine Daten\Bücher\Fachbuchprojekte\ASP.NET Extensibility\Images\ASPEXTf0105.tif"/><wp:cNvGraphicFramePr><a:graphicFrameLocks xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" noChangeAspect="1"/></wp:cNvGraphicFramePr><a:graphic xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:nvPicPr><pic:cNvPr id="0" name="ASPEXTf0105.tif"/><pic:cNvPicPr/></pic:nvPicPr><pic:blipFill><a:blip r:link="rId15"/><a:stretch><a:fillRect/></a:stretch></pic:blipFill><pic:spPr><a:xfrm><a:off x="0" y="0"/><a:ext cx="4546215" cy="5216044"/></a:xfrm><a:prstGeom prst="rect"><a:avLst/></a:prstGeom></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F1361C" w:rsidRDefault="00165A64" w:rsidP="003B7E25"><w:pPr><w:pStyle w:val="Production"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t>Insert ASPEXTf0105.tif</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="FigureCaption"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="004B04C6"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Figure \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>5</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. Behind the scene</w:t></w:r><w:r w:rsidR="004B04C6"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> the first request is responsible for the creation of a new application</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t>Handle the Request within the Runtime</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The managed part is now alive and ISAPI is able to call it whenever there is something available for processing. </w:t></w:r><w:r w:rsidR="00C11790"><w:t>In basic</w:t></w:r><w:r><w:t xml:space="preserve"> ASP.NET </w:t></w:r><w:r w:rsidR="00C11790"><w:t xml:space="preserve">terms </w:t></w:r><w:r><w:t xml:space="preserve">everything begins here. The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>AppDomain</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>, the application life cycle and the first page cycle are born</w:t></w:r><w:r w:rsidR="00C11790"><w:t xml:space="preserve"> here</w:t></w:r><w:r><w:t xml:space="preserve"> and live</w:t></w:r><w:r w:rsidR="00C11790"><w:t xml:space="preserve"> for </w:t></w:r><w:r w:rsidR="006143A1"><w:t>varying lengths of time</w:t></w:r><w:r><w:t>. From now on</w:t></w:r><w:r w:rsidR="00E25806"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> we’re back in the managed world. But there is a bit more </w:t></w:r><w:r w:rsidR="00C11790"><w:t>you should</w:t></w:r><w:r><w:t xml:space="preserve"> know about the whole procedure. II</w:t></w:r><w:r w:rsidR="00090866"><w:t>S</w:t></w:r><w:r><w:t xml:space="preserve"> is </w:t></w:r><w:r w:rsidR="00C11790"><w:t xml:space="preserve">a </w:t></w:r><w:r><w:t xml:space="preserve">multithreaded host and so is ISAPI. Each request is processed asynchronously, running in its own thread. Again, a look into the code using Reflector reveals what ASP.NET is doing here. The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ProcessRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method receives an ISAPI </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>ecb</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> object and server type as parameters. The method is </w:t></w:r><w:proofErr w:type="gramStart"/><w:r><w:t>thread</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t xml:space="preserve"> safe, so multiple ISAPI threads can safely call this single returned object instance simultaneously.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t>public int ProcessRequest(IntPtr ecb, int iWRType)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    IntPtr zero = IntPtr.Zero;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    if (iWRType == 2)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        zero = ecb;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        ecb = UnsafeNativeMethods.GetEcb(zero);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    ISAPIWorkerRequest wr = null;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    try</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        bool useOOP = iWRType == 1;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        wr = ISAPIWorkerRequest.CreateWorkerRequest(ecb, useOOP);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        wr.Initialize();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        string appPathTranslated = wr.GetAppPathTranslated();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        string appDomainAppPathInternal = HttpRuntime.AppDomainAppPathInternal;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        if ((appDomainAppPathInternal == null) </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">           || StringUtil.EqualsIgnoreCase(appPathTranslated, appDomainAppPathInternal))</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">            HttpRuntime.ProcessRequestNoDemand(wr);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">            return 0;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        HttpRuntime.ShutdownAppDomain( ApplicationShutdownReason.PhysicalApplicationPathChanged, </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        SR.GetString("Hosting_Phys_Path_Changed", new object[] { appDomainAppPathInternal, appPathTranslated }));</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        return 1;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    catch (Exception exception)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">      // removed for sake of clarity</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>The code is just a part of the complete method. I have removed the catch</w:t></w:r><w:r w:rsidR="00160D46"><w:t xml:space="preserve"> block</w:t></w:r><w:r><w:t xml:space="preserve"> to focus on the working code. The method receives the pointer to</w:t></w:r><w:r w:rsidR="00160D46"><w:t xml:space="preserve"> an</w:t></w:r><w:r><w:t xml:space="preserve"> ECB data block and passes it to the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>CreateWorkerRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method. This method is responsible </w:t></w:r><w:r w:rsidR="00160D46"><w:t xml:space="preserve">for </w:t></w:r><w:r><w:t xml:space="preserve">creating the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ISAPIWorkerRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> object. From now on we have</w:t></w:r><w:r w:rsidR="00160D46"><w:t xml:space="preserve"> a</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Request</w:t></w:r><w:r><w:t xml:space="preserve"> object available that is able to talk directly to the ISAPI layer. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007F16F7"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ISAPIWorkerRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> (defined in</w:t></w:r><w:r w:rsidR="00BB50A5"><w:t xml:space="preserve"> the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>System.Web.Hosting</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> namespace) class is an abstract subclass of </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpWorkerRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">. This class holds all the knowledge to talk HTTP. It’s a piece of cake, </w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve">and although it would take too much time to go into here, </w:t></w:r><w:r w:rsidR="00E25806"><w:t xml:space="preserve">it’s </w:t></w:r><w:r><w:t xml:space="preserve">worth a closer look </w:t></w:r><w:r w:rsidR="00BB50A5"><w:t xml:space="preserve">if </w:t></w:r><w:r><w:t xml:space="preserve">you like. I’d encourage you to go on and find </w:t></w:r><w:r w:rsidR="00BB50A5"><w:t xml:space="preserve">out </w:t></w:r><w:r><w:t xml:space="preserve">how things work under the </w:t></w:r><w:r w:rsidR="00BB50A5"><w:t>hood</w:t></w:r><w:r><w:t xml:space="preserve">. Just open the method </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="007F16F7"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ProcessRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> in Reflector, click on </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="007F16F7"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ISAPIWorkerRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:r w:rsidR="00BB50A5"><w:t xml:space="preserve">then </w:t></w:r><w:r><w:t xml:space="preserve">on </w:t></w:r><w:r w:rsidR="00BB50A5"><w:t xml:space="preserve">the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>HttpWorkerRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> subclass. At the end of the listing of signatures of either class click on the link Expand Methods and </w:t></w:r><w:r w:rsidR="009C23AD"><w:t>there you have it</w:t></w:r><w:r><w:t>. Because we have an abstract class</w:t></w:r><w:r w:rsidR="009C23AD"><w:t>, eventually</w:t></w:r><w:r><w:t xml:space="preserve"> there must be some implementation elsewhere. The factory method that creates the type</w:t></w:r><w:r w:rsidR="00F173FD"><w:t xml:space="preserve"> using </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00F173FD" w:rsidRPr="00F173FD"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>CreateWorkerRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00F173FD" w:rsidRPr="00F173FD"><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="gramStart"/><w:r w:rsidR="00F173FD" w:rsidRPr="00F173FD"><w:t>method</w:t></w:r><w:r w:rsidRPr="00F173FD"><w:t>,</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t xml:space="preserve"> is able to return one of the following four types available:</w:t></w:r></w:p><w:p w:rsidR="00F173FD" w:rsidRDefault="00F173FD" w:rsidP="00F173FD"><w:pPr><w:pStyle w:val="BulletFirst"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/></w:r><w:r w:rsidRPr="00F173FD"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ISAPIWorkerRequestInProcForIIS7</w:t></w:r></w:p><w:p w:rsidR="00F173FD" w:rsidRDefault="00F173FD" w:rsidP="00F173FD"><w:pPr><w:pStyle w:val="Bullet"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/></w:r><w:r w:rsidRPr="00F173FD"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ISAPIWorkerRequestInProcForIIS6</w:t></w:r></w:p><w:p w:rsidR="00F173FD" w:rsidRDefault="00F173FD" w:rsidP="00F173FD"><w:pPr><w:pStyle w:val="Bullet"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00F173FD"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ISAPIWorkerRequestInProc</w:t></w:r><w:proofErr w:type="spellEnd"/></w:p><w:p w:rsidR="00F173FD" w:rsidRDefault="00F173FD" w:rsidP="00F173FD"><w:pPr><w:pStyle w:val="BulletLast"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00F173FD"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ISAPIWorkerRequestOutOfProc</w:t></w:r><w:proofErr w:type="spellEnd"/></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">It’s a </w:t></w:r><w:r w:rsidR="00090866"><w:t>B</w:t></w:r><w:r><w:t xml:space="preserve">it in the ECB that drives the decision. This means that finally the ISAPI module controls the way ASP.NET handles requests. Because ASP.NET is not limited to IIS, it’s simply the version of IIS that is responsible. </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00635510"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ISAPIWorkerRequestInProc</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is for all IIS </w:t></w:r><w:r w:rsidR="009C23AD"><w:t xml:space="preserve">versions up to and including </w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">version </w:t></w:r><w:r w:rsidR="00F173FD"><w:t>6</w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve"> and IIS7 serves</w:t></w:r><w:r><w:t xml:space="preserve"> all </w:t></w:r><w:r w:rsidR="009C23AD"><w:t xml:space="preserve">versions </w:t></w:r><w:r><w:t xml:space="preserve">from 7 </w:t></w:r><w:r w:rsidR="009C23AD"><w:t>and above</w:t></w:r><w:r><w:t>. This sounds silly</w:t></w:r><w:r w:rsidR="00A90FB9"><w:t>—</w:t></w:r><w:r><w:t xml:space="preserve">there is no IIS8 </w:t></w:r><w:r w:rsidR="00897A3C"><w:t>in existence</w:t></w:r><w:r w:rsidR="00A90FB9"><w:t>—</w:t></w:r><w:r><w:t xml:space="preserve">but the ASP.NET engine would be robust against new versions as long as the ISAPI module is able to emulate IIS7 behavior. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>Whenever you have trouble understanding what is going on in your application</w:t></w:r><w:r w:rsidR="00CC1E19"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve">whether it’s with </w:t></w:r><w:r><w:t xml:space="preserve">creating and sending headers, receiving weird stuff, or getting wrong data </w:t></w:r><w:r w:rsidR="00D1719E"><w:t xml:space="preserve">down the </w:t></w:r><w:r><w:t>wire</w:t></w:r><w:r w:rsidR="00D1719E"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> it</w:t></w:r><w:r w:rsidR="00D1719E"><w:t>’</w:t></w:r><w:r><w:t xml:space="preserve">s worth </w:t></w:r><w:r w:rsidR="007504F0"><w:t>taking</w:t></w:r><w:r><w:t xml:space="preserve"> a closer look here. </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpWorkerRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is meant to provide a high</w:t></w:r><w:r w:rsidR="007504F0"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>level abstraction around the low level interfaces</w:t></w:r><w:r w:rsidR="007504F0"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> regardless of the</w:t></w:r><w:r w:rsidR="007504F0"><w:t xml:space="preserve"> source of the</w:t></w:r><w:r><w:t xml:space="preserve"> data. However, reading and understanding are t</w:t></w:r><w:r w:rsidR="007504F0"><w:t>w</w:t></w:r><w:r><w:t>o different thing</w:t></w:r><w:r w:rsidR="00090866"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve">. Let’s take an example </w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve">of </w:t></w:r><w:r><w:t xml:space="preserve">how to deal with all the internals. The next listing shows you how the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>well known</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>QueryString</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is retrieved from </w:t></w:r><w:r w:rsidR="007504F0"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">ECB. </w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve">Moving </w:t></w:r><w:r><w:t>down the class hierarchy</w:t></w:r><w:r w:rsidR="00A90FB9"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> we find that it’s partly implemented in the base class and partly in the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ISAPIWorkerRequestInProc</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class. For IIS6 and IIS7 there is no distinct change here, so we can skip these classes for now.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>internal override int GetQueryStringRawBytesCore(byte[] buffer, int size)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    if (base._ecb == IntPtr.Zero)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        return 0;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    return UnsafeNativeMethods.EcbGetQueryStringRawBytes(base._ecb, buffer, size);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>[DllImport("webengine.dll")]</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t xml:space="preserve">internal static extern int EcbGetQueryStringRawBytes(IntPtr pECB, byte[] buffer, </w:t></w:r><w:r><w:br/><w:t xml:space="preserve">                                                      int size);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Again, there is nothing thrilling here. These classes are all very thin wrappers around native method calls. In fact, ASP.NET does not provide any significant overhead to the request procedure. That means ASP.NET is </w:t></w:r><w:r w:rsidR="008E6808"><w:t>extremely</w:t></w:r><w:r><w:t xml:space="preserve"> fast</w:t></w:r><w:r w:rsidR="008E6808"><w:t xml:space="preserve"> —</w:t></w:r><w:r><w:t xml:space="preserve"> as fast as IIS with native code. If you feel (or know) that your application is slow</w:t></w:r><w:r w:rsidR="00636DAD"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00636DAD"><w:t xml:space="preserve">then </w:t></w:r><w:r><w:t xml:space="preserve">you know that in most cases </w:t></w:r><w:r w:rsidR="00636DAD"><w:t xml:space="preserve">it will be a problem in </w:t></w:r><w:r><w:t xml:space="preserve">your code. </w:t></w:r><w:r w:rsidR="00636DAD"><w:t>Let’s</w:t></w:r><w:r><w:t xml:space="preserve"> focus on the managed side of the world and learn more </w:t></w:r><w:r w:rsidR="00636DAD"><w:t xml:space="preserve">about </w:t></w:r><w:r><w:t>what’s going on here.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>HttpContext</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">You’re probably already </w:t></w:r><w:r w:rsidR="00CC1E19"><w:t>familiar</w:t></w:r><w:r><w:t xml:space="preserve"> with the</w:t></w:r><w:r w:rsidR="00A706F2"><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00A706F2"><w:t>HttpContext</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00A706F2"><w:t xml:space="preserve"> and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00A706F2"><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> classes. Instances of these classes are created whenever a request hits the engine. </w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve">At a glance, the steps are: </w:t></w:r></w:p><w:p w:rsidR="00F173FD" w:rsidRDefault="00F173FD" w:rsidP="00F173FD"><w:pPr><w:pStyle w:val="BulletFirst"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">Create a new </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpContext</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> instance for the request </w:t></w:r></w:p><w:p w:rsidR="00F173FD" w:rsidRDefault="00F173FD" w:rsidP="00F173FD"><w:pPr><w:pStyle w:val="Bullet"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">Retrieve an </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> instance (or create one, if it’s the first request)</w:t></w:r></w:p><w:p w:rsidR="00F173FD" w:rsidRDefault="00F173FD" w:rsidP="00F173FD"><w:pPr><w:pStyle w:val="Bullet"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">Call </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication.Init</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> to set up pipeline events </w:t></w:r></w:p><w:p w:rsidR="00F173FD" w:rsidRDefault="00F173FD" w:rsidP="00F173FD"><w:pPr><w:pStyle w:val="BulletLast"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">Call </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication.ResumeProcessing</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> to start the ASP.NET pipeline processing </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">Wrapping the Request: </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>HttpContext</w:t></w:r><w:proofErr w:type="spellEnd"/></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The </w:t></w:r><w:r w:rsidR="00090866"><w:t>c</w:t></w:r><w:r><w:t xml:space="preserve">ontext </w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">of an HTTP request </w:t></w:r><w:r><w:t xml:space="preserve">is available throughout the lifetime of the request. For </w:t></w:r><w:r w:rsidR="00B32232"><w:t xml:space="preserve">ease of </w:t></w:r><w:r><w:t xml:space="preserve">use it’s always accessible through the static </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpContext.Current</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> property. Because every request </w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">usually </w:t></w:r><w:r><w:t xml:space="preserve">starts a new thread, your code runs in that thread. </w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">In chapter 2 I’ll explain in more detail the thread and processing behavior. For now, this </w:t></w:r><w:r w:rsidR="00B32232"><w:t>isn’t needed</w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve"> to understand the request processing on </w:t></w:r><w:r w:rsidR="00B32232"><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">context level. </w:t></w:r><w:r><w:t xml:space="preserve">The current context has a </w:t></w:r><w:r w:rsidR="00090866"><w:t>one-to-one</w:t></w:r><w:r><w:t xml:space="preserve"> relation to the request </w:t></w:r><w:r w:rsidR="001A7C82"><w:t xml:space="preserve">for </w:t></w:r><w:r><w:t xml:space="preserve">that thread. This </w:t></w:r><w:r w:rsidR="001A7C82"><w:t xml:space="preserve">context </w:t></w:r><w:r><w:t xml:space="preserve">object is also the </w:t></w:r><w:r w:rsidR="001A7C82"><w:t xml:space="preserve">place </w:t></w:r><w:r><w:t xml:space="preserve">where all other objects required to process the request are stored: </w:t></w:r><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Request</w:t></w:r><w:r><w:t xml:space="preserve">, </w:t></w:r><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Response</w:t></w:r><w:r><w:t xml:space="preserve">, </w:t></w:r><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Application</w:t></w:r><w:r><w:t xml:space="preserve">, </w:t></w:r><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Server</w:t></w:r><w:r><w:t xml:space="preserve">, and </w:t></w:r><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Cache</w:t></w:r><w:r><w:t xml:space="preserve">. At any time during request processing </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpContext.Current</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> gives you access to all these. There are several shortcuts, so you may use the Page’s property </w:t></w:r><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Context</w:t></w:r><w:r><w:t xml:space="preserve"> instead, but it’s exactly the same object. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">You may already use several collections available in the </w:t></w:r><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Application</w:t></w:r><w:r><w:t xml:space="preserve">, </w:t></w:r><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Session</w:t></w:r><w:r><w:t xml:space="preserve">, and </w:t></w:r><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Cache</w:t></w:r><w:r><w:t xml:space="preserve"> objects. Even the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpContext</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class contains a useful collection that provides a store for request specific data. The big difference to the other data collections is the life time. The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00C54B70"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpContext</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> represents exactly the current request. If the processing is </w:t></w:r><w:r w:rsidR="00EC19C0"><w:t xml:space="preserve">finished </w:t></w:r><w:r><w:t xml:space="preserve">and </w:t></w:r><w:r w:rsidR="00EC19C0"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>data sent to the server</w:t></w:r><w:r w:rsidR="00EC19C0"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00EC19C0"><w:t xml:space="preserve">then </w:t></w:r><w:r><w:t xml:space="preserve">the collections </w:t></w:r><w:r w:rsidR="00EC19C0"><w:t>are</w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve"> also</w:t></w:r><w:r w:rsidR="00EC19C0"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>disposed</w:t></w:r><w:r w:rsidR="00EC19C0"><w:t xml:space="preserve"> of</w:t></w:r><w:r><w:t>. However, the Context exists before the page’s life span begins and ends after it</w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve"> finishes</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00A90FB9"><w:t>T</w:t></w:r><w:r><w:t xml:space="preserve">his data storage is </w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve">therefore </w:t></w:r><w:r><w:t>a bit more powerful than simple page members.</w:t></w:r></w:p><w:p w:rsidR="00011B23" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The following sample shows how to use </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00082677" w:rsidRPr="00082677"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Context.Items</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> to get information about the request processing </w:t></w:r><w:r w:rsidR="00EC19C0"><w:t xml:space="preserve">elapsed </w:t></w:r><w:r><w:t xml:space="preserve">time. At the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>BeginRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00011B23"><w:t xml:space="preserve">event </w:t></w:r><w:r><w:t xml:space="preserve">a timestamp is stored and retrieved later at </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>EndRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">. </w:t></w:r></w:p><w:p w:rsidR="00FB1338" w:rsidRPr="00011B23" w:rsidRDefault="00FB1338" w:rsidP="00FB1338"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:r w:rsidRPr="00011B23"><w:t xml:space="preserve">Listing </w:t></w:r><w:r><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidRPr="00011B23"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r><w:t>5</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. Get request information using events in global.ascx</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>Application_BeginRequest(object sender, EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    if (Settings.Default.Logging)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        Context.Items.Add("LogTime", DateTime.Now);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>protected void Application_EndRequest(object sender, EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    if (Settings.Default.Logging)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        DateTime end = DateTime.Now;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        TimeSpan span = end.Subtract((DateTime) Context.Items["LogTime"]);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        System.Diagnostics.Debug.WriteLine(span.TotalMilliseconds, "RequestTime");</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>This sample uses two events defined in</w:t></w:r><w:r w:rsidR="0036684F"><w:t xml:space="preserve"> the</w:t></w:r><w:r><w:t xml:space="preserve"> global.ascx code behind file. You </w:t></w:r><w:r w:rsidR="00CC1E19"><w:t xml:space="preserve">might </w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve">be thinking of </w:t></w:r><w:r><w:t xml:space="preserve">how to put the results into a database or log file, but for now the output to </w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve">a </w:t></w:r><w:r><w:t>Visual Studio console window will do.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0003575F"><w:pPr><w:pStyle w:val="Figure"/></w:pPr><w:r w:rsidRPr="0003575F"><w:rPr><w:noProof/><w:lang w:val="de-DE" w:eastAsia="de-DE"/></w:rPr><w:lastRenderedPageBreak/><w:drawing><wp:inline distT="0" distB="0" distL="0" distR="0" wp14:anchorId="32F039A2" wp14:editId="44DFC5E1"><wp:extent cx="5173923" cy="1856042"/><wp:effectExtent l="19050" t="0" r="7677" b="0"/><wp:docPr id="7" name="ASPEXTf0106.tif" descr="D:\UserData\jkrause\Documents\Meine Daten\Bücher\Fachbuchprojekte\ASP.NET Extensibility\Images\ASPEXTf0106.tif"/><wp:cNvGraphicFramePr><a:graphicFrameLocks xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" noChangeAspect="1"/></wp:cNvGraphicFramePr><a:graphic xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:nvPicPr><pic:cNvPr id="0" name="ASPEXTf0106.tif"/><pic:cNvPicPr/></pic:nvPicPr><pic:blipFill><a:blip r:link="rId16"/><a:stretch><a:fillRect/></a:stretch></pic:blipFill><pic:spPr><a:xfrm><a:off x="0" y="0"/><a:ext cx="5181452" cy="1858743"/></a:xfrm><a:prstGeom prst="rect"><a:avLst/></a:prstGeom><a:noFill/><a:ln><a:noFill/></a:ln></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F1361C" w:rsidRDefault="00165A64" w:rsidP="003B7E25"><w:pPr><w:pStyle w:val="Production"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t>Insert ASPEXTf0106.tif</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="FigureCaption"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="005247FE"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Figure \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>6</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. Get time information about the request while debugging</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>If you feel that the values shown in the figure are too high</w:t></w:r><w:r w:rsidR="005247FE"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="005247FE"><w:t xml:space="preserve">you need to be aware </w:t></w:r><w:r><w:t>that I</w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve">’m running </w:t></w:r><w:r><w:t>the entire environment in a Virtual PC console</w:t></w:r><w:r w:rsidR="00A90FB9"><w:t>, and that the</w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve"> timestamps </w:t></w:r><w:r w:rsidR="005247FE"><w:t xml:space="preserve">shown </w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">are </w:t></w:r><w:r w:rsidR="005247FE"><w:t xml:space="preserve">expressed </w:t></w:r><w:r w:rsidR="00090866"><w:t>in milliseconds.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">The most basic type: </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplicationFactory</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is responsible </w:t></w:r><w:r w:rsidR="00E62DDC"><w:t>for creating</w:t></w:r><w:r><w:t xml:space="preserve"> an appropriate number of </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> objects. </w:t></w:r><w:r w:rsidR="00E62DDC"><w:t>The</w:t></w:r><w:r><w:t xml:space="preserve"> load and the </w:t></w:r><w:r w:rsidR="00E62DDC"><w:t xml:space="preserve">number of </w:t></w:r><w:r><w:t xml:space="preserve">threads required </w:t></w:r><w:r w:rsidR="00E62DDC"><w:t xml:space="preserve">affect </w:t></w:r><w:r><w:t xml:space="preserve">how </w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">it </w:t></w:r><w:r><w:t>handle</w:t></w:r><w:r w:rsidR="00090866"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> incoming requests. The size of the pool is limited to the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>MaxWorkerThreads</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> setting in </w:t></w:r><w:r w:rsidR="00FA0C8B"><w:t>the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>ProcessModel</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> key</w:t></w:r><w:r w:rsidR="00FA0C8B"><w:t xml:space="preserve"> in the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00FA0C8B"><w:t>machine.config</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">, which by default </w:t></w:r><w:proofErr w:type="gramStart"/><w:r><w:t>is</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t xml:space="preserve"> 20. Since the days of .NET 2.0 it’s still an auto</w:t></w:r><w:r w:rsidR="00FA0C8B"><w:t>-</w:t></w:r><w:r><w:t>configured entry:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t>&lt;processModel autoConfig="true" /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>Change this to the following:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t>&lt;processModel autoConfig="false" maxWorkerThreads="30" /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">You can find more information about threading in </w:t></w:r><w:r w:rsidR="00090866"><w:t>chapter 2</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>The pool starts out with a smaller number</w:t></w:r><w:r w:rsidR="00FA0C8B"><w:t>—</w:t></w:r><w:r><w:t xml:space="preserve"> usually one</w:t></w:r><w:r w:rsidR="00FA0C8B"><w:t xml:space="preserve"> —</w:t></w:r><w:r><w:t xml:space="preserve"> and it then grows as multiple simultaneous requests </w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve">are </w:t></w:r><w:r><w:t xml:space="preserve">processed. The pool is monitored so </w:t></w:r><w:r w:rsidR="00FA0C8B"><w:t xml:space="preserve">that </w:t></w:r><w:r><w:t xml:space="preserve">under load it grows to </w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve">a </w:t></w:r><w:r><w:t xml:space="preserve">maximum number of instances. Later </w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve">the pool is </w:t></w:r><w:r><w:t xml:space="preserve">scaled back to a smaller number as the load drops. Once we have the right number of instances of </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00A90FB9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> we have the real entry point within the managed world for an incoming request. </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is like </w:t></w:r><w:r w:rsidR="00A90FB9"><w:t xml:space="preserve">an </w:t></w:r><w:r><w:t xml:space="preserve">outer container for the whole application. For easy access the events related to the application are mapped in </w:t></w:r><w:r w:rsidR="00FA0C8B"><w:t xml:space="preserve">the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>global.asax</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> file, which is the declarative expression of this class. The definition of </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>global.asax</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> in </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>global.asax.cs</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> reveals</w:t></w:r><w:r w:rsidR="002B0C1F"><w:t>:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t>public class Global : System.Web.HttpApplication</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The pipeline the request is going through fires several events to let you control and intercept the </w:t></w:r><w:r w:rsidR="00FA0C8B"><w:t xml:space="preserve">various </w:t></w:r><w:r><w:t xml:space="preserve">states of the application’s life cycle. The following list shows all of them, even if the </w:t></w:r><w:proofErr w:type="gramStart"/><w:r><w:t xml:space="preserve">majority </w:t></w:r><w:r w:rsidR="00FA0C8B"><w:t>are</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r w:rsidR="00FA0C8B"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>never use</w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">d in an application. In </w:t></w:r><w:r w:rsidR="00FA0C8B"><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">next few sections </w:t></w:r><w:r><w:t xml:space="preserve">I’ll dig deeper into the world of application events. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:r w:rsidRPr="00011B23"><w:lastRenderedPageBreak/><w:t xml:space="preserve">Listing </w:t></w:r><w:r w:rsidR="001B3434"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00011B23" w:rsidRPr="00011B23"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>2</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>.Events available on application level (pulled from HttpApplication)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>public event EventHandler AcquireRequestState;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler AuthenticateRequest;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler AuthorizeRequest;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler BeginRequest;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler Disposed;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler EndRequest;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler Error;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler LogRequest;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler MapRequestHandler;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler PostAcquireRequestState;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler PostAuthenticateRequest;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler PostAuthorizeRequest;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler PostLogRequest;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler PostMapRequestHandler;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler PostReleaseRequestState;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler PostRequestHandlerExecute;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler PostResolveRequestCache;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler PostUpdateRequestCache;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler PreRequestHandlerExecute;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler PreSendRequestContent;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler PreSendRequestHeaders;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler ReleaseRequestState;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>public event EventHandler ResolveRequestCache;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>public event EventHandler UpdateRequestCache;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>By writing something like</w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve"> the following</w:t></w:r><w:r><w:t xml:space="preserve"> into the code behind file</w:t></w:r><w:r w:rsidR="001B3434"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> you attach a handler:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t>protected void Application_BeginRequest(object sender, EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>Avoiding an explicit delegate definition is just for</w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve"> the</w:t></w:r><w:r><w:t xml:space="preserve"> sake of convenience.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The whole handling of </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00635510"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>AppDomain</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">, </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00635510"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">, and threads might look confusing. Remember that the server has to handle multiple incoming requests simultaneously. Each ASP.NET application runs in its own </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>AppDomain</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">, where several instances of </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00635510"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> can run</w:t></w:r><w:r w:rsidR="001B3434"><w:t xml:space="preserve"> in</w:t></w:r><w:r><w:t xml:space="preserve"> parallel, </w:t></w:r><w:r w:rsidR="001B3434"><w:t>supplied from</w:t></w:r><w:r><w:t xml:space="preserve"> the pool managed by the factory. To get </w:t></w:r><w:r w:rsidR="001B3434"><w:t xml:space="preserve">a </w:t></w:r><w:r><w:t xml:space="preserve">better </w:t></w:r><w:r w:rsidR="001B3434"><w:t>understanding of</w:t></w:r><w:r><w:t xml:space="preserve"> this</w:t></w:r><w:r w:rsidR="001B3434"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> let’s examine the information we can </w:t></w:r><w:r w:rsidR="001B3434"><w:t xml:space="preserve">extract </w:t></w:r><w:r><w:t>from related objects.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:bookmarkStart w:id="5" w:name="_Ref221857194"/><w:r w:rsidRPr="006C4183"><w:t xml:space="preserve">Listing </w:t></w:r><w:r w:rsidR="001B3434"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00011B23" w:rsidRPr="006C4183"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="002355E5"><w:t>5</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:bookmarkEnd w:id="5"/><w:r><w:t xml:space="preserve">. Retrieving information about the application </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>protected void Page_Load(object sender, EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    Guid appId = ((Global) Context.ApplicationInstance).AppId;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    this.appId.Text = appId.ToString();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    this.threadId.Text = Thread.CurrentThread.ManagedThreadId.ToString();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    this.domainId.Text = AppDomain.CurrentDomain.FriendlyName;</w:t></w:r></w:p><w:p w:rsidR="002355E5" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    this.threadInfo.Text = Thread.CurrentThread.IsThreadPoolThread ?</w:t></w:r><w:r w:rsidR="002355E5"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="002355E5"><w:sym w:font="Wingdings" w:char="F0C3"/></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="002355E5" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">                          </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> "Pool Thread" : "No Thread";</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    this.threadApart.Text = Thread.CurrentThread.GetApartmentState().ToString();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    Thread.Sleep(4000);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">The </w:t></w:r><w:r w:rsidRPr="00090866"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Sleep</w:t></w:r><w:r><w:t xml:space="preserve"> call allows you to open several browser instances and hit F5 to refresh the page within the four second period</w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve"> in order</w:t></w:r><w:r><w:t xml:space="preserve"> to see how it works. This simulates the behavior when several requests come in while previous requests are still running.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00090866" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>An</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>a</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">pplication </w:t></w:r><w:r w:rsidR="001B3434"><w:t xml:space="preserve">by </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">definition </w:t></w:r><w:r w:rsidR="001B3434"><w:t xml:space="preserve">has </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">no internal id. To create one, add the following code to </w:t></w:r><w:r w:rsidR="001B3434"><w:t xml:space="preserve">the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64"><w:t>global.asax</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> code behind: </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t>internal Guid AppId = Guid.NewGuid();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="007458F9" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>Figure 1-7</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> shows three screens made within the four </w:t></w:r><w:r w:rsidR="00E017A0"><w:t xml:space="preserve">second </w:t></w:r><w:r w:rsidR="00165A64"><w:t>period using three different browser windows.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="003B7E25"><w:pPr><w:pStyle w:val="Figure"/></w:pPr><w:r><w:rPr><w:noProof/><w:lang w:val="de-DE" w:eastAsia="de-DE"/></w:rPr><w:drawing><wp:inline distT="0" distB="0" distL="0" distR="0" wp14:anchorId="57B73442" wp14:editId="2A5CBAEB"><wp:extent cx="3665845" cy="2379205"/><wp:effectExtent l="19050" t="0" r="0" b="0"/><wp:docPr id="8" name="ASPEXTf0107.tif" descr="D:\UserData\jkrause\Documents\Meine Daten\Bücher\Fachbuchprojekte\ASP.NET Extensibility\Images\ASPEXTf0107.tif"/><wp:cNvGraphicFramePr><a:graphicFrameLocks xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" noChangeAspect="1"/></wp:cNvGraphicFramePr><a:graphic xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:nvPicPr><pic:cNvPr id="0" name="ASPEXTf0107.tif"/><pic:cNvPicPr/></pic:nvPicPr><pic:blipFill><a:blip r:link="rId17"/><a:stretch><a:fillRect/></a:stretch></pic:blipFill><pic:spPr><a:xfrm><a:off x="0" y="0"/><a:ext cx="3666010" cy="2379312"/></a:xfrm><a:prstGeom prst="rect"><a:avLst/></a:prstGeom></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F1361C" w:rsidRDefault="00165A64" w:rsidP="003B7E25"><w:pPr><w:pStyle w:val="Production"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t>Insert ASPEXTf0107.tif</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="FigureCaption"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="007458F9"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Figure \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>7</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. The application’s id changes, as the thread id does</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00090866"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">You can see that the application id and the thread id change. </w:t></w:r><w:r w:rsidR="00881062"><w:t xml:space="preserve">If </w:t></w:r><w:r><w:t xml:space="preserve">you remove the </w:t></w:r><w:r w:rsidR="00722667" w:rsidRPr="00722667"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Sleep</w:t></w:r><w:r><w:t xml:space="preserve"> command and request the page</w:t></w:r><w:r w:rsidR="004734D8"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> one by one, the application id i</w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">s always the same. Usually </w:t></w:r><w:r><w:t xml:space="preserve">the thread is recycled from </w:t></w:r><w:r w:rsidR="00881062"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">pool and the id is </w:t></w:r><w:r w:rsidR="00881062"><w:t>also unchanged</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The abbreviation </w:t></w:r><w:r w:rsidR="004734D8"><w:t>‘</w:t></w:r><w:r><w:t>MTA</w:t></w:r><w:r w:rsidR="004734D8"><w:t>’</w:t></w:r><w:r><w:t xml:space="preserve"> for </w:t></w:r><w:r w:rsidR="00251912"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">thread’s apartment model </w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve">stands for </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>Multi</w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve"> T</w:t></w:r><w:r><w:t>hreaded</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> Apartment. You can override this apartment state in ASP.NET pages with the </w:t></w:r><w:r w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ASPCOMPAT="true"</w:t></w:r><w:r><w:t xml:space="preserve"> attribute in the </w:t></w:r><w:r w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>@Page</w:t></w:r><w:r><w:t xml:space="preserve"> directive. </w:t></w:r><w:r w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ASPCOMPAT</w:t></w:r><w:r><w:t xml:space="preserve"> is meant to provide COM components </w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve">with </w:t></w:r><w:r><w:t>a safe environment</w:t></w:r><w:r w:rsidR="00251912"><w:t xml:space="preserve"> in which</w:t></w:r><w:r><w:t xml:space="preserve"> to run. </w:t></w:r><w:r w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ASPCOMPAT</w:t></w:r><w:r><w:t xml:space="preserve"> uses special Single Threaded Apartment (STA) threads to service those requests. STA threads are set aside and pooled separately as they require special handling. As long as there </w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve">you have </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>multi</w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>threaded</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> COM component in your application</w:t></w:r><w:r w:rsidR="00090866"><w:t xml:space="preserve"> only</w:t></w:r><w:r><w:t>, you can simply ignore this.</w:t></w:r><w:r w:rsidR="002355E5"><w:t xml:space="preserve"> For single threaded components some additional work is required. Usually a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="002355E5"><w:t>well developed</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="002355E5"><w:t xml:space="preserve"> COM component should support multiple threads. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="004734D8" w:rsidP="00635510"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">It is a simple fact that </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">all </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> objects are in the same </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64"><w:t>AppDomain</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. </w:t></w:r><w:r><w:t xml:space="preserve">This </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">has, however, some influence on </w:t></w:r><w:r><w:t xml:space="preserve">their </w:t></w:r><w:r w:rsidR="00251912"><w:t>behavior</w:t></w:r><w:r w:rsidR="00165A64"><w:t>. If you change something in the page</w:t></w:r><w:r w:rsidR="00251912"><w:t>’</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">s code or </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64"><w:t>web.config</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> the application restarts. To be more precise, it’s </w:t></w:r><w:r><w:t xml:space="preserve">actually </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64"><w:t>AppDomain</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">which </w:t></w:r><w:r w:rsidR="00165A64"><w:t>is being shut down and restart</w:t></w:r><w:r w:rsidR="00251912"><w:t>ed</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. This </w:t></w:r><w:r w:rsidR="00251912"><w:t>ensures</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> that all currently existing </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> instances are </w:t></w:r><w:r><w:t xml:space="preserve">also </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">shut down and recreated. </w:t></w:r><w:r w:rsidR="005F30F7"><w:t>To</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> see this behavior</w:t></w:r><w:r w:rsidR="00E867E9"><w:t xml:space="preserve"> in action</w:t></w:r><w:r><w:t>,</w:t></w:r><w:r w:rsidR="00E867E9"><w:t xml:space="preserve"> open the </w:t></w:r><w:r w:rsidR="002355E5"><w:t>ex</w:t></w:r><w:r w:rsidR="00E867E9"><w:t>ample</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="002355E5"><w:t xml:space="preserve">shown in </w:t></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="002355E5"><w:instrText xml:space="preserve"> REF _Ref221857194 \h </w:instrText></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="separate"/></w:r><w:proofErr w:type="gramStart"/><w:r w:rsidR="002355E5" w:rsidRPr="006C4183"><w:t>Listing</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r w:rsidR="002355E5" w:rsidRPr="006C4183"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="002355E5"><w:t>1-</w:t></w:r><w:r w:rsidR="002355E5"><w:rPr><w:noProof/></w:rPr><w:t>5</w:t></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="end"/></w:r><w:r w:rsidR="002355E5"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">and launch it. Hit F5 several times and </w:t></w:r><w:r><w:t xml:space="preserve">notice </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">that the Domain ID value </w:t></w:r><w:r w:rsidR="00165A64"><w:lastRenderedPageBreak/><w:t xml:space="preserve">is still the same. Now change something in the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64"><w:t>web.config</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> file. This force</w:t></w:r><w:r w:rsidR="00E867E9"><w:t>s</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> a shutdown and therefore the creation of a new </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64"><w:t>AppDomain</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t>. The Domain ID value is now different.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">Currently running requests are being processed properly, even if the new </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>AppDomain</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is already up and running. To avoid old threads blocking resources</w:t></w:r><w:r w:rsidR="004734D8"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the request has a specific time out value. Once timed out</w:t></w:r><w:r w:rsidR="004734D8"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the threads are shut down and the request</w:t></w:r><w:r w:rsidR="005F30F7"><w:t>’</w:t></w:r><w:r><w:t>s “life” ends.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t>Flowing through the ASP.NET Pipeline</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">You now </w:t></w:r><w:r w:rsidR="005F30F7"><w:t xml:space="preserve">have </w:t></w:r><w:r><w:t xml:space="preserve">a good overview </w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve">firstly of </w:t></w:r><w:r><w:t xml:space="preserve">what happens when </w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve">a </w:t></w:r><w:r><w:t>request comes in</w:t></w:r><w:r w:rsidR="004734D8"><w:t>, and secondly of</w:t></w:r><w:r><w:t xml:space="preserve"> how the objects </w:t></w:r><w:r w:rsidR="005F30F7"><w:t>start up</w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve"> as they wait</w:t></w:r><w:r><w:t xml:space="preserve"> to be used in your code. There are several steps following this startup sequence worth </w:t></w:r><w:r w:rsidR="005F30F7"><w:t>investigating</w:t></w:r><w:r><w:t xml:space="preserve"> further. In each step </w:t></w:r><w:r w:rsidR="00E867E9"><w:t>you</w:t></w:r><w:r><w:t xml:space="preserve">’ll find events and callbacks to intercept the process and customize or optimize </w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve">its </w:t></w:r><w:r><w:t>behavior.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="005F30F7" w:rsidP="00635510"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>Figure 1-8 illustrates</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> what happens during the </w:t></w:r><w:r><w:t xml:space="preserve">various </w:t></w:r><w:r w:rsidR="00165A64"><w:t>states. If you look into the code using Reflector</w:t></w:r><w:r w:rsidR="004734D8"><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> you can find the steps in subclass </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ApplicationStepManager</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> and the additional steps for IIS7 in </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="000E175E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>PipelineStepManager</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E0518" w:rsidRDefault="00165A64" w:rsidP="007E0518"><w:pPr><w:pStyle w:val="Figure"/></w:pPr><w:r w:rsidRPr="007E0518"><w:rPr><w:noProof/><w:lang w:val="de-DE" w:eastAsia="de-DE"/></w:rPr><w:drawing><wp:inline distT="0" distB="0" distL="0" distR="0" wp14:anchorId="427B9546" wp14:editId="1A1A7859"><wp:extent cx="4525654" cy="3389002"/><wp:effectExtent l="19050" t="0" r="8246" b="0"/><wp:docPr id="9" name="ASPEXTf0108.tif" descr="D:\UserData\jkrause\Documents\Meine Daten\Bücher\Fachbuchprojekte\ASP.NET Extensibility\Images\ASPEXTf0108.tif"/><wp:cNvGraphicFramePr><a:graphicFrameLocks xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" noChangeAspect="1"/></wp:cNvGraphicFramePr><a:graphic xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:nvPicPr><pic:cNvPr id="0" name="ASPEXTf0108.tif"/><pic:cNvPicPr/></pic:nvPicPr><pic:blipFill><a:blip r:link="rId18"/><a:stretch><a:fillRect/></a:stretch></pic:blipFill><pic:spPr><a:xfrm><a:off x="0" y="0"/><a:ext cx="4526176" cy="3389393"/></a:xfrm><a:prstGeom prst="rect"><a:avLst/></a:prstGeom></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F1361C" w:rsidRDefault="00165A64" w:rsidP="007E0518"><w:pPr><w:pStyle w:val="Production"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t>Insert ASPEXTf0108.tif</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00635510"><w:pPr><w:pStyle w:val="FigureCaption"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="005F30F7"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Figure \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>8</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. Events that build the pipeline</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008C0D0F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The most important information here is that modules </w:t></w:r><w:r w:rsidR="00BF575A"><w:t xml:space="preserve">precede </w:t></w:r><w:r><w:t>handlers. They are loaded and executed at the particular state</w:t></w:r><w:r w:rsidR="002355E5"><w:t xml:space="preserve"> of the processing pipeline</w:t></w:r><w:r><w:t xml:space="preserve">, if configured </w:t></w:r><w:r w:rsidR="00BF575A"><w:t xml:space="preserve">properly </w:t></w:r><w:r><w:t xml:space="preserve">in </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>web.config</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="002355E5"><w:t xml:space="preserve"> file</w:t></w:r><w:r><w:t xml:space="preserve">. The figure shows only the minimum number required to </w:t></w:r><w:r w:rsidR="00B4388C"><w:t>execute</w:t></w:r><w:r><w:t xml:space="preserve"> a page. You’ll find a closer look </w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve">at </w:t></w:r><w:r w:rsidR="00E867E9"><w:t xml:space="preserve">all these events in </w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="00E867E9"><w:t>next section</w:t></w:r><w:r><w:t>. For now</w:t></w:r><w:r w:rsidR="004734D8"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> it’s enough to know when and why the modules and handlers get executed. This is the major part of the pipeline business</w:t></w:r><w:r w:rsidR="004734D8"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> and I’ll go in</w:t></w:r><w:r w:rsidR="004734D8"><w:t>to</w:t></w:r><w:r><w:t xml:space="preserve"> more detail in </w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>next section.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00323142"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">Modules and Handlers using </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>HttpModule</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>HttpHandler</w:t></w:r><w:proofErr w:type="spellEnd"/></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00332B2E"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00332B2E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidRPr="00323142"><w:t xml:space="preserve"> and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00332B2E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpContext</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidRPr="00323142"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>are</w:t></w:r><w:r w:rsidRPr="00323142"><w:t xml:space="preserve"> merely container</w:t></w:r><w:r><w:t>s</w:t></w:r><w:r w:rsidRPr="00323142"><w:t xml:space="preserve"> for </w:t></w:r><w:r w:rsidR="00B4388C" w:rsidRPr="00323142"><w:t>in</w:t></w:r><w:r w:rsidR="00B4388C"><w:t>c</w:t></w:r><w:r w:rsidR="00B4388C" w:rsidRPr="00323142"><w:t>oming</w:t></w:r><w:r w:rsidRPr="00323142"><w:t xml:space="preserve"> messages. </w:t></w:r><w:r><w:t xml:space="preserve">They build the pipeline by forming a chain of events that </w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve">commence </w:t></w:r><w:r><w:t>in a defined order</w:t></w:r><w:r w:rsidR="004734D8"><w:t>, and they</w:t></w:r><w:r w:rsidR="002355E5"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="0007109A"><w:t xml:space="preserve">hold </w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve">together </w:t></w:r><w:r w:rsidR="002355E5"><w:t>data related to the request</w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve">, in order </w:t></w:r><w:r><w:t>to give other instances easy access to the information involved in the process. However, the real work is done in other processing units,</w:t></w:r><w:r w:rsidR="00E867E9"><w:t xml:space="preserve"> particularly</w:t></w:r><w:r><w:t xml:space="preserve"> the modules and handlers. Modules </w:t></w:r><w:r w:rsidR="00722186"><w:t xml:space="preserve">are </w:t></w:r><w:r><w:t xml:space="preserve">built on top of </w:t></w:r><w:r w:rsidR="00722186"><w:t xml:space="preserve">the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00332B2E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpModule</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class. Handlers </w:t></w:r><w:r w:rsidR="00722186"><w:t xml:space="preserve">are </w:t></w:r><w:r><w:t xml:space="preserve">built on top of </w:t></w:r><w:r w:rsidR="00722186"><w:t xml:space="preserve">the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00332B2E"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpHandlers</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class. Both are abstract classes and need concrete implementation</w:t></w:r><w:r w:rsidR="00722186"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00722186"><w:t xml:space="preserve">In addition, both </w:t></w:r><w:r><w:t>are highly configurable and act as a chain of instances. That means</w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve"> that</w:t></w:r><w:r><w:t xml:space="preserve"> you can attach as many modules and handlers as you like and the request </w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve">will </w:t></w:r><w:r><w:t xml:space="preserve">flow through all these instances. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00332B2E"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r w:rsidRPr="00323142"><w:t>Several tasks could be handled in both levels</w:t></w:r><w:r w:rsidR="00722186"><w:t xml:space="preserve"> —</w:t></w:r><w:r w:rsidRPr="00323142"><w:t xml:space="preserve"> however, there is a different</w:t></w:r><w:r w:rsidR="002355E5"><w:t xml:space="preserve"> intention behind them</w:t></w:r><w:r w:rsidRPr="00323142"><w:t xml:space="preserve">. Modules tend to </w:t></w:r><w:r w:rsidR="004734D8"><w:t>control</w:t></w:r><w:r w:rsidR="004734D8" w:rsidRPr="00323142"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="00323142"><w:t xml:space="preserve">tasks on a lower level; their nature is more basic than </w:t></w:r><w:r w:rsidR="004734D8"><w:t xml:space="preserve">that of </w:t></w:r><w:r w:rsidRPr="00323142"><w:t xml:space="preserve">handlers. Think of modules as the right place to prepare data being processed by handlers or </w:t></w:r><w:r w:rsidR="002355E5"><w:t>modify</w:t></w:r><w:r w:rsidRPr="00323142"><w:t xml:space="preserve"> data subsequently when the regular treatment by a handler is </w:t></w:r><w:r w:rsidR="00504FBF"><w:t>completed</w:t></w:r><w:r w:rsidRPr="00323142"><w:t>. IIS programming</w:t></w:r><w:r w:rsidR="00504FBF"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00504FBF" w:rsidRPr="00504FBF"><w:t>aficionado</w:t></w:r><w:r w:rsidR="00504FBF"><w:t>s can</w:t></w:r><w:r w:rsidRPr="00323142"><w:t xml:space="preserve"> think of modules as ISAPI filters. The good news is that programming ASP.NET modules using .NET is much easier than developing filters for IIS. </w:t></w:r><w:r w:rsidR="00F77ECC"><w:t xml:space="preserve">Moving on from </w:t></w:r><w:r w:rsidRPr="00323142"><w:t>IIS</w:t></w:r><w:r w:rsidR="00B041FF"><w:t>,</w:t></w:r><w:r w:rsidRPr="00323142"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00F77ECC"><w:t>let’s</w:t></w:r><w:r w:rsidR="00F77ECC" w:rsidRPr="00323142"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="00323142"><w:t xml:space="preserve">focus on </w:t></w:r><w:r w:rsidR="00B041FF"><w:t>the amazing things that become possible as we extend</w:t></w:r><w:r w:rsidR="00B041FF" w:rsidRPr="00323142"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="00323142"><w:t>ASP.NET.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00332B2E" w:rsidRDefault="00165A64" w:rsidP="00332B2E"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The natural order of modules and handlers </w:t></w:r><w:r w:rsidR="00E72A41"><w:t>is</w:t></w:r><w:r><w:t>:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00332B2E"><w:pPr><w:pStyle w:val="NumListFirst"/></w:pPr><w:r><w:t>1.</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">Use module to </w:t></w:r><w:r w:rsidR="00E72A41"><w:t>pre-</w:t></w:r><w:r><w:t>process a request</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00332B2E"><w:pPr><w:pStyle w:val="NumList"/></w:pPr><w:r><w:t>2.</w:t></w:r><w:r><w:tab/><w:t>Use handler to process the request</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00332B2E"><w:pPr><w:pStyle w:val="NumListLast"/></w:pPr><w:r><w:t>3.</w:t></w:r><w:r><w:tab/><w:t>Use module again to post</w:t></w:r><w:r w:rsidR="00E72A41"><w:t>-</w:t></w:r><w:r><w:t>process the request</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00332B2E"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">ASP.NET comes with several default handlers, such as </w:t></w:r><w:r w:rsidR="00B041FF"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>very basic one</w:t></w:r><w:r w:rsidR="00E867E9"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> for *.</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>aspx</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> pages or web services. </w:t></w:r><w:r w:rsidR="00171539"><w:t xml:space="preserve">Some </w:t></w:r><w:r><w:t>default modules exist</w:t></w:r><w:r w:rsidR="00E867E9"><w:t xml:space="preserve"> that are</w:t></w:r><w:r><w:t xml:space="preserve"> responsible for </w:t></w:r><w:r w:rsidR="00A04A91"><w:t xml:space="preserve">simple </w:t></w:r><w:r><w:t>tasks like authentication and caching. In an ideal world</w:t></w:r><w:r w:rsidR="00B041FF"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the modules are transparent to the handlers. </w:t></w:r><w:r w:rsidR="00B041FF"><w:t>This means that</w:t></w:r><w:r><w:t xml:space="preserve"> handler</w:t></w:r><w:r w:rsidR="00E867E9"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00A04A91"><w:t>don’t</w:t></w:r><w:r><w:t xml:space="preserve"> know about </w:t></w:r><w:r w:rsidR="00B041FF"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">modules </w:t></w:r><w:r w:rsidR="00B041FF"><w:t xml:space="preserve">that work </w:t></w:r><w:r><w:t xml:space="preserve">before or after </w:t></w:r><w:r w:rsidR="00E867E9"><w:t>their</w:t></w:r><w:r><w:t xml:space="preserve"> own processing. ASP.NET allows </w:t></w:r><w:r w:rsidR="00B041FF"><w:t xml:space="preserve">several </w:t></w:r><w:r><w:t>easy ways to create</w:t></w:r><w:r w:rsidR="00A04A91"><w:t xml:space="preserve"> your</w:t></w:r><w:r><w:t xml:space="preserve"> own modules and handlers. </w:t></w:r><w:r w:rsidR="00B041FF"><w:t>T</w:t></w:r><w:r><w:t>his is</w:t></w:r><w:r w:rsidR="00B041FF"><w:t xml:space="preserve"> usually</w:t></w:r><w:r><w:t xml:space="preserve"> the first </w:t></w:r><w:r w:rsidR="00171539"><w:t xml:space="preserve">approach </w:t></w:r><w:r w:rsidR="00B041FF"><w:t>of</w:t></w:r><w:r><w:t xml:space="preserve"> extend</w:t></w:r><w:r w:rsidR="00B041FF"><w:t>ing</w:t></w:r><w:r><w:t xml:space="preserve"> the </w:t></w:r><w:r w:rsidR="00171539"><w:t xml:space="preserve">standard </w:t></w:r><w:r><w:t xml:space="preserve">behavior of ASP.NET. </w:t></w:r><w:r w:rsidR="00B041FF"><w:t>L</w:t></w:r><w:r><w:t xml:space="preserve">et’s take a closer look </w:t></w:r><w:r w:rsidR="00B041FF"><w:t xml:space="preserve">at </w:t></w:r><w:r><w:t>this technique.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="0024439F" w:rsidP="0024439F"><w:pPr><w:pStyle w:val="Figure"/></w:pPr><w:r w:rsidRPr="0024439F"><w:rPr><w:noProof/><w:lang w:val="de-DE" w:eastAsia="de-DE"/></w:rPr><w:lastRenderedPageBreak/><w:drawing><wp:inline distT="0" distB="0" distL="0" distR="0" wp14:anchorId="0487A09D" wp14:editId="622955F0"><wp:extent cx="5486400" cy="5826125"/><wp:effectExtent l="0" t="0" r="0" b="0"/><wp:docPr id="3" name="ASPEXTf0109.tif" descr="D:\UserData\jkrause\Documents\Meine Daten\Bücher\Fachbuchprojekte\ASP.NET Extensibility\Images\ASPEXTf0109.tif"/><wp:cNvGraphicFramePr><a:graphicFrameLocks xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" noChangeAspect="1"/></wp:cNvGraphicFramePr><a:graphic xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:nvPicPr><pic:cNvPr id="0" name="ASPEXTf0109.tif"/><pic:cNvPicPr/></pic:nvPicPr><pic:blipFill><a:blip r:link="rId19"/><a:stretch><a:fillRect/></a:stretch></pic:blipFill><pic:spPr><a:xfrm><a:off x="0" y="0"/><a:ext cx="5486400" cy="5826125"/></a:xfrm><a:prstGeom prst="rect"><a:avLst/></a:prstGeom></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F1361C" w:rsidRDefault="00165A64" w:rsidP="007E0518"><w:pPr><w:pStyle w:val="Production"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t>Insert ASPEXTf0109.tif</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E0518" w:rsidRDefault="00165A64" w:rsidP="007E0518"><w:pPr><w:pStyle w:val="FigureCaption"/><w:rPr><w:lang w:eastAsia="de-DE"/></w:rPr></w:pPr><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="00A04A91"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Figure \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>9</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. Modules and Handlers fit closely in the ASP.NET model</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00011B23" w:rsidP="00332B2E"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">In </w:t></w:r><w:r w:rsidR="00165A64"><w:t>Chapter 3</w:t></w:r><w:r w:rsidR="0068743A"><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>we</w:t></w:r><w:r w:rsidR="0068743A"><w:t xml:space="preserve">’ll </w:t></w:r><w:r><w:t xml:space="preserve">take </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">a closer look </w:t></w:r><w:r w:rsidR="0068743A"><w:t xml:space="preserve">at </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">the process of developing custom modules </w:t></w:r><w:r w:rsidR="003C7D17"><w:t>and</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> custom handlers</w:t></w:r><w:r w:rsidR="003C7D17"><w:t xml:space="preserve"> with some </w:t></w:r><w:r w:rsidR="00A04A91"><w:t xml:space="preserve">clever </w:t></w:r><w:r w:rsidR="003C7D17"><w:t>examples</w:t></w:r><w:r w:rsidR="00165A64"><w:t>.</w:t></w:r><w:r w:rsidR="0024439F"><w:t xml:space="preserve"> By now it’s enough to know that several modules process the request one after another on both, the request and the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="0024439F"><w:t>reponse</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="0024439F"><w:t xml:space="preserve"> path. </w:t></w:r><w:proofErr w:type="gramStart"/><w:r w:rsidR="0024439F"><w:t>Whereas only one handler processes the request finally, either an internal handler or a custom one.</w:t></w:r><w:proofErr w:type="gramEnd"/></w:p><w:p w:rsidR="0024439F" w:rsidRDefault="0024439F" w:rsidP="00332B2E"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00AE2AE7"><w:pPr><w:pStyle w:val="berschrift2"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t>The Life Cycles</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000E175E"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The life cycle is a term used in almost every introduction to ASP.NET. </w:t></w:r><w:ins w:id="6" w:author=" Rebekah White" w:date="2009-01-26T13:01:00Z"><w:r w:rsidR="0068743A"><w:t xml:space="preserve">This term is </w:t></w:r></w:ins><w:del w:id="7" w:author=" Rebekah White" w:date="2009-01-26T13:01:00Z"><w:r w:rsidDel="0068743A"><w:delText xml:space="preserve">This makes sense, because it’s </w:delText></w:r></w:del><w:r><w:t xml:space="preserve">absolutely important for </w:t></w:r><w:del w:id="8" w:author=" Rebekah White" w:date="2009-01-26T13:01:00Z"><w:r w:rsidDel="0068743A"><w:delText xml:space="preserve">the </w:delText></w:r></w:del><w:ins w:id="9" w:author=" Rebekah White" w:date="2009-01-26T13:01:00Z"><w:r w:rsidR="0068743A"><w:t xml:space="preserve">a complete </w:t></w:r></w:ins><w:del w:id="10" w:author=" Rebekah White" w:date="2009-01-26T13:01:00Z"><w:r w:rsidDel="0068743A"><w:delText xml:space="preserve">whole </w:delText></w:r></w:del><w:r><w:t xml:space="preserve">understanding and </w:t></w:r><w:ins w:id="11" w:author=" Rebekah White" w:date="2009-01-26T13:01:00Z"><w:r w:rsidR="0068743A"><w:t xml:space="preserve">the </w:t></w:r></w:ins><w:del w:id="12" w:author=" Rebekah White" w:date="2009-01-26T13:01:00Z"><w:r w:rsidDel="0068743A"><w:delText xml:space="preserve">right </w:delText></w:r></w:del><w:ins w:id="13" w:author=" Rebekah White" w:date="2009-01-26T13:01:00Z"><w:r w:rsidR="0068743A"><w:t xml:space="preserve">correct </w:t></w:r></w:ins><w:r><w:t>usage of ASP.NET.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000E175E"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">To break things down we can </w:t></w:r><w:r w:rsidR="00171539"><w:t xml:space="preserve">divide </w:t></w:r><w:r><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="00171539"><w:t xml:space="preserve">different life </w:t></w:r><w:r><w:t>cycles into three parts:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00011B23"><w:pPr><w:pStyle w:val="UnnumberedFirst"/></w:pPr><w:r><w:t xml:space="preserve">The application’s </w:t></w:r><w:r w:rsidR="00171539"><w:t xml:space="preserve">life </w:t></w:r><w:r><w:t>cycle</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00011B23"><w:pPr><w:pStyle w:val="UnnumberedFirst"/></w:pPr><w:r><w:t xml:space="preserve">The page’s </w:t></w:r><w:r w:rsidR="00171539"><w:t xml:space="preserve">life </w:t></w:r><w:r><w:t>cycle</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000E175E"><w:pPr><w:pStyle w:val="UnnumberedLast"/></w:pPr><w:r><w:t xml:space="preserve">The control’s </w:t></w:r><w:r w:rsidR="00171539"><w:t xml:space="preserve">life </w:t></w:r><w:r><w:t>cycle</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000E175E"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>The following sections cover</w:t></w:r><w:r w:rsidR="003C7D17"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> this in-depth. The behavior of the cycles is slightly different between IIS versions but the overall description is the same. The following explanations focus on IIS7 and Framework 3.</w:t></w:r><w:r w:rsidR="003C7D17"><w:t>5</w:t></w:r><w:r><w:t xml:space="preserve"> behavior, which is valid for .NET </w:t></w:r><w:r w:rsidR="003C7D17"><w:t>2.0 up to</w:t></w:r><w:r w:rsidR="00705A15"><w:t xml:space="preserve"> the</w:t></w:r><w:r w:rsidR="003C7D17"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="0084292C"><w:t xml:space="preserve">upcoming </w:t></w:r><w:r w:rsidR="003C7D17"><w:t>4.0</w:t></w:r><w:del w:id="14" w:author=" Rebekah White" w:date="2009-01-26T13:01:00Z"><w:r w:rsidDel="0068743A"><w:delText xml:space="preserve">, </w:delText></w:r><w:r w:rsidR="003C7D17" w:rsidDel="0068743A"><w:delText>as well</w:delText></w:r></w:del><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="003C7D17" w:rsidP="000E175E"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>IIS</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">7 can run in two different modes. The IIS integrated mode is the new native one, whereas the classic </w:t></w:r><w:r><w:t>mode mimics the behavior of IIS5 or IIS</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">6. The integrated mode has several advantages and should be preferred if there is no explicit requirement to step down. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000E175E"><w:pPr><w:pStyle w:val="berschrift2"/></w:pPr><w:r><w:t>The IIS7 integrated pipeline</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="003C7D17" w:rsidP="000E175E"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>The IIS</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">7 integrated pipeline is a unified request processing pipeline. Each incoming request is handled by this pipeline and routed through </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">internal parts </w:t></w:r><w:r w:rsidR="0084292C"><w:t xml:space="preserve">of IIS. </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">The pipeline </w:t></w:r><w:r w:rsidR="0084292C"><w:t>supports both manage</w:t></w:r><w:r w:rsidR="00165A64"><w:t>d and native code modules. You may already know about creating managed modules based on</w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve"> the</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="006E4696"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IHttpModule</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> interface. Once implemented and hooked into the pipeline</w:t></w:r><w:r w:rsidR="00273FBA"><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> the module receives all events used to interact with the request </w:t></w:r><w:r w:rsidR="00705A15"><w:t xml:space="preserve">passing </w:t></w:r><w:r w:rsidR="00165A64"><w:t>through the pipe.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000E175E"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The term </w:t></w:r><w:r w:rsidR="0084292C"><w:t>“</w:t></w:r><w:r><w:t>unified request processing</w:t></w:r><w:r w:rsidR="0084292C"><w:t xml:space="preserve"> pipeline”</w:t></w:r><w:r w:rsidR="0024439F"><w:t xml:space="preserve"> needs some more investigation</w:t></w:r><w:r><w:t>. IIS6 provided two different pipelines</w:t></w:r><w:r w:rsidR="00705A15"><w:t xml:space="preserve">: </w:t></w:r><w:r><w:t xml:space="preserve">one for native and one for managed code. This is obviously for historical reasons, because the managed world came </w:t></w:r><w:r w:rsidR="00705A15"><w:t>after</w:t></w:r><w:r><w:t xml:space="preserve"> the IIS world. In IIS 7 both pipeline</w:t></w:r><w:r w:rsidR="00705A15"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> united to </w:t></w:r><w:r w:rsidR="00705A15"><w:t xml:space="preserve">become </w:t></w:r><w:r><w:t>the unified request processing pipeline. For ASP.NET developers this has several benefits:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="0024439F" w:rsidP="0024439F"><w:pPr><w:pStyle w:val="BulletFirst"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">The integrated pipeline raises all </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">exposed </w:t></w:r><w:r w:rsidR="00165A64"><w:t>events, which enables existing ASP.NET modules to work in</w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve"> the</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> integrated mode. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="0024439F" w:rsidP="0024439F"><w:pPr><w:pStyle w:val="Bullet"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">Both native-code and managed-code modules can be configured at the Web server, Web site, or Web application level. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="0024439F" w:rsidP="0024439F"><w:pPr><w:pStyle w:val="Bullet"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">Managed-code modules can be invoked at any stage in the pipeline. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="0024439F" w:rsidP="0024439F"><w:pPr><w:pStyle w:val="BulletLast"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">Modules are registered and enabled or disabled through an application’s </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64"><w:t>Web.config</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> file.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000E175E"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>The configuration of modules includes the built-in ASP.NET managed-code modules for session state, forms authentication, profiles, and role management. Furthermore, managed-code modules can be enabled or disabled for all requests, regardless of whether the request is for an ASP.NET resource like an .</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>aspx</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> file.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000E175E"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t>Invoking modules at any stage means that this may happen before any server processing occurs for the request, after all server processing has occurred, or anywhere in between.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006E4696"><w:pPr><w:pStyle w:val="berschrift2"/></w:pPr><w:r><w:t xml:space="preserve">The </w:t></w:r><w:r w:rsidR="00407BC0"><w:t>Application’s Pipeline</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006E4696"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>In more generic terms the pipeline describes the flow through several instances within the IIS. Each step processes the request in a distinct way and fires appropriate events. This forces interaction</w:t></w:r><w:r w:rsidR="0024439F"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> with the modules and applications attached by configuration. The </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">variety </w:t></w:r><w:r><w:t xml:space="preserve">of actions you can </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">perform ranges </w:t></w:r><w:r><w:t>from n</w:t></w:r><w:r w:rsidR="0084292C"><w:t xml:space="preserve">one </w:t></w:r><w:r><w:t xml:space="preserve">to total control. However, doing nothing </w:t></w:r><w:r w:rsidR="00542113"><w:t xml:space="preserve">lets </w:t></w:r><w:r><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="00542113"><w:t>built-in modules</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">accomplish </w:t></w:r><w:r w:rsidR="00542113"><w:t xml:space="preserve">their </w:t></w:r><w:r><w:t xml:space="preserve">job and handle the basic page processing. From </w:t></w:r><w:r w:rsidR="00542113"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">perspective of </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>extensibility of ASP.NET</w:t></w:r><w:r w:rsidR="00542113"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> “total control” is what we’re looking for.</w:t></w:r></w:p><w:p w:rsidR="0084292C" w:rsidRDefault="00C85A2C" w:rsidP="00C85A2C"><w:pPr><w:pStyle w:val="Figure"/></w:pPr><w:r w:rsidRPr="00C85A2C"><w:rPr><w:noProof/><w:lang w:val="de-DE" w:eastAsia="de-DE"/></w:rPr><w:drawing><wp:inline distT="0" distB="0" distL="0" distR="0" wp14:anchorId="66D2CD26" wp14:editId="40151966"><wp:extent cx="5486400" cy="5474335"/><wp:effectExtent l="0" t="0" r="0" b="0"/><wp:docPr id="10" name="ASPEXTf0110.tif" descr="D:\UserData\jkrause\Documents\Meine Daten\Bücher\Fachbuchprojekte\ASP.NET Extensibility\Images\ASPEXTf0110.tif"/><wp:cNvGraphicFramePr><a:graphicFrameLocks xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" noChangeAspect="1"/></wp:cNvGraphicFramePr><a:graphic xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:nvPicPr><pic:cNvPr id="0" name="ASPEXTf0110.tif"/><pic:cNvPicPr/></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId20" r:link="rId21"/><a:stretch><a:fillRect/></a:stretch></pic:blipFill><pic:spPr><a:xfrm><a:off x="0" y="0"/><a:ext cx="5486400" cy="5474335"/></a:xfrm><a:prstGeom prst="rect"><a:avLst/></a:prstGeom></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006E4696"><w:pPr><w:pStyle w:val="FigureCaption"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="00171539"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Figure \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="00D9219D"><w:t>10</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. Application’s life cycle events</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00C85A2C" w:rsidP="006E4696"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t>Two states are new in IIS</w:t></w:r><w:r w:rsidR="00165A64"><w:t>7</w:t></w:r><w:r w:rsidR="00542113"><w:t>:</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> Map Handler and Log Request. This gives developers much more control over the</w:t></w:r><w:r w:rsidR="00D9219D"><w:t xml:space="preserve"> request process. S</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">ome modules are managed whereas others are written in native code. You can add your own modules in </w:t></w:r><w:r w:rsidR="00542113"><w:t xml:space="preserve">either </w:t></w:r><w:r w:rsidR="00165A64"><w:t>way. However, as a .NET developer</w:t></w:r><w:r w:rsidR="00273FBA"><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> you</w:t></w:r><w:r w:rsidR="00542113"><w:t>’d</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> probably prefer </w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>writing</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> in managed code and </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">indeed </w:t></w:r><w:r w:rsidR="00165A64"><w:t>I would</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">strongly recommend this. </w:t></w:r><w:r w:rsidR="00542113"><w:t xml:space="preserve">(Native code is an option if you need to create a high performance module </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">which </w:t></w:r><w:r w:rsidR="00D9219D"><w:t>performs</w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00542113"><w:t>simple functions.)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00F13BE8" w:rsidP="00731B8D"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t xml:space="preserve">The </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">Request </w:t></w:r><w:r w:rsidR="00542113"><w:t>Arrives</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006E4696"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>The</w:t></w:r><w:r w:rsidR="00542113"><w:t xml:space="preserve"> application</w:t></w:r><w:r><w:t xml:space="preserve"> life cycle </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">begins </w:t></w:r><w:r><w:t>when a request is made for an application resource sent by a client application</w:t></w:r><w:r w:rsidR="00542113"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00542113"><w:t xml:space="preserve">such as </w:t></w:r><w:r><w:t>a browser</w:t></w:r><w:r w:rsidR="00542113"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> to the Web server. In integrated mode</w:t></w:r><w:r w:rsidR="00273FBA"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the unified pipeline handles all requests. When the pipeline receives a request, it’s being passed through stages that are common to all requests. These stages are represented </w:t></w:r><w:r w:rsidR="00E55BCE"><w:t xml:space="preserve">internally </w:t></w:r><w:r><w:t xml:space="preserve">by the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00731B8D"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>RequestNotification</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> enume</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>ration. All request</w:t></w:r><w:r><w:t xml:space="preserve"> stages can be configured to allow developers to take advantage of ASP.NET functionality. That functionality is encapsulated in managed-code modules that have access to the request pipeline. </w:t></w:r><w:r w:rsidR="00E55BCE"><w:t>For instance, e</w:t></w:r><w:r><w:t>ven though the .</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>htm</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> filename extension is not mapped by default to ASP.NET, a request for an HTML page still invokes ASP.NET modules. This enables you to take advantage of ASP.NET authentication and authorization for all resources. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00AD545A"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t>The unified pipeline receives the first request</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006E4696"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">When the unified pipeline receives the first request for any resource in an application, an instance of the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00AD545A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ApplicationManager</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class is created. This builds the application domain (</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>AppDomain</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">) </w:t></w:r><w:r w:rsidR="003C2B38"><w:t xml:space="preserve">in which </w:t></w:r><w:r><w:t xml:space="preserve">the request is processed. Application domains provide isolation between applications for global variables and enable each application to be unloaded separately. In the application domain, an instance of the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="006A3A6A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HostingEnvironment</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class is created, which provides access to information about the application, such as the name of the folder where the application is stored. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="006A3A6A" w:rsidRDefault="00165A64" w:rsidP="006A3A6A"><w:pPr><w:pStyle w:val="NoteTipCaution"/></w:pPr><w:r><w:t>Tip:</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">When an application </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">operates </w:t></w:r><w:r><w:t xml:space="preserve">in the context of Visual Studio while you run a debug session, the application starts with the launch of the integrated web server. When the debug session ends and you launch </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">the application </w:t></w:r><w:r><w:t xml:space="preserve">again using the F5 key, the integrated web server </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">will </w:t></w:r><w:r><w:t>run the same application domain. This means</w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve"> that</w:t></w:r><w:r><w:t xml:space="preserve"> between the debug sessions no new application life cycle is being starte</w:t></w:r><w:r w:rsidR="003C2B38"><w:t>d</w:t></w:r><w:r><w:t>. To force restarting the application you can right click the notification icon</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve"> in the </w:t></w:r><w:r w:rsidR="003C2B38"><w:t xml:space="preserve">system </w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>tray</w:t></w:r><w:r><w:t xml:space="preserve"> and stop the web server.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006E4696"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The first request has several additional tasks. You </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">will </w:t></w:r><w:r w:rsidR="003C2B38"><w:t xml:space="preserve">notice </w:t></w:r><w:r><w:t xml:space="preserve">this because the </w:t></w:r><w:r w:rsidR="003C2B38"><w:t xml:space="preserve">elapsed </w:t></w:r><w:r><w:t xml:space="preserve">time </w:t></w:r><w:r w:rsidR="003C2B38"><w:t xml:space="preserve">for </w:t></w:r><w:r><w:t xml:space="preserve">the page </w:t></w:r><w:r w:rsidR="003C2B38"><w:t xml:space="preserve">to be </w:t></w:r><w:r><w:t>delivered is longer than for all subsequent requests. During the first request, top-level items in the application are compiled</w:t></w:r><w:r w:rsidR="003C2B38"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> if required. This includes application code in the </w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>project</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>By the way, since the days of Visual Studio 2008</w:t></w:r><w:r w:rsidR="00273FBA"><w:t>,</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve"> there is no longer a special code folder named </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00F13BE8"><w:t>App_Code</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve">. Even if you name </w:t></w:r><w:r w:rsidR="00273FBA"><w:t>a folder this</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve">, it </w:t></w:r><w:r w:rsidR="00273FBA"><w:t xml:space="preserve">will have </w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve">no special </w:t></w:r><w:r w:rsidR="00273FBA"><w:t>function</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve">. Code </w:t></w:r><w:r w:rsidR="003C2B38"><w:t xml:space="preserve">that </w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>reside</w:t></w:r><w:r w:rsidR="003C2B38"><w:t>s</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve"> in any folder at any level is compiled in one assembly per project. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008E73D9"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t>Response object</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>s are created for each request</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="008E73D9" w:rsidRDefault="00165A64" w:rsidP="008E73D9"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">After the application domain has been created and the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="008E73D9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HostingEnvironment</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> object has been instantiated, application objects such as </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="008E73D9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpContext</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">, </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="008E73D9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">, and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="008E73D9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpResponse</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> are created and initialized. These objects exist throughout the lifetime of the request and give developers full access to all related data.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008E73D9"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="008E73D9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpContext</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class contains objects that are specific to the current application request, such as the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="008E73D9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="008E73D9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpResponse</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> objects. The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="008E73D9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> object </w:t></w:r><w:r w:rsidRPr="008E73D9"><w:t>contains</w:t></w:r><w:r><w:t xml:space="preserve"> information about the current request, which includes cookies and browser information. The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="008E73D9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpResponse</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> object contains the response that is </w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve">about to be </w:t></w:r><w:r><w:t>sen</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>d</w:t></w:r><w:r><w:t xml:space="preserve"> to the client, which includes all rendered output and </w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve">header data, </w:t></w:r><w:r w:rsidR="006F41C5"><w:t xml:space="preserve">such as </w:t></w:r><w:r><w:t xml:space="preserve">cookies. </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="008E73D9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpContext.Current</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> gives you permanent access to the current context through a static method. For easy access the </w:t></w:r><w:r w:rsidRPr="008E73D9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Page</w:t></w:r><w:r><w:t xml:space="preserve"> class has properties like </w:t></w:r><w:r w:rsidRPr="008E73D9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Request</w:t></w:r><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:r w:rsidRPr="008E73D9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Response</w:t></w:r><w:r><w:t xml:space="preserve"> that return instances of the</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve"> very same</w:t></w:r><w:r><w:t xml:space="preserve"> related objects.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00D069AA" w:rsidRDefault="00165A64" w:rsidP="00D069AA"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t>Differences between IIS6 and IIS7</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00D069AA"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">We’re currently in the transition </w:t></w:r><w:r w:rsidR="00E37A5A"><w:t xml:space="preserve">period </w:t></w:r><w:r><w:t xml:space="preserve">from IIS6 to IIS7. </w:t></w:r><w:r w:rsidR="00E37A5A"><w:t xml:space="preserve">While </w:t></w:r><w:r><w:t>IIS7 is the best choice for a web server on Microsoft platform</w:t></w:r><w:r w:rsidR="00E37A5A"><w:t>s,</w:t></w:r><w:r><w:t xml:space="preserve"> there are still </w:t></w:r><w:r w:rsidR="006F41C5"><w:t>many</w:t></w:r><w:r><w:t xml:space="preserve"> server</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> with IIS6 </w:t></w:r><w:r w:rsidR="006F41C5"><w:t>in production</w:t></w:r><w:r><w:t xml:space="preserve">. Because you may </w:t></w:r><w:r w:rsidR="006F41C5"><w:t xml:space="preserve">already </w:t></w:r><w:r><w:t>have a deep understanding of processing ASP.NET based on IIS6</w:t></w:r><w:r w:rsidR="00E37A5A"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the following explanation focuses on the key differences between IIS6 and IIS7</w:t></w:r><w:r w:rsidR="00E37A5A"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> running in</w:t></w:r><w:r w:rsidR="00E37A5A"><w:t xml:space="preserve"> both</w:t></w:r><w:r><w:t xml:space="preserve"> Integrated mode and with the .NET Framework 3.5 or later. The following properties are specific </w:t></w:r><w:r w:rsidR="006F41C5"><w:t xml:space="preserve">to </w:t></w:r><w:r><w:t>IIS7 with Integrated mode. You must run IIS7 to take advantage of these.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006E4696"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpResponse</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> object has a new property </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>SubStatusCode</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">. This is useful for setting codes for tracking failed requests. The </w:t></w:r><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Headers</w:t></w:r><w:r><w:t xml:space="preserve"> property of the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpResponse</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> object provides access to response headers for the response. Two properties of the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpContext</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> object, </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IsPostNotification</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>CurrentNotification</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">, are used when one event handler handles several </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> events. </w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>Both t</w:t></w:r><w:r><w:t xml:space="preserve">he </w:t></w:r><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Headers</w:t></w:r><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ServerVariables</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> property of the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> object are write-enabled.  </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00D069AA"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">An </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> object is assigned to the request </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00D069AA"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">After all application objects have been initialized, the application is started by creating an instance of the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class. If the application has a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>Global.asax</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> file, ASP.NET instead creates an instance of the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>Global.asax</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class that is derived from the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class. It then uses the derived class to represent the application. This way you get access to the application events simply by overwriting the handlers within the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>global.asax</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> code portion.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00D069AA"><w:pPr><w:pStyle w:val="NoteTipCaution"/></w:pPr><w:r><w:t>Note:</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">The first time that an ASP.NET page or process is requested in an application, a new instance of the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class is created. However, to maximize performance, </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00D069AA"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> instances might be reused for multiple requests. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="001846B0"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">The request is processed by the pipeline </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="001846B0"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="001846B0"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpApplication</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class performs several tasks while the request is being processed. Each step fires a specific request to allow you to run code when the event is raised. Without any further action</w:t></w:r><w:r w:rsidR="00E37A5A"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> all incoming requests </w:t></w:r><w:r w:rsidR="00E37A5A"><w:t xml:space="preserve">will </w:t></w:r><w:r><w:t xml:space="preserve">fire all events and </w:t></w:r><w:r w:rsidR="00E37A5A"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">attached modules </w:t></w:r><w:r w:rsidR="00E37A5A"><w:t xml:space="preserve">will be </w:t></w:r><w:r w:rsidR="00B4388C"><w:t>invoked in</w:t></w:r><w:r w:rsidR="006F41C5"><w:t xml:space="preserve"> sequence</w:t></w:r><w:r><w:t>. T</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>o</w:t></w:r><w:r><w:t xml:space="preserve"> take advantage </w:t></w:r><w:r w:rsidR="00FA33DF"><w:t xml:space="preserve">of </w:t></w:r><w:r><w:t>extensibility</w:t></w:r><w:r w:rsidR="00FA33DF"><w:t>, some</w:t></w:r><w:r><w:t xml:space="preserve"> interfaces come into the scope. </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="001846B0"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:lastRenderedPageBreak/><w:t>IHttpModule</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is the basic interface for custom modules. In IIS7’s integrated mode you </w:t></w:r><w:r w:rsidR="00E37A5A"><w:t xml:space="preserve">can </w:t></w:r><w:r><w:t xml:space="preserve">use the module’s </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="001846B0"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Init</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method to attach the required events. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006E4696"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>On</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>e</w:t></w:r><w:r><w:t xml:space="preserve"> step you’re supposed to perform is the request validation.</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve"> Imagine h</w:t></w:r><w:r><w:t>acker</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> try</w:t></w:r><w:r w:rsidR="00E37A5A"><w:t>ing</w:t></w:r><w:r><w:t xml:space="preserve"> to send malicious markup or other </w:t></w:r><w:r w:rsidR="00E37A5A"><w:t>intrusions</w:t></w:r><w:r><w:t>. The following list of events shows all steps you can run private code</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve"> in</w:t></w:r><w:r><w:t xml:space="preserve">. Validating the request should </w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>take place as early as possible</w:t></w:r><w:r w:rsidR="00FA33DF"><w:t>,</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve"> according to the following list in </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00F13BE8" w:rsidRPr="00F13BE8"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>BeginRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00F13BE8"><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006C4183"><w:pPr><w:pStyle w:val="UnnumberedFirst"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>BeginRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>AuthenticateRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>PostAuthenticateRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>AuthorizeRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>PostAuthorizeRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>ResolveRequestCache</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>PostResolveRequestCache</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>MapRequestHandler</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. An appropriate handle</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t>r is selected based on the file</w:t></w:r><w:r><w:t>name extension of the requested resource. The handler can be a native</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="006C4183"><w:t>code module such as the IIS7</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>StaticFileModule</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> or a managed</w:t></w:r><w:r w:rsidR="00F13BE8"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">module such as the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="006C4183"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>PageHandlerFactory</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class.  </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>PostMapRequestHandler</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>AcquireRequestState</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>PostAcquireRequestState</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006C4183"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>PreRequestHandlerExecute</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r><w:r w:rsidRPr="006C4183"><w:t>Call</w:t></w:r><w:r w:rsidR="006C4183"><w:t xml:space="preserve"> either</w:t></w:r><w:r><w:t xml:space="preserve"> the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00F13BE8"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ProcessRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method </w:t></w:r><w:r w:rsidR="006C4183"><w:t xml:space="preserve">for synchronous calls </w:t></w:r><w:r><w:t xml:space="preserve">or the asynchronous version </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00F13BE8"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IHttpAsyncHandler.BeginProcessRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> of the appropriate </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="006C4183"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IHttpHandler</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>PostRequestHandlerExecute</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>ReleaseRequestState</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>PostReleaseRequestState</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Perform response filtering if the Filter property is defined. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>UpdateRequestCache</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>PostUpdateRequestCache</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>LogRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>PostLogRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>EndRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>PreSendRequestHeaders</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0095657A"><w:pPr><w:pStyle w:val="Unnumbered"/></w:pPr><w:r><w:t xml:space="preserve">Raise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>PreSendRequestContent</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00161050"><w:pPr><w:pStyle w:val="berschrift2"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">The </w:t></w:r><w:r w:rsidR="00407BC0"><w:t>Page’s Life Cycle</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00161050"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>After understanding the application</w:t></w:r><w:r w:rsidR="00FA33DF"><w:t>’</w:t></w:r><w:r><w:t>s life cycle</w:t></w:r><w:r w:rsidR="00E37A5A"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> you</w:t></w:r><w:r w:rsidR="00FA33DF"><w:t>’</w:t></w:r><w:r><w:t xml:space="preserve">re now ready to </w:t></w:r><w:r w:rsidR="00E37A5A"><w:t xml:space="preserve">move further </w:t></w:r><w:r w:rsidR="008C70CF"><w:t>along the path</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00E37A5A"><w:t xml:space="preserve">taken by </w:t></w:r><w:r><w:t xml:space="preserve">the request. The request is now being processed until the </w:t></w:r><w:r w:rsidR="008C70CF"><w:t>resources are prepared</w:t></w:r><w:r><w:t xml:space="preserve"> and ready to be served. For static resources it’s easy; the data </w:t></w:r><w:r w:rsidR="008C70CF"><w:t xml:space="preserve">is all </w:t></w:r><w:r><w:t xml:space="preserve">ready to </w:t></w:r><w:r w:rsidR="008C70CF"><w:t>send</w:t></w:r><w:r><w:t xml:space="preserve"> to the client. </w:t></w:r><w:r w:rsidR="008C70CF"><w:t>(Examples of s</w:t></w:r><w:r><w:t xml:space="preserve">tatic resources </w:t></w:r><w:r w:rsidR="008C70CF"><w:t xml:space="preserve">include </w:t></w:r><w:r><w:t>images, JavaScript files, and embedded objects.</w:t></w:r><w:r w:rsidR="008C70CF"><w:t>)</w:t></w:r><w:r><w:t xml:space="preserve"> The more exciting information is how dynamic resources </w:t></w:r><w:r w:rsidR="008C70CF"><w:t xml:space="preserve">are </w:t></w:r><w:r><w:t xml:space="preserve">processed. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00161050" w:rsidRDefault="00165A64" w:rsidP="00161050"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The basic steps in the page’s life cycle include initialization, instantiating controls, restoring and maintaining state, running event handler code, and rendering. As </w:t></w:r><w:r w:rsidR="001A53FE"><w:t xml:space="preserve">you saw in </w:t></w:r><w:r><w:t>the application’s life cycle</w:t></w:r><w:r w:rsidR="001A53FE"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> you will be able to interact with the processing and change the handling for </w:t></w:r><w:r w:rsidR="00E37A5A"><w:t xml:space="preserve">your intended </w:t></w:r><w:r><w:t>effect</w:t></w:r><w:r w:rsidR="001A53FE"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve">. Some steps during the page’s life cycle are more complex and require a closer look </w:t></w:r><w:r w:rsidR="00E37A5A"><w:t xml:space="preserve">in order </w:t></w:r><w:r><w:t xml:space="preserve">to </w:t></w:r><w:r w:rsidR="001A53FE"><w:t xml:space="preserve">take </w:t></w:r><w:r><w:t xml:space="preserve">full advantage of </w:t></w:r><w:r w:rsidR="0009536C"><w:t>the</w:t></w:r><w:r w:rsidR="00E37A5A"><w:t>ir</w:t></w:r><w:r w:rsidR="0009536C"><w:t xml:space="preserve"> customization potential</w:t></w:r><w:r><w:t xml:space="preserve">. One major </w:t></w:r><w:r w:rsidR="0009536C"><w:t xml:space="preserve">portion </w:t></w:r><w:r><w:t xml:space="preserve">is the </w:t></w:r><w:r w:rsidR="0009536C"><w:t xml:space="preserve">view </w:t></w:r><w:r w:rsidR="00B4388C"><w:t>state handling</w:t></w:r><w:r><w:t>. I</w:t></w:r><w:r w:rsidR="00E37A5A"><w:t>’ll</w:t></w:r><w:r><w:t xml:space="preserve"> dedicate a whole section </w:t></w:r><w:r w:rsidR="00E37A5A"><w:t xml:space="preserve">to </w:t></w:r><w:r><w:t xml:space="preserve">explaining </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> later in this chapter.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00161050"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">It is </w:t></w:r><w:r w:rsidR="00E37A5A"><w:t xml:space="preserve">also </w:t></w:r><w:r><w:t>important for you to understand the page life cycle. As a developer creating custom controls</w:t></w:r><w:r w:rsidR="008712CF"><w:t>,</w:t></w:r><w:r w:rsidR="006C4183"><w:t xml:space="preserve"> for instance</w:t></w:r><w:r><w:t xml:space="preserve">, you must be familiar with the life cycle in order to correctly initialize controls, populate control properties with </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> data, and run any control behavior code. You may have heard of a control life cycle, too. You may already know that a page in ASP.NET </w:t></w:r><w:r w:rsidR="008712CF"><w:t xml:space="preserve">is a </w:t></w:r><w:r><w:t>sort of specialized control and therefore a control’s life cycle is very similar. However, pages have more events available.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00161050" w:rsidRDefault="00165A64" w:rsidP="00161050"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">What about Master </w:t></w:r><w:r w:rsidR="00F13EF8"><w:t>P</w:t></w:r><w:r><w:t xml:space="preserve">age </w:t></w:r><w:r w:rsidR="00407BC0"><w:t>Life Cycle</w:t></w:r><w:r w:rsidR="001833FD"><w:t>?</w:t></w:r></w:p><w:p w:rsidR="007A6B64" w:rsidRDefault="007A6B64" w:rsidP="007A6B64"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>You might miss information regarding master pages here. The master page itself does not have any stages, because it’s not an object created and run standalone. The master page hierarchy is used to resolve the final construct of the page requested and then the page’s life cycle begins. Therefore, the master page is treated like a control, with some events related to the page’s life cycle events, but again, not with its own life cycle.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00926FD3"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t xml:space="preserve">Page </w:t></w:r><w:r w:rsidR="00407BC0"><w:t xml:space="preserve">Request </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006C4183"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The page request occurs before the page life cycle begins. When the page is requested by </w:t></w:r><w:r w:rsidR="00230EB9"><w:t xml:space="preserve">a </w:t></w:r><w:r><w:t xml:space="preserve">client, ASP.NET determines whether the page needs to be parsed and compiled, or whether a cached version of the page can be sent in response without </w:t></w:r><w:r w:rsidR="00230EB9"><w:t xml:space="preserve">executing </w:t></w:r><w:r><w:t>the page. In each case the “life” of the page begins.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00926FD3"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">Start </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008464D8"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">In this step, page properties such as </w:t></w:r><w:r w:rsidRPr="00926FD3"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Request</w:t></w:r><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:r w:rsidRPr="00926FD3"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Response</w:t></w:r><w:r><w:t xml:space="preserve"> are set. These propert</w:t></w:r><w:r w:rsidR="006C4183"><w:t>ies</w:t></w:r><w:r><w:t xml:space="preserve"> give you access to the current </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00926FD3"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00926FD3"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HttpResponse</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> instances create</w:t></w:r><w:r w:rsidR="00230EB9"><w:t>d</w:t></w:r><w:r><w:t xml:space="preserve"> through the application’s life cycle.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008464D8"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">You can access all information related to the request using </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00926FD3"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>this.Request</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00230EB9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>.</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00230EB9"><w:t>(In</w:t></w:r><w:r><w:t xml:space="preserve"> later stages </w:t></w:r><w:r w:rsidR="00230EB9"><w:t xml:space="preserve">you can </w:t></w:r><w:r><w:t xml:space="preserve">modify the response created and stored in </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00926FD3"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>this.Response</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>.</w:t></w:r><w:r w:rsidR="00230EB9"><w:t>)</w:t></w:r><w:r><w:t xml:space="preserve"> At this stage, the page also determines whether the request is a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> or a new request and sets the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00926FD3"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IsPostBack</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> property. This involves two checks</w:t></w:r><w:r w:rsidR="00230EB9"><w:t>: whether</w:t></w:r><w:r><w:t xml:space="preserve"> the request is done as a POST</w:t></w:r><w:r w:rsidR="00230EB9"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:r w:rsidR="00D643C3"><w:t xml:space="preserve">whether it </w:t></w:r><w:r><w:t xml:space="preserve">comes from the same ASP.NET page. Additionally, during the </w:t></w:r><w:r w:rsidR="00DB268A"><w:t xml:space="preserve">Start </w:t></w:r><w:r><w:t xml:space="preserve">step, the page’s </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="008464D8"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>UICulture</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> property is set. </w:t></w:r><w:r w:rsidR="00ED2349"><w:t>At this point you can perform</w:t></w:r><w:r><w:t xml:space="preserve"> any action based on the automatically </w:t></w:r><w:r><w:lastRenderedPageBreak/><w:t>recognized page culture.</w:t></w:r><w:r w:rsidR="00ED2349"><w:t xml:space="preserve"> Alternatively, you can force the culture property, so that the correct resources are obtained. (Forcing the culture doesn’t work in other steps).</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00926FD3"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">Page initialization </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008464D8"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>During page initialization step, controls on the page become available and each control</w:t></w:r><w:r w:rsidR="006C4183"><w:t>’</w:t></w:r><w:r><w:t xml:space="preserve">s </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="006C4183"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>UniqueID</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> property is set. </w:t></w:r><w:r w:rsidR="006C4183"><w:t xml:space="preserve">The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="006C4183" w:rsidRPr="006C4183"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>UniqueID</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="006C4183"><w:t xml:space="preserve"> is used later on </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="006C4183"><w:t>postbacks</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="006C4183"><w:t xml:space="preserve"> to assign control state</w:t></w:r><w:r w:rsidR="00B718A6"><w:t xml:space="preserve"> in order</w:t></w:r><w:r w:rsidR="006C4183"><w:t xml:space="preserve"> to make forms sticky, for instance. </w:t></w:r><w:r><w:t xml:space="preserve">Any themes are also applied to the page. If the current request is a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">, the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> data has not yet been loaded and control property values have not been restored to the values from view state. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00926FD3"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">Load </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008464D8"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">During load, if the current request is a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>, control properties are loaded with information recovered from view state and control state. For</w:t></w:r><w:r w:rsidR="006C4183"><w:t xml:space="preserve"> a </w:t></w:r><w:r><w:t>regular request via GET</w:t></w:r><w:r w:rsidR="00E83526"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> vie</w:t></w:r><w:r w:rsidR="006C4183"><w:t>w</w:t></w:r><w:r><w:t xml:space="preserve"> state and control state </w:t></w:r><w:r w:rsidR="00E83526"><w:t xml:space="preserve">are </w:t></w:r><w:r><w:t>set to their</w:t></w:r><w:r w:rsidR="006C4183"><w:t xml:space="preserve"> respective</w:t></w:r><w:r><w:t xml:space="preserve"> default state</w:t></w:r><w:r w:rsidR="006C4183"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008464D8"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">Validation </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008464D8"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">During this step the </w:t></w:r><w:r w:rsidRPr="008464D8"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Validate</w:t></w:r><w:r w:rsidRPr="008464D8"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">method of all validator controls is called. The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="008464D8"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IsValid</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="006C4183"><w:t>property of all validator controls is</w:t></w:r><w:r><w:t xml:space="preserve"> set and as a summary the page’s </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="008464D8"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IsValid</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> property is set, too. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008464D8"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>Postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00407BC0"><w:t xml:space="preserve">Event Handling </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006C4183"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">If the request is a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>, any event handlers are called</w:t></w:r><w:r w:rsidR="00B62DA3"><w:t>, such as</w:t></w:r><w:r><w:t xml:space="preserve"> button click events.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008464D8"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">Rendering </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006C4183"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>Before rendering, view state is saved for the page and all controls. Rendering is the process that creates the HTML that makes the page visible in</w:t></w:r><w:r w:rsidR="00B62DA3"><w:t xml:space="preserve"> a</w:t></w:r><w:r><w:t xml:space="preserve"> browser. Each control is responsible </w:t></w:r><w:r w:rsidR="00B62DA3"><w:t>for rendering</w:t></w:r><w:r><w:t xml:space="preserve"> itself. This </w:t></w:r><w:r w:rsidR="00AB3FD8"><w:t xml:space="preserve">feature and the extensible design time support </w:t></w:r><w:r><w:t xml:space="preserve">is a major </w:t></w:r><w:r w:rsidR="00AB3FD8"><w:t>opportunity</w:t></w:r><w:r w:rsidR="00A323B3"><w:t xml:space="preserve"> for</w:t></w:r><w:r w:rsidR="004A3FC5"><w:t xml:space="preserve"> third party control vendors.</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00AB3FD8"><w:t xml:space="preserve">Their </w:t></w:r><w:r><w:t xml:space="preserve">controls can </w:t></w:r><w:r w:rsidR="00AB3FD8"><w:t>encapsulate</w:t></w:r><w:r><w:t xml:space="preserve"> all </w:t></w:r><w:r w:rsidR="00AB3FD8"><w:t xml:space="preserve">the clever </w:t></w:r><w:r><w:t xml:space="preserve">design time </w:t></w:r><w:r w:rsidR="006C4183"><w:t xml:space="preserve">experience </w:t></w:r><w:r><w:t>and run time</w:t></w:r><w:r w:rsidR="006C4183"><w:t xml:space="preserve"> functionality</w:t></w:r><w:r><w:t xml:space="preserve"> with</w:t></w:r><w:r w:rsidR="00AB3FD8"><w:t>in</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00AB3FD8"><w:t xml:space="preserve">each </w:t></w:r><w:r><w:t xml:space="preserve">control. That means during the rendering phase, the page calls the </w:t></w:r><w:r w:rsidRPr="002F7A44"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Render</w:t></w:r><w:r><w:t xml:space="preserve"> method for each control, providing a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="006C4183" w:rsidRPr="006C4183"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>T</w:t></w:r><w:r w:rsidRPr="006C4183"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ext</w:t></w:r><w:r w:rsidR="006C4183" w:rsidRPr="006C4183"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>W</w:t></w:r><w:r w:rsidRPr="006C4183"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>riter</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="006C4183"><w:t xml:space="preserve">instance </w:t></w:r><w:r><w:t xml:space="preserve">that writes its output to the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="002F7A44"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OutputStream</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> of the page</w:t></w:r><w:r w:rsidR="006C4183"><w:t>’</w:t></w:r><w:r><w:t xml:space="preserve">s </w:t></w:r><w:r w:rsidRPr="002F7A44"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Response</w:t></w:r><w:r><w:t xml:space="preserve"> property. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="002F7A44"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">Unload </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006C4183"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Unload is called after the page has been fully rendered, sent to the client, and is ready to be discarded. At this point, page properties such as </w:t></w:r><w:r w:rsidRPr="002F7A44"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Response</w:t></w:r><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:r w:rsidRPr="002F7A44"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Request</w:t></w:r><w:r><w:t xml:space="preserve"> are unloaded and any cleanup is performed. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="002F7A44"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">Events </w:t></w:r><w:r w:rsidR="006C4183"><w:t>Fired Within the Life Cycle</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B4461B"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Within each stage of the life cycle of a page, the page raises events that you can handle to run your own code. For control events, you bind the event handler to the event, either declaratively using attributes such as </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="002F7A44"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>onclick</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">, or in code. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B4461B"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">Pages also support automatic event wire-up, meaning that ASP.NET looks for methods with particular names and automatically runs those methods when certain events are raised. If the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="002F7A44"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>AutoEventWireup</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> attribute of the </w:t></w:r><w:r w:rsidRPr="002F7A44"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>@Page</w:t></w:r><w:r><w:t xml:space="preserve"> directive is set to </w:t></w:r><w:r w:rsidRPr="006E4C31"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>true</w:t></w:r><w:r><w:t xml:space="preserve">, page events are automatically bound to methods that use the naming convention that follow the pattern </w:t></w:r><w:r w:rsidRPr="00B4461B"><w:t>Page_&lt;event&gt;</w:t></w:r><w:r><w:t xml:space="preserve">, such as </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="006E4C31"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Page_Load</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="006E4C31"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Page_Init</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B4461B"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The following table lists all </w:t></w:r><w:r w:rsidR="00240D91"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">page events. </w:t></w:r><w:proofErr w:type="gramStart"/><w:r><w:t xml:space="preserve">The </w:t></w:r><w:r w:rsidR="00407BC0"><w:t>”</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r w:rsidR="00407BC0"><w:t xml:space="preserve">Typical Use” </w:t></w:r><w:r w:rsidR="00407BC0"><w:rPr><w:rStyle w:val="Kommentarzeichen"/></w:rPr><w:commentReference w:id="15"/></w:r><w:r><w:t xml:space="preserve">column indicates the events you usually handle when developing pages and controls. The other </w:t></w:r><w:r w:rsidR="00AE2AE7"><w:t>events are less important but give</w:t></w:r><w:r><w:t xml:space="preserve"> you more control from the extensibility perspective, for instance when you create custom controls that require a very specific behavior.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="009C081F"><w:pPr><w:pStyle w:val="TableCaption"/></w:pPr><w:bookmarkStart w:id="16" w:name="_Ref219276276"/><w:bookmarkStart w:id="17" w:name="_Ref219276123"/><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Table </w:t></w:r><w:r w:rsidR="0051228A"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Table \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>2</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:bookmarkEnd w:id="16"/><w:r><w:t>. Usage of page events</w:t></w:r><w:bookmarkEnd w:id="17"/></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B4461B"><w:pPr><w:pStyle w:val="TableHead"/></w:pPr><w:r><w:t xml:space="preserve">Page Event </w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">Typical Use </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="006C4183" w:rsidP="006C4183"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>PreInit</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:tab/></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">Use this event </w:t></w:r><w:r><w:t>to c</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">heck the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="006C4183"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IsPostBack</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> property to determine whether this is the first time the page is being processed.</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="0073422D"><w:t>C</w:t></w:r><w:r w:rsidR="00165A64"><w:t>reate or re-create dynamic controls.</w:t></w:r><w:r><w:t xml:space="preserve"> You may also s</w:t></w:r><w:r w:rsidR="00165A64"><w:t>et master page</w:t></w:r><w:r><w:t>s</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and the </w:t></w:r><w:r w:rsidRPr="006C4183"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Theme</w:t></w:r><w:r><w:t xml:space="preserve"> property </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">dynamically. Read or set </w:t></w:r><w:r><w:t xml:space="preserve">any </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">profile property values. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B4461B"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>Init</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="006C4183"><w:tab/><w:t>Event is r</w:t></w:r><w:r><w:t>aised after all controls have been initialized and any skin settings have been applied. Use</w:t></w:r><w:r w:rsidR="00AE2AE7"><w:t xml:space="preserve"> this event to read or initiali</w:t></w:r><w:r><w:t xml:space="preserve">ze control properties. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B4461B"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>InitComplete</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="0013139A"><w:t>This event is r</w:t></w:r><w:r><w:t xml:space="preserve">aised by the Page object. Use this event for processing tasks that require all initialization be complete. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B4461B"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>PreLoad</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="0013139A"><w:tab/></w:r><w:r><w:t>Use this event if you need to perform processing on your page or control before the Load event. Before the Page instance raises this event, it loads view state for itself and all controls, and then processes any post-back data inclu</w:t></w:r><w:r w:rsidR="00AE2AE7"><w:t xml:space="preserve">ded with the </w:t></w:r><w:r w:rsidR="00AE2AE7" w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Request</w:t></w:r><w:r w:rsidR="00AE2AE7"><w:t xml:space="preserve"> instance. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B4461B"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r><w:t xml:space="preserve">Load </w:t></w:r><w:r w:rsidR="0013139A"><w:tab/></w:r><w:r><w:t xml:space="preserve">The Page calls the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnLoad</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event method on the </w:t></w:r><w:r w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Page</w:t></w:r><w:r><w:t>, then recursively does the same for each child control, which does the same for each of its child controls until the page and all controls are loaded. Use the</w:t></w:r><w:r w:rsidR="0013139A"><w:t xml:space="preserve"> overridden</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="0013139A" w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>On</w:t></w:r><w:r w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Load</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event method to set properties in controls and establish database connections. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B4461B"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r><w:t xml:space="preserve">Control events </w:t></w:r><w:r><w:tab/><w:t>Use th</w:t></w:r><w:r w:rsidR="0013139A"><w:t>ese</w:t></w:r><w:r><w:t xml:space="preserve"> events to handle specific control events, such as a Button control's Click event or a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>TextBox</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> control</w:t></w:r><w:r w:rsidR="00AE2AE7"><w:t>’</w:t></w:r><w:r><w:t xml:space="preserve">s Text-Changed event. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B4461B"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>LoadComplete</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="0013139A"><w:tab/></w:r><w:r><w:t xml:space="preserve">Use this event for tasks that require that all other controls on the page be loaded. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B4461B"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>PreRender</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="0013139A"><w:tab/></w:r><w:r><w:t xml:space="preserve">Before this event </w:t></w:r><w:r w:rsidR="0013139A"><w:t>occurs, t</w:t></w:r><w:r><w:t xml:space="preserve">he </w:t></w:r><w:r w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Page</w:t></w:r><w:r><w:t xml:space="preserve"> object calls </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>EnsureChildControls</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> for</w:t></w:r><w:r w:rsidR="0013139A"><w:t xml:space="preserve"> each control and for the page itself. </w:t></w:r><w:r><w:t xml:space="preserve">Each data bound control whose </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>DataSourceID</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> property is set calls its </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>DataBind</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method. The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>PreRender</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event occurs for each control on the page. Use the event to make final changes to the contents of the page or its controls. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B4461B"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>SaveStateComplete</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="0013139A"><w:tab/></w:r><w:r><w:t xml:space="preserve">Before this event occurs, </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> has been saved for the page and for all controls.</w:t></w:r><w:r w:rsidR="0013139A"><w:t xml:space="preserve"> Any changes to the page or con</w:t></w:r><w:r><w:t>trols at this point will be ignored.</w:t></w:r><w:r w:rsidR="0013139A"><w:t xml:space="preserve"> See </w:t></w:r><w:r w:rsidR="00AC7B6F"><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="0013139A"><w:t xml:space="preserve">section about </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="0013139A"><w:t xml:space="preserve"> later in this chapter to learn more about </w:t></w:r><w:r w:rsidR="00B718A6"><w:t xml:space="preserve">its </w:t></w:r><w:r w:rsidR="0013139A"><w:t xml:space="preserve">specific behavior. </w:t></w:r><w:r><w:t xml:space="preserve">Use this event </w:t></w:r><w:r w:rsidR="00AC7B6F"><w:t xml:space="preserve">to </w:t></w:r><w:r><w:t xml:space="preserve">perform tasks that require view state to be saved, but that do not make any changes to controls. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0013139A"><w:pPr><w:pStyle w:val="TableTextLast"/></w:pPr><w:r><w:t xml:space="preserve">Unload </w:t></w:r><w:r w:rsidR="0013139A"><w:tab/></w:r><w:r><w:t>This event occurs for each control and</w:t></w:r><w:r w:rsidR="00AC7B6F"><w:t>,</w:t></w:r><w:r w:rsidR="0029321B"><w:t xml:space="preserve"> when all control events are done</w:t></w:r><w:r w:rsidR="00AC7B6F"><w:t>,</w:t></w:r><w:r w:rsidR="0029321B"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>for the page. In controls, use this event to do</w:t></w:r><w:r w:rsidR="0029321B"><w:t xml:space="preserve"> final cleanup for specific actions</w:t></w:r><w:r><w:t>, such as closing database connections.</w:t></w:r><w:r w:rsidR="0013139A"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">For the page itself, use this event to do final cleanup work, such as closing open files </w:t></w:r><w:r w:rsidR="0029321B"><w:t>and database connections, fi</w:t></w:r><w:r><w:t xml:space="preserve">nishing up logging or other request-specific tasks. </w:t></w:r></w:p><w:p w:rsidR="0029321B" w:rsidRDefault="00AE2AE7" w:rsidP="0029321B"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">If the request is a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>, the values of the controls have not yet been restored from view state</w:t></w:r><w:r w:rsidR="0029321B"><w:t xml:space="preserve"> during </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="0029321B" w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>PreInit</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="0029321B"><w:t xml:space="preserve"> state</w:t></w:r><w:r><w:t xml:space="preserve">. If you set a control property at this stage, its value might be overwritten in the next event. </w:t></w:r></w:p><w:p w:rsidR="0029321B" w:rsidRDefault="0029321B" w:rsidP="0029321B"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t>Again</w:t></w:r><w:r w:rsidR="00AC7B6F"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> i</w:t></w:r><w:r w:rsidR="00AE2AE7"><w:t xml:space="preserve">n a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00AE2AE7"><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00AE2AE7"><w:t xml:space="preserve"> request</w:t></w:r><w:r><w:t xml:space="preserve"> during </w:t></w:r><w:r w:rsidRPr="0029321B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Load</w:t></w:r><w:r><w:t xml:space="preserve"> event</w:t></w:r><w:r w:rsidR="00AE2AE7"><w:t xml:space="preserve">, if </w:t></w:r><w:r><w:t>the page contains validator con</w:t></w:r><w:r w:rsidR="00AE2AE7"><w:t xml:space="preserve">trols, check the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00AE2AE7" w:rsidRPr="0029321B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IsValid</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00AE2AE7"><w:t xml:space="preserve"> property of the </w:t></w:r><w:r w:rsidR="00AE2AE7" w:rsidRPr="0029321B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Page</w:t></w:r><w:r w:rsidR="00AE2AE7"><w:t xml:space="preserve"> and of individual validation controls before performing any processing. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="0013139A" w:rsidRDefault="00165A64" w:rsidP="0013139A"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">During the </w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="0029321B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>U</w:t></w:r><w:r w:rsidRPr="0029321B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>nload</w:t></w:r><w:r><w:t xml:space="preserve"> stage, the page and its controls have been rendered, so you cannot make further changes to the response stream. If you attempt to call a method such as the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0029321B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Response.Write</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method, the page </w:t></w:r><w:r w:rsidR="0029321B"><w:t>will throw an excep</w:t></w:r><w:r><w:t xml:space="preserve">tion. </w:t></w:r><w:r w:rsidR="0013139A"><w:t xml:space="preserve">The render process itself does not have an event; it happens after </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="0013139A" w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>PreRender</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="0013139A"><w:t xml:space="preserve"> and before </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="0013139A" w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>UnLoad</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="0013139A"><w:t xml:space="preserve"> and can be intercepted by overwriting the </w:t></w:r><w:r w:rsidR="0013139A" w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Render</w:t></w:r><w:r w:rsidR="0013139A"><w:t xml:space="preserve"> method.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B4461B"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">Additional Page Life Cycle Considerations </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00E532FB" w:rsidP="00201485"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Server </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">controls have their own life cycle that is similar to the page life cycle. For example, a control’s </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00754A29"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Init</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> and </w:t></w:r><w:r w:rsidR="00165A64" w:rsidRPr="00754A29"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Load</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> events occur during the corresponding page events. Although both </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00754A29"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Init</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> and </w:t></w:r><w:r w:rsidR="00165A64" w:rsidRPr="00754A29"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Load</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> recursively occur on each control, they happen in reverse order. The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00754A29"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Init</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> and also the </w:t></w:r><w:r w:rsidR="00165A64" w:rsidRPr="00754A29"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Unload</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> event for each child control occur before the corresponding event is raised for its container. This is clearly the expected behavior, because the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00754A29"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Init</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> event on page level indicates that all subsequent </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00754A29"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Init</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> events are </w:t></w:r><w:r w:rsidR="00B718A6"><w:t>completed</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. You may read the event as “Is </w:t></w:r><w:r w:rsidR="00B4388C"><w:t>Initialized</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">”. However, the </w:t></w:r><w:r w:rsidR="00165A64" w:rsidRPr="00754A29"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Load</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> event for a container occurs before the </w:t></w:r><w:r w:rsidR="00722667" w:rsidRPr="00722667"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Load</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> events for its child controls, which is the opposite behavior. </w:t></w:r><w:r w:rsidR="00B718A6"><w:t>This is so that you can</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> have access to the process before any other processing takes place. </w:t></w:r><w:r w:rsidR="00407BC0"><w:t xml:space="preserve">From perspective of </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00407BC0" w:rsidRPr="00201485"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Init</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00407BC0"><w:t xml:space="preserve"> event it doesn’t make sense to do anything before it appears, because there is nothing you can access in your code.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201485"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">You can customize the appearance or content of a control by handling the events for the control, such as the </w:t></w:r><w:r w:rsidRPr="00201485"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Click</w:t></w:r><w:r><w:t xml:space="preserve"> event for the </w:t></w:r><w:r w:rsidRPr="00201485"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Button</w:t></w:r><w:r><w:t xml:space="preserve"> control</w:t></w:r><w:r w:rsidR="00B718A6"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> and the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00201485"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>SelectedIndexChanged</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event for the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00201485"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ListBox</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> control. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201485"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">When inheriting a class from the </w:t></w:r><w:r w:rsidRPr="00201485"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Page</w:t></w:r><w:r><w:t xml:space="preserve"> class, in addition to handling events raised by the page, you can override methods from the page’s base class. It’s a common technique to create </w:t></w:r><w:r w:rsidR="007C0F20"><w:t xml:space="preserve">your </w:t></w:r><w:r><w:t xml:space="preserve">own base page classes that derive from </w:t></w:r><w:r w:rsidRPr="00201485"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Page</w:t></w:r><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:r w:rsidR="00B718A6"><w:t xml:space="preserve">to </w:t></w:r><w:r><w:t xml:space="preserve">handle common tasks there. For example, you can override the page’s </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00201485"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>InitializeCulture</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method to dynamically set culture information. Overriding event handlers or attaching events are two different methods to perform almost </w:t></w:r><w:r w:rsidR="007C0F20"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">same action. </w:t></w:r><w:r w:rsidR="007C0F20"><w:t xml:space="preserve">If you use </w:t></w:r><w:r><w:t xml:space="preserve">the Page_&lt;event&gt; syntax you don’t need to handle the base </w:t></w:r><w:r w:rsidR="00B4388C"><w:t>implementation</w:t></w:r><w:r><w:t xml:space="preserve">. However, if you override the method you must handle the base implementation and therefore call the base method. You can do this at the beginning, at the end, or </w:t></w:r><w:r w:rsidR="00425233"><w:t xml:space="preserve">anywhere </w:t></w:r><w:r><w:t>in between.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0043449F"><w:pPr><w:pStyle w:val="berschrift2"/></w:pPr><w:r><w:t>Dynamic Controls and Data Binding Events</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="0043449F" w:rsidRDefault="00165A64" w:rsidP="0043449F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The page and control life cycles define a chain of events to give you maximum control over the creation and runtime of the control. However, the control handling has more possibilities </w:t></w:r><w:r w:rsidR="00E827D2"><w:t xml:space="preserve">than </w:t></w:r><w:r><w:t xml:space="preserve">you can achieve with such a </w:t></w:r><w:r w:rsidR="00E827D2"><w:t>straight</w:t></w:r><w:r w:rsidR="00407BC0"><w:t>forward</w:t></w:r><w:r w:rsidR="00E827D2"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">model. You will see a different behavior when adding controls dynamically. </w:t></w:r><w:r w:rsidR="00407BC0"><w:t>Furthermore d</w:t></w:r><w:r><w:t>ata-bound controls work internally</w:t></w:r><w:r w:rsidR="00407BC0"><w:t xml:space="preserve"> other than this way</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0043449F"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t xml:space="preserve">Dynamic Control Events </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00170641"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The page life cycle and control life cycle </w:t></w:r><w:r w:rsidR="00674328"><w:t xml:space="preserve">are </w:t></w:r><w:r><w:t xml:space="preserve">very similar because of the nature of a </w:t></w:r><w:r w:rsidRPr="00A43EA2"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Page</w:t></w:r><w:r><w:t xml:space="preserve"> as a class derived from </w:t></w:r><w:r w:rsidRPr="00A43EA2"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Control</w:t></w:r><w:r><w:t>. However, you can add controls dynamically</w:t></w:r><w:r w:rsidR="00674328"><w:t>—</w:t></w:r><w:r><w:t xml:space="preserve">a feature </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">which </w:t></w:r><w:r><w:t xml:space="preserve">doesn’t make sense for pages. You might assume that adding controls is </w:t></w:r><w:r w:rsidR="00674328"><w:t xml:space="preserve">not </w:t></w:r><w:r><w:t xml:space="preserve">very common in </w:t></w:r><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">ASP.NET. </w:t></w:r><w:r w:rsidR="00397D08"><w:t>However</w:t></w:r><w:r w:rsidR="0013139A"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> imagine that declaratively authored controls within templates of data-bound controls are treated like dynamically added controls. Their events are </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">not </w:t></w:r><w:r><w:t xml:space="preserve">initially synchronized with </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">other controls on the page. The lifetime of such controls begins with their </w:t></w:r><w:r w:rsidR="00407BC0"><w:t xml:space="preserve">instantiation; </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">they </w:t></w:r><w:r><w:t xml:space="preserve">raise the life cycle events one after the other until </w:t></w:r><w:r w:rsidR="00407BC0"><w:t>the control</w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve"> has</w:t></w:r><w:r><w:t xml:space="preserve"> caught up to the event during which it was added to the Controls collection.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00170641"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>Usually this has no implications for developers. Unless you have nested data-bound controls</w:t></w:r><w:r w:rsidR="001F47C4"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> you don’t need to be concerned about this. For nested data-bound controls</w:t></w:r><w:r w:rsidR="001F47C4"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> this behavior is a bit different.</w:t></w:r><w:r w:rsidRPr="00170641"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>If a child control has been data bound, but its container control has not yet been bound, the data in the child control and the data in its container control can be out of sync.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0043449F"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">Imagine </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">that </w:t></w:r><w:r><w:t xml:space="preserve">you have a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>GridView</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> control and </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">that </w:t></w:r><w:r><w:t xml:space="preserve">each row contains a bound </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>DropDownList</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> control. Furthermore</w:t></w:r><w:r w:rsidR="004021A0"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> assume that the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00E17B58"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>DropDownList</w:t></w:r><w:r w:rsidRPr="0013139A"><w:t>’s</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> data properties</w:t></w:r><w:r w:rsidR="00860951"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00860951"><w:t xml:space="preserve">such as </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00E17B58"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>DataSourceID</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00860951"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> are set declaratively. The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00E17B58"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>DropDownList</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> will now bind to its </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>datasource</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> when the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00E17B58"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>DataBinding</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event of the containing </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00E17B58"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>GridView</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> row occurs. However, the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>GridView</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> might not yet have raised its </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>RowDataBound</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. In that case the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0013139A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>DropDownList</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and containing control are out of sync. To avoid this you simply put the data source control—the one you have set in the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0043449F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>DataSourceID</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> property—within the same template. Additionally, remove the declarative assignment and set it programmatically during the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0043449F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>RowDataBound</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. In this event the container’s data are bound and both controls can stay in sync. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0043449F"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t xml:space="preserve">Data Binding Events for Data-Bound Controls </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0043449F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>To help you understand the relationship between the page life cycle and data binding events, the following table lists data-related events in data-bound controls. Remember that not all controls support all events shown in the table.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B2492"><w:pPr><w:pStyle w:val="NoteTipCaution"/></w:pPr><w:r><w:t>Note:</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">In the description of data-bound control’s behavior I </w:t></w:r><w:r w:rsidR="007730B5"><w:t xml:space="preserve">often </w:t></w:r><w:r><w:t>refer to</w:t></w:r><w:r w:rsidR="007730B5"><w:t xml:space="preserve"> the</w:t></w:r><w:r><w:t xml:space="preserve"> term “containing control”. If there is no containing control this assumes that the container is the page.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B2492"><w:pPr><w:pStyle w:val="TableCaption"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Table </w:t></w:r><w:r w:rsidR="0051228A"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Table \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>3</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. Relationship between life cycle events and data-bound events</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="000B2492" w:rsidRDefault="00165A64" w:rsidP="000B2492"><w:pPr><w:pStyle w:val="TableHead"/></w:pPr><w:r><w:t>Event</w:t></w:r><w:r><w:tab/><w:t>Typical behavior</w:t></w:r><w:r><w:tab/><w:t>Usage hints</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B2492"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>DataBinding</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:tab/></w:r><w:proofErr w:type="gramStart"/><w:r><w:t>Raised</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t xml:space="preserve"> before </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00407BC0"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>PreRender</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> of containing control. This is the beginning of binding procedure.</w:t></w:r><w:r><w:tab/><w:t>Open database connections here, if required.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B2492"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>RowCreated</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:tab/><w:t>Raised after each row gets bound.</w:t></w:r><w:r><w:tab/><w:t>Manipulate content that does not depend on data binding.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B2492"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>ItemCreated</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:tab/><w:t>Raised after each item gets bound.</w:t></w:r><w:r><w:tab/><w:t>Manipulate content that does not depend on data binding.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B2492"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>RowDataBound</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:tab/><w:t>Bound data is now available for the row.</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">Format data, </w:t></w:r><w:r w:rsidR="00407BC0"><w:t>get</w:t></w:r><w:r><w:t xml:space="preserve"> and filter child rows or related data.</w:t></w:r><w:r><w:tab/></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B2492"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>ItemDataBound</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:tab/><w:t>Bound data is now available for the item.</w:t></w:r><w:r w:rsidRPr="00243420"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:tab/><w:t>Format data, pull and filter child rows or related data.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00243420"><w:pPr><w:pStyle w:val="TableTextLast"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>DataBound</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:tab/><w:t>Marks the end of binding operation. All rows are bound now.</w:t></w:r><w:r><w:tab/><w:t>Do any action that requires all data available.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00243420"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">Login Control Events </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00243420"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>The login controls</w:t></w:r><w:r w:rsidR="001F47C4"><w:t>, which handle login and authentication,</w:t></w:r><w:r><w:t xml:space="preserve"> are </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">highly </w:t></w:r><w:r><w:t>sophisticated and powerful. In most scenarios</w:t></w:r><w:r w:rsidR="001F47C4"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the controls work well out</w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>of</w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>the</w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">box or just need some configuration using the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>web.config</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> file. However, if you need to change or customize the behavior or extend the available features</w:t></w:r><w:r w:rsidR="001F47C4"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> you’ll need to know the events fired during their life cycle.  </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="009C015D"><w:pPr><w:pStyle w:val="TableCaption"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Table </w:t></w:r><w:r w:rsidR="008834BC"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Table \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>4</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. Relationship between life cycle events and logging</w:t></w:r><w:r w:rsidR="008834BC"><w:t>-in</w:t></w:r><w:r><w:t xml:space="preserve"> events</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="000B2492" w:rsidRDefault="00165A64" w:rsidP="009C015D"><w:pPr><w:pStyle w:val="TableHead"/></w:pPr><w:r><w:t>Event</w:t></w:r><w:r><w:tab/><w:t>Typical behavior</w:t></w:r><w:r><w:tab/><w:t>Usage hints</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="009C015D"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>LoggingIn</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:tab/></w:r><w:proofErr w:type="gramStart"/><w:r><w:t>Raised</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t xml:space="preserve"> during </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> after </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>LoadComplete</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>.</w:t></w:r><w:r><w:tab/><w:t>Tasks required before the login procedure, such as opening a database connection, if required.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="009C015D"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:r><w:t>Authenticate</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">Raised next after </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>LoggingIn</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>.</w:t></w:r><w:r><w:tab/><w:t>Customize the authentication behavior itself.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="009C015D"><w:pPr><w:pStyle w:val="TableText"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>LoggedIn</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:tab/></w:r><w:proofErr w:type="gramStart"/><w:r><w:t>Raised</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t xml:space="preserve"> after authentication.</w:t></w:r><w:r><w:tab/><w:t>Action required after successful authentication, such as redirect to another page.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="005073F5"><w:pPr><w:pStyle w:val="TableTextLast"/></w:pPr><w:proofErr w:type="spellStart"/><w:r><w:t>LoginError</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:tab/></w:r><w:proofErr w:type="gramStart"/><w:r><w:t>Raised</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t xml:space="preserve"> after failed authentication.</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">Do any action to handle failed authentication, </w:t></w:r><w:r w:rsidR="008834BC"><w:t xml:space="preserve">such as </w:t></w:r><w:r><w:t>displaying instructions.</w:t></w:r><w:r><w:tab/></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00AE2AE7"><w:pPr><w:pStyle w:val="berschrift2"/></w:pPr><w:r><w:t>View</w:t></w:r><w:r w:rsidR="008834BC"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>State</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B76E8"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The ASP.NET </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> is a mechanism to track changes of </w:t></w:r><w:r w:rsidR="007462F6"><w:t>t</w:t></w:r><w:r><w:t xml:space="preserve">he state of pages from one </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> to </w:t></w:r><w:r w:rsidR="00B4388C"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">next. We call it </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> whenever a page send</w:t></w:r><w:r w:rsidR="008834BC"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> the content</w:t></w:r><w:r w:rsidR="008834BC"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> of a form back to the server. The name comes from </w:t></w:r><w:r w:rsidR="008834BC"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">underlying HTTP command POST </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">that </w:t></w:r><w:r><w:t xml:space="preserve">we use and the way </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">that </w:t></w:r><w:r><w:t>it takes</w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve"> the contents</w:t></w:r><w:r><w:t xml:space="preserve"> back to the server. </w:t></w:r><w:r w:rsidR="001F47C4"><w:t>V</w:t></w:r><w:r w:rsidR="0009536C"><w:t>iew state</w:t></w:r><w:r><w:t xml:space="preserve"> is turned on </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">by default </w:t></w:r><w:r><w:t xml:space="preserve">and most developers don’t care about it. </w:t></w:r><w:r w:rsidR="001F47C4"><w:t>It</w:t></w:r><w:r><w:t xml:space="preserve"> contains the values of properties of controls changed since </w:t></w:r><w:r w:rsidR="00B545A5"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">last page cycle and is stored in a serialized and encrypted </w:t></w:r><w:r w:rsidR="00B545A5"><w:t xml:space="preserve">format </w:t></w:r><w:r><w:t xml:space="preserve">within the page. Each </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> sends all the information stored in it back to </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>server. As you may know</w:t></w:r><w:r w:rsidR="00B545A5"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00B545A5"><w:t xml:space="preserve">using view state in the default manner can </w:t></w:r><w:r><w:t xml:space="preserve">lead to huge pages that consume a lot </w:t></w:r><w:r w:rsidR="00B545A5"><w:t xml:space="preserve">of </w:t></w:r><w:r w:rsidR="00B4388C"><w:t>bandwidth</w:t></w:r><w:r><w:t xml:space="preserve">. It’s not easy to understand </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">view state </w:t></w:r><w:r><w:t>completely</w:t></w:r><w:r w:rsidR="001F47C4"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> and simply disabling </w:t></w:r><w:r w:rsidR="001F47C4"><w:t>it</w:t></w:r><w:r><w:t xml:space="preserve"> leads to control</w:t></w:r><w:r w:rsidR="007462F6"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> not working or </w:t></w:r><w:r w:rsidR="00B545A5"><w:t xml:space="preserve">having </w:t></w:r><w:r><w:t xml:space="preserve">fewer features. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007462F6"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>Th</w:t></w:r><w:r w:rsidR="007462F6"><w:t>e</w:t></w:r><w:r><w:t xml:space="preserve"> real internal behavior is </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">confusing and </w:t></w:r><w:r><w:t>hard to understand. As long as you deal with simple applications</w:t></w:r><w:r w:rsidR="001F47C4"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">a basic </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="001F47C4"><w:t>idea</w:t></w:r><w:r><w:t>might</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> be </w:t></w:r><w:r w:rsidR="001F47C4"><w:t>enough</w:t></w:r><w:r><w:t xml:space="preserve">. But when it comes to </w:t></w:r><w:r w:rsidR="00CE5190"><w:t xml:space="preserve">your </w:t></w:r><w:r><w:t>own controls, complex pages, or using AJAX</w:t></w:r><w:r w:rsidR="001F47C4"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> a good understanding is </w:t></w:r><w:r w:rsidR="007462F6"><w:t>a prerequisite</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B76E8"><w:pPr><w:pStyle w:val="berschrift2"/></w:pPr><w:r><w:t xml:space="preserve">Why </w:t></w:r><w:r w:rsidR="00407BC0"><w:t xml:space="preserve">Understanding View State </w:t></w:r><w:r w:rsidR="00CE5190"><w:t>is</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00407BC0"><w:t>Important</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="005073F5"><w:r><w:t xml:space="preserve">Misunderstanding </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> lead</w:t></w:r><w:r w:rsidR="001F47C4"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> to leaking of sensitive data, being exploite</w:t></w:r><w:r w:rsidR="00CE5190"><w:t>d</w:t></w:r><w:r><w:t xml:space="preserve"> by </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> attacks, poor page performance, poor scalability, and headache</w:t></w:r><w:r w:rsidR="00CE5190"><w:t>s</w:t></w:r><w:r><w:t>. Whatever you want to achieve with your application, the</w:t></w:r><w:r w:rsidR="00FF0191"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00FF0191"><w:instrText xml:space="preserve"> REF _Ref221866201 \h </w:instrText></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="00FF0191" w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="00FF0191"><w:t>1-</w:t></w:r><w:r w:rsidR="00FF0191"><w:rPr><w:noProof/></w:rPr><w:t>11</w:t></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t xml:space="preserve"> shows </w:t></w:r><w:r w:rsidR="001F47C4"><w:t xml:space="preserve">the source of </w:t></w:r><w:r><w:t>a page</w:t></w:r><w:r w:rsidR="00FF0191"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>which we never want to see.</w:t></w:r></w:p><w:p w:rsidR="00D61211" w:rsidRDefault="00D61211" w:rsidP="00D61211"><w:pPr><w:pStyle w:val="Figure"/></w:pPr><w:r><w:rPr><w:noProof/><w:lang w:val="de-DE" w:eastAsia="de-DE"/></w:rPr><w:lastRenderedPageBreak/><w:drawing><wp:inline distT="0" distB="0" distL="0" distR="0" wp14:anchorId="047C3BCB" wp14:editId="2D0E9724"><wp:extent cx="5486400" cy="1435100"/><wp:effectExtent l="0" t="0" r="0" b="0"/><wp:docPr id="21" name="ASPEXTf0113.tif" descr="D:\UserData\jkrause\Documents\Meine Daten\Bücher\Fachbuchprojekte\ASP.NET Extensibility\Images\ASPEXTf0113.tif"/><wp:cNvGraphicFramePr><a:graphicFrameLocks xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" noChangeAspect="1"/></wp:cNvGraphicFramePr><a:graphic xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:nvPicPr><pic:cNvPr id="0" name="ASPEXTf0113.tif"/><pic:cNvPicPr/></pic:nvPicPr><pic:blipFill><a:blip r:link="rId22"/><a:stretch><a:fillRect/></a:stretch></pic:blipFill><pic:spPr><a:xfrm><a:off x="0" y="0"/><a:ext cx="5486400" cy="1435100"/></a:xfrm><a:prstGeom prst="rect"><a:avLst/></a:prstGeom></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F1361C" w:rsidRDefault="00D61211" w:rsidP="00D61211"><w:pPr><w:pStyle w:val="Production"/></w:pPr><w:r><w:t xml:space="preserve">Insert </w:t></w:r><w:r w:rsidRPr="00D61211"><w:t>ASPEXTf0113.tif</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B76E8"><w:pPr><w:pStyle w:val="FigureCaption"/></w:pPr><w:bookmarkStart w:id="18" w:name="_Ref221866201"/><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="00CE5190"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Figure \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="00FF0191"><w:t>11</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:bookmarkEnd w:id="18"/><w:r><w:t xml:space="preserve">.The </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t>’s form field</w:t></w:r><w:r w:rsidR="003F4E61"><w:t xml:space="preserve"> could grow </w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="001F47C4" w:rsidP="000B76E8"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>S</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">imply disabling </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> will not help, </w:t></w:r><w:r><w:t xml:space="preserve">however, </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">because you </w:t></w:r><w:r><w:t xml:space="preserve">will </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">probably lose some features </w:t></w:r><w:r><w:t xml:space="preserve">that </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">you need and </w:t></w:r><w:r><w:t>like</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. In fact, there is nothing wrong with </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="007462F6"><w:t>;</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> it’s just </w:t></w:r><w:r><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">wrong or </w:t></w:r><w:r w:rsidR="00F062EC"><w:t>in</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">appropriate usage </w:t></w:r><w:r><w:t xml:space="preserve">of it </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">that causes problems. Now let’s move on by starting back </w:t></w:r><w:r><w:t xml:space="preserve">at </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">the beginning. What does </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> do?</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B76E8"><w:pPr><w:pStyle w:val="NumListFirst"/></w:pPr><w:r><w:t>1.</w:t></w:r><w:r><w:tab/><w:t>Stores values of control’s properties by keys</w:t></w:r><w:r w:rsidR="00EF0458"><w:t>,</w:t></w:r><w:r w:rsidR="004C54F9"><w:t xml:space="preserve"> similar to a </w:t></w:r><w:r w:rsidR="00EF0458"><w:t>h</w:t></w:r><w:r w:rsidR="004C54F9"><w:t>ash</w:t></w:r><w:r w:rsidR="00EF0458"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="004C54F9"><w:t>table</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B76E8"><w:pPr><w:pStyle w:val="NumList"/></w:pPr><w:r><w:t>2.</w:t></w:r><w:r><w:tab/><w:t>Track</w:t></w:r><w:r w:rsidR="00F062EC"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> changes to initial values</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B76E8"><w:pPr><w:pStyle w:val="NumList"/></w:pPr><w:r><w:t>3.</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">Serializes and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>deserializes</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00F062EC"><w:t xml:space="preserve">a </w:t></w:r><w:r><w:t>saved dictionary in a hidden form field</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B76E8"><w:pPr><w:pStyle w:val="NumListLast"/></w:pPr><w:r><w:t>4.</w:t></w:r><w:r><w:tab/></w:r><w:r w:rsidR="004C54F9"><w:t>R</w:t></w:r><w:r><w:t>estores stored values into control’s properties</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B76E8"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00F062EC"><w:t>These features are</w:t></w:r><w:r><w:t xml:space="preserve"> well </w:t></w:r><w:r w:rsidR="007462F6"><w:t>known. Much more important is</w:t></w:r><w:r><w:t xml:space="preserve"> what the </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="001F47C4"><w:t>does not do</w:t></w:r><w:r><w:t>:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B76E8"><w:pPr><w:pStyle w:val="NumListFirst"/></w:pPr><w:r><w:t>1.</w:t></w:r><w:r><w:tab/><w:t>Retain the state of class members</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B76E8"><w:pPr><w:pStyle w:val="NumList"/></w:pPr><w:r><w:t>2.</w:t></w:r><w:r><w:tab/><w:t>Remember state information across page loads (page reload</w:t></w:r><w:r w:rsidR="00FF0191"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> by GET request)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B76E8"><w:pPr><w:pStyle w:val="NumList"/></w:pPr><w:r><w:t>3.</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">Avoid the need to </w:t></w:r><w:r w:rsidRPr="000B76E8"><w:t>repopulate</w:t></w:r><w:r><w:t xml:space="preserve"> data on every request</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="000B76E8"><w:pPr><w:pStyle w:val="NumListLast"/></w:pPr><w:r><w:t>4.</w:t></w:r><w:r><w:tab/></w:r><w:r w:rsidR="00F062EC"><w:t xml:space="preserve">Hold </w:t></w:r><w:r><w:t>data in controls that are posted back</w:t></w:r><w:r w:rsidR="00F062EC"><w:t>—</w:t></w:r><w:r w:rsidR="004C54F9"><w:t>the so</w:t></w:r><w:r w:rsidR="00F062EC"><w:t>-</w:t></w:r><w:r w:rsidR="004C54F9"><w:t>called sticky form beha</w:t></w:r><w:r><w:t>vior</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00683C75"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The last </w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">bullet point </w:t></w:r><w:r><w:t xml:space="preserve">is probably the most confusing here. </w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">Many </w:t></w:r><w:r><w:t xml:space="preserve">developers think that this </w:t></w:r><w:r w:rsidR="00A06552"><w:t>is</w:t></w:r><w:r><w:t xml:space="preserve"> the only task </w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">that </w:t></w:r><w:r><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> has to </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>do.</w:t></w:r><w:r w:rsidR="00A06552"><w:t>Although</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> the </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> is involved in the process </w:t></w:r><w:r w:rsidR="00A06552"><w:t>of holding the</w:t></w:r><w:r><w:t xml:space="preserve"> control’s visible </w:t></w:r><w:r w:rsidR="00407BC0"><w:t>data;</w:t></w:r><w:r><w:t xml:space="preserve"> it is not the originator of the process (</w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">that would be </w:t></w:r><w:r><w:t>the control state).</w:t></w:r></w:p><w:p w:rsidR="007462F6" w:rsidRDefault="007462F6" w:rsidP="007462F6"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">What </w:t></w:r><w:r w:rsidR="00407BC0"><w:t xml:space="preserve">View State is </w:t></w:r><w:proofErr w:type="gramStart"/><w:r w:rsidR="00407BC0"><w:t>Supposed</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r w:rsidR="00407BC0"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">to </w:t></w:r><w:r w:rsidR="00407BC0"><w:t>Do</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00683C75"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">Before we start looking into what </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> does exactly, some basic features should be reviewed. </w:t></w:r></w:p><w:p w:rsidR="00407BC0" w:rsidRDefault="00407BC0" w:rsidP="00407BC0"><w:pPr><w:pStyle w:val="BulletFirst"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t>View state stores values</w:t></w:r></w:p><w:p w:rsidR="00407BC0" w:rsidRDefault="00407BC0" w:rsidP="00407BC0"><w:pPr><w:pStyle w:val="Bullet"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t>View state tracks changes</w:t></w:r></w:p><w:p w:rsidR="00407BC0" w:rsidRDefault="00407BC0" w:rsidP="00407BC0"><w:pPr><w:pStyle w:val="Bullet"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">View state serializes and </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>deserializes</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> data</w:t></w:r></w:p><w:p w:rsidR="00407BC0" w:rsidRDefault="00407BC0" w:rsidP="00407BC0"><w:pPr><w:pStyle w:val="BulletLast"/></w:pPr><w:r><w:tab/><w:t>*</w:t></w:r><w:r><w:tab/><w:t>View state restores data</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00870F5F" w:rsidP="00683C75"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>V</w:t></w:r><w:r w:rsidR="00165A64"><w:t>iew</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">state is held in a hidden field with the name </w:t></w:r><w:r w:rsidR="00165A64" w:rsidRPr="003F4E61"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>__VIEWSTATE</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. </w:t></w:r><w:r><w:t>“</w:t></w:r><w:r w:rsidR="00165A64"><w:t>Hidden</w:t></w:r><w:r><w:t>”</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> means that the browser does not render the field, but the field itself and its content </w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">are </w:t></w:r><w:r w:rsidR="00165A64"><w:t>visible in the page’s source. It needs the bandwidth twice</w:t></w:r><w:r><w:t xml:space="preserve">—the </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">first time when the page is </w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">sent </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">to the browser and </w:t></w:r><w:r><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">second time when the browser sends the page back </w:t></w:r><w:r><w:t>(</w:t></w:r><w:r w:rsidR="00165A64"><w:t>that is</w:t></w:r><w:r><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">when </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64"><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> happens</w:t></w:r><w:r w:rsidR="00F4781E"><w:t>)</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. A </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64"><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">occurs </w:t></w:r><w:r w:rsidR="00165A64"><w:t>very frequently when a user navigates within the application</w:t></w:r><w:r w:rsidR="00A06552"><w:t>;</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> unless you use hyperlinks</w:t></w:r><w:r w:rsidR="00F4781E"><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> almost all actions </w:t></w:r><w:r w:rsidR="00F4781E"><w:t xml:space="preserve">are </w:t></w:r><w:r w:rsidR="00165A64"><w:t>based on a form being sent back.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00683C75"><w:pPr><w:pStyle w:val="berschrift2"/></w:pPr><w:r><w:t xml:space="preserve">The </w:t></w:r><w:r w:rsidR="003F4E61"><w:t>Page Cycle from the View State Perspective</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00683C75"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>The page cycle is very important to understand</w:t></w:r><w:r w:rsidR="00021479"><w:t>ing</w:t></w:r><w:r><w:t xml:space="preserve"> view</w:t></w:r><w:r w:rsidR="00021479"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>state completely</w:t></w:r><w:r w:rsidR="003F4E61"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00A06552"><w:t>as</w:t></w:r><w:r><w:t xml:space="preserve"> several levels of the cycle treat view</w:t></w:r><w:r w:rsidR="00021479"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">state explicitly. You </w:t></w:r><w:r w:rsidR="00021479"><w:t xml:space="preserve">can </w:t></w:r><w:r><w:t>refer to</w:t></w:r><w:r w:rsidR="007462F6"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00021479"><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="007462F6"><w:t xml:space="preserve">previous section </w:t></w:r><w:r><w:t xml:space="preserve">to get </w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">an idea of the </w:t></w:r><w:r><w:t xml:space="preserve">page cycle in a nutshell. In this section I </w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">will </w:t></w:r><w:r><w:t>repeat the major steps that actually handle view</w:t></w:r><w:r w:rsidR="00021479"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>state.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00683C75"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">Each time the server </w:t></w:r><w:r w:rsidR="00503F2D"><w:t xml:space="preserve">receives </w:t></w:r><w:r><w:t xml:space="preserve">a request for an </w:t></w:r><w:r w:rsidR="00564F70"><w:t>.</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>aspx</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> page it will be processed by the ASP.NET engine through a specific number of steps. Th</w:t></w:r><w:r w:rsidR="00EF0458"><w:t>ese</w:t></w:r><w:r><w:t xml:space="preserve"> include </w:t></w:r><w:r w:rsidR="00EF0458"><w:t xml:space="preserve">checking </w:t></w:r><w:r><w:t xml:space="preserve">access security and restoring </w:t></w:r><w:r w:rsidR="00A06552"><w:t>the</w:t></w:r><w:r><w:t xml:space="preserve"> session state. At the end of the process the engine creates a class that consists of the markup and code-behind</w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">. This generates </w:t></w:r><w:r><w:t xml:space="preserve">an instance of that class </w:t></w:r><w:r w:rsidR="00A06552"><w:t>which becomes</w:t></w:r><w:r><w:t xml:space="preserve"> it</w:t></w:r><w:r w:rsidR="00503F2D"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00683C75"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ProcessRequest</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00683C75"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r w:rsidRPr="00683C75"><w:t xml:space="preserve">The </w:t></w:r><w:r w:rsidR="00B44084"><w:t xml:space="preserve">page </w:t></w:r><w:r w:rsidRPr="00683C75"><w:t xml:space="preserve">life cycle begins with the call to this method. </w:t></w:r><w:r><w:t>It follows the initialization of the controls of the page and life cycle phases</w:t></w:r><w:r w:rsidR="00EE783D"><w:t xml:space="preserve"> of those controls</w:t></w:r><w:r><w:t xml:space="preserve"> begin. This includes the processing of the view</w:t></w:r><w:r w:rsidR="00B44084"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">state, handling of </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> data and related events and finally the processing of HTML content. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00DE306B" w:rsidRDefault="00165A64" w:rsidP="00DE306B"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r w:rsidRPr="00DE306B"><w:t xml:space="preserve">The life cycle of the page ends when the HTML is completely rendered </w:t></w:r><w:r><w:t>and hande</w:t></w:r><w:r w:rsidR="004C54F9"><w:t>d ov</w:t></w:r><w:r><w:t xml:space="preserve">er to the web server. The web server is responsible </w:t></w:r><w:r w:rsidR="0053367B"><w:t xml:space="preserve">for </w:t></w:r><w:r><w:t>send</w:t></w:r><w:r w:rsidR="0053367B"><w:t>ing</w:t></w:r><w:r><w:t xml:space="preserve"> the data over the wire to the browser. While the web server is sending the data</w:t></w:r><w:r w:rsidR="00A06552"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the garbage collector </w:t></w:r><w:r w:rsidR="0053367B"><w:t xml:space="preserve">is </w:t></w:r><w:r><w:t xml:space="preserve">already </w:t></w:r><w:r w:rsidR="0053367B"><w:t>freeing up the released</w:t></w:r><w:r><w:t xml:space="preserve"> memory. This is true for all requests without any interaction or custom code required. However, within this cycle</w:t></w:r><w:r w:rsidR="00A06552"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> view</w:t></w:r><w:r w:rsidR="0053367B"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">state has an extraordinary function and it makes your life as a control developer easier if you understand life cycles and </w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">their </w:t></w:r><w:r><w:t>relation to view</w:t></w:r><w:r w:rsidR="0053367B"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">state. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="005E0177"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t>Step One—Instantiation</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="005E0177"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The instantiation is the beginning of the life cycle of the page. </w:t></w:r><w:r w:rsidR="00564EA7"><w:t>T</w:t></w:r><w:r><w:t>he class</w:t></w:r><w:r w:rsidR="00564EA7"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> which represents the page</w:t></w:r><w:r w:rsidR="00564EA7"><w:t xml:space="preserve">, </w:t></w:r><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve">is instantiated and launched. </w:t></w:r><w:r w:rsidRPr="00A332AE"><w:t xml:space="preserve">But what </w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">actually </w:t></w:r><w:r w:rsidRPr="00A332AE"><w:t xml:space="preserve">happens and where </w:t></w:r><w:r w:rsidR="00564EA7"><w:t>does</w:t></w:r><w:r w:rsidR="00564EA7" w:rsidRPr="00A332AE"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="00A332AE"><w:t>the page</w:t></w:r><w:r><w:t>’s code</w:t></w:r><w:r w:rsidRPr="00A332AE"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00564EA7"><w:t xml:space="preserve">get </w:t></w:r><w:r w:rsidRPr="00A332AE"><w:t>stor</w:t></w:r><w:r><w:t>ed</w:t></w:r><w:r w:rsidRPr="00A332AE"><w:t xml:space="preserve">? ASP.NET pages consist of HTML markup with controls and code. </w:t></w:r><w:r w:rsidR="00A06552"><w:t>Firstly, t</w:t></w:r><w:r><w:t xml:space="preserve">he ASP.NET engine converts the text portion of the page and all </w:t></w:r><w:proofErr w:type="gramStart"/><w:r><w:t>markup</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t xml:space="preserve"> into web controls. That means the page is now completely made of code. Most parts that consist of HTML are replaced by </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A332AE"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>LiteralControl</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> controls. Literals contain </w:t></w:r><w:r w:rsidR="00564F70"><w:t>text that doesn’t</w:t></w:r><w:r><w:t xml:space="preserve"> need any further processing. </w:t></w:r><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve">This is </w:t></w:r><w:r w:rsidR="0029321B"><w:t>required</w:t></w:r><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">in order </w:t></w:r><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve">to avoid the </w:t></w:r><w:r w:rsidR="0029321B"><w:t>extensive</w:t></w:r><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve"> recognition process. </w:t></w:r><w:r w:rsidRPr="00A332AE"><w:t>The ASP.NET engine is able to recognize changes made and re-runs the process, if required.</w:t></w:r><w:r><w:t xml:space="preserve"> The features required for a page are inherited from the </w:t></w:r><w:r w:rsidRPr="00A332AE"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Page</w:t></w:r><w:r><w:t xml:space="preserve"> class (</w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A332AE"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>System.Web.UI.Page</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>). If code behind is being used</w:t></w:r><w:r w:rsidR="00A06552"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> one more step is required. Using the </w:t></w:r><w:r w:rsidRPr="005E0177"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>partial</w:t></w:r><w:r><w:t xml:space="preserve"> keyword this class is married with </w:t></w:r><w:r w:rsidR="00EF0458"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>code</w:t></w:r><w:r w:rsidR="00EF0458"><w:t>-</w:t></w:r><w:r><w:t xml:space="preserve">behind class that is associated with the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>aspx</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> page.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00A06552" w:rsidP="005E0177"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">When </w:t></w:r><w:r w:rsidR="00165A64"><w:t>compilation is done with SDK components</w:t></w:r><w:r><w:t>, the final class is stored under this path</w:t></w:r><w:r w:rsidR="00165A64"><w:t>:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="005E0177"><w:pPr><w:pStyle w:val="Query"/></w:pPr><w:r><w:t>WINDOWS\Microsoft.NET\Framework\&lt;Version&gt;\Temporary ASP.NET Files</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRDefault="00915540" w:rsidP="005E0177"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">This is same if IIS is calling a web project that is not pre-compiled and the ASP.NET engine is forced to compile the code on the fly. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="005E0177"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>Using Visual Studio 2008</w:t></w:r><w:r w:rsidR="00A06552"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the path is quite different:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="005E0177"><w:pPr><w:pStyle w:val="Query"/></w:pPr><w:r><w:t>&lt;</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>UserHome</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>&gt;\</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>AppData</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>\Local\Temp\Temporary ASP.NET Files\root\</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRDefault="00165A64" w:rsidP="00915540"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r w:rsidRPr="005E0177"><w:t xml:space="preserve">Under </w:t></w:r><w:r w:rsidR="00915540"><w:t>either</w:t></w:r><w:r w:rsidRPr="005E0177"><w:t xml:space="preserve"> path</w:t></w:r><w:r w:rsidR="00A06552"><w:t>,</w:t></w:r><w:r w:rsidRPr="005E0177"><w:t xml:space="preserve"> you can find folders </w:t></w:r><w:r><w:t>for projects and solutions.</w:t></w:r><w:r w:rsidR="004E3085"><w:t xml:space="preserve"> However, Visual Studio uses some weird codes to name the folders instead of the project’s real name. I suggest sorting the explorer view by date to recognize the right folder based on last change date.</w:t></w:r><w:r><w:t xml:space="preserve"> The language—either C# or Visual Basic—depends </w:t></w:r><w:r w:rsidR="006F4694"><w:t xml:space="preserve">on </w:t></w:r><w:r><w:t xml:space="preserve">the setting of the page and </w:t></w:r><w:r w:rsidR="006F4694"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">code behind used. Reading the generated pages </w:t></w:r><w:r w:rsidR="006F4694"><w:t xml:space="preserve">can occasionally be </w:t></w:r><w:r><w:t>helpful</w:t></w:r><w:r w:rsidR="006F4694"><w:t>, especially when researching odd</w:t></w:r><w:r><w:t xml:space="preserve"> errors. If you want to go deeper into the internal page processing</w:t></w:r><w:r w:rsidR="00A06552"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> it’s worth a look. The generated </w:t></w:r><w:r w:rsidR="006F4694"><w:t xml:space="preserve">material </w:t></w:r><w:r><w:t>includes all fragments read from pages, code behind, user controls and master pages.</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00915540"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>If the code is compiled directly you may not find the generated classes but the final assembly only. In that case I recommend using a tool like Red Gate’s Reflector to examine the finally generated code.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="005E0177"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t xml:space="preserve">Building the </w:t></w:r><w:r w:rsidR="004E3085"><w:t xml:space="preserve">Hierarchy </w:t></w:r><w:r><w:t xml:space="preserve">of </w:t></w:r><w:r w:rsidR="004E3085"><w:t>Controls</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="005E0177"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>The page is the top level of the hierarchy of controls. Because</w:t></w:r><w:r w:rsidR="00296242"><w:t xml:space="preserve"> the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="005E0177"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Page</w:t></w:r><w:r><w:t xml:space="preserve"> class itself inherits from </w:t></w:r><w:r w:rsidRPr="005E0177"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Control</w:t></w:r><w:r><w:t>, it’s a control, too. Each control has exactly one parent and no</w:t></w:r><w:r w:rsidR="00296242"><w:t>ne</w:t></w:r><w:r><w:t xml:space="preserve">, one, or </w:t></w:r><w:r w:rsidR="00296242"><w:t>m</w:t></w:r><w:r><w:t xml:space="preserve">any children. The elements placed declaratively in the page are children of the highest level. There is no limit </w:t></w:r><w:r w:rsidR="005C372F"><w:t xml:space="preserve">to </w:t></w:r><w:r><w:t>nest</w:t></w:r><w:r w:rsidR="005C372F"><w:t>ing</w:t></w:r><w:r><w:t xml:space="preserve"> levels for the control hierarchy. This leads to vast trees made of complex controls. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">One important control is </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="007E09EC"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HtmlForm</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> (full name is </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="007E09EC"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>System.Web.UI.HtmlControls.HtmlForm</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">). It creates the </w:t></w:r><w:r w:rsidRPr="007E09EC"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>&lt;form&gt;</w:t></w:r><w:r><w:t xml:space="preserve"> tag and determines the content sent during </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>. The view</w:t></w:r><w:r w:rsidR="00296242"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>state information is necessarily placed here. You can see this in the sample shown in</w:t></w:r><w:r w:rsidR="005C372F"><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="gramStart"/><w:r w:rsidR="005C372F"><w:t>Listing</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r w:rsidR="005C372F"><w:t xml:space="preserve"> 1-4</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E09EC" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:r w:rsidRPr="006C4183"><w:t xml:space="preserve">Listing </w:t></w:r><w:r w:rsidR="00296242"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00011B23" w:rsidRPr="006C4183"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A" w:rsidRPr="006C4183"><w:t>4</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. Simple ASPX page with controls</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>&lt;head runat="server"&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    &lt;title&gt;&lt;/title&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>&lt;/head&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>&lt;body&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    &lt;h1&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        Apress - ViewState&lt;/h1&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E09EC" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    </w:t></w:r><w:r w:rsidRPr="007E09EC"><w:t>&lt;form id="form1" runat="server"&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E09EC" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve">    &lt;div&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E09EC" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve">        &lt;asp:TextBox runat="server" ID="txtName" /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E09EC" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve">        &lt;br /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E09EC" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve">        Are you called a </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve">        </w:t></w:r><w:r><w:t>&lt;asp:DropDownList runat="server" ID="ddlWhat"&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">            &lt;asp:ListItem Value="G" Selected="True"&gt;Geek&lt;/asp:ListItem&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">            &lt;asp:ListItem Value="N"&gt;Nerd&lt;/asp:ListItem&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E09EC" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">            </w:t></w:r><w:r w:rsidRPr="007E09EC"><w:t>&lt;asp:ListItem Value="W"&gt;Don’t know&lt;/asp:ListItem&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E09EC" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve">        &lt;/asp:DropDownList&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E09EC" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve">        &lt;br /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E09EC" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve">        &lt;asp:Button runat="server" ID="btnSend" Text="Send!" /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E09EC" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve">    &lt;/div&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E09EC" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve">    &lt;/form&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E09EC" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="007E09EC"><w:t>&lt;/body&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F1361C" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r w:rsidRPr="00F1361C"><w:t>&lt;/html&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00D60028" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="004C54F9"><w:instrText xml:space="preserve"> REF _Ref219656417 \h </w:instrText></w:r><w:r><w:rPr><w:lang w:val="de-DE"/></w:rPr></w:r><w:r><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="004C54F9" w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="00296242"><w:t>1-</w:t></w:r><w:r w:rsidR="004C54F9"><w:t>14</w:t></w:r><w:r><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r w:rsidR="004C54F9" w:rsidRPr="004C54F9"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:t>shows how it will look like in the</w:t></w:r><w:r w:rsidR="00F1361C"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="005C372F"><w:t>V</w:t></w:r><w:r w:rsidR="00F1361C"><w:t xml:space="preserve">isual </w:t></w:r><w:r w:rsidR="005C372F"><w:t>S</w:t></w:r><w:r w:rsidR="00F1361C"><w:t>tudio</w:t></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:t xml:space="preserve"> designer</w:t></w:r><w:r w:rsidR="00F1361C"><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00990428" w:rsidRPr="00990428" w:rsidRDefault="00990428" w:rsidP="00990428"><w:pPr><w:pStyle w:val="Figure"/></w:pPr><w:r><w:rPr><w:noProof/><w:lang w:val="de-DE" w:eastAsia="de-DE"/></w:rPr><w:drawing><wp:inline distT="0" distB="0" distL="0" distR="0" wp14:anchorId="23C902FE" wp14:editId="7184859D"><wp:extent cx="5486400" cy="1761490"/><wp:effectExtent l="0" t="0" r="0" b="0"/><wp:docPr id="12" name="ASPEXTf0112.tif" descr="D:\UserData\jkrause\Documents\Meine Daten\Bücher\Fachbuchprojekte\ASP.NET Extensibility\Images\ASPEXTf0112.tif"/><wp:cNvGraphicFramePr><a:graphicFrameLocks xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" noChangeAspect="1"/></wp:cNvGraphicFramePr><a:graphic xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:nvPicPr><pic:cNvPr id="0" name="ASPEXTf0112.tif"/><pic:cNvPicPr/></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId23" r:link="rId24"/><a:stretch><a:fillRect/></a:stretch></pic:blipFill><pic:spPr><a:xfrm><a:off x="0" y="0"/><a:ext cx="5486400" cy="1761490"/></a:xfrm><a:prstGeom prst="rect"><a:avLst/></a:prstGeom></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p w:rsidR="004C54F9" w:rsidRPr="004C54F9" w:rsidRDefault="00990428" w:rsidP="00990428"><w:pPr><w:pStyle w:val="Production"/></w:pPr><w:r><w:t xml:space="preserve">Insert Figure </w:t></w:r><w:r w:rsidRPr="00990428"><w:t>ASPEXTf0112.tif</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F1361C" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="FigureCaption"/></w:pPr><w:bookmarkStart w:id="19" w:name="_Ref219656417"/><w:r w:rsidRPr="00F1361C"><w:t xml:space="preserve">Figure </w:t></w:r><w:r w:rsidR="00296242"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00F1361C" w:rsidRPr="00F1361C"><w:instrText xml:space="preserve"> SEQ Figure \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>14</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:bookmarkEnd w:id="19"/><w:r w:rsidRPr="00F1361C"><w:t>. Simple page in Visual Studio Designer</w:t></w:r></w:p><w:p w:rsidR="004C54F9" w:rsidRPr="004C54F9" w:rsidRDefault="004C54F9" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r w:rsidRPr="004C54F9"><w:t xml:space="preserve">The ASP.NET engine generates the </w:t></w:r><w:r w:rsidR="005C372F"><w:t xml:space="preserve">output </w:t></w:r><w:r><w:t xml:space="preserve">code, </w:t></w:r><w:r w:rsidR="00536AAE"><w:t xml:space="preserve">a fragment of which is </w:t></w:r><w:r><w:t xml:space="preserve">shown in </w:t></w:r><w:proofErr w:type="gramStart"/><w:r w:rsidR="00536AAE"><w:t>L</w:t></w:r><w:r><w:t>isting</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r w:rsidR="00536AAE"><w:t xml:space="preserve"> 1-5</w:t></w:r><w:r><w:t>:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="007E09EC" w:rsidRDefault="00165A64" w:rsidP="007E09EC"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:r w:rsidRPr="006C4183"><w:t xml:space="preserve">Listing </w:t></w:r><w:r w:rsidR="00296242"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00011B23" w:rsidRPr="006C4183"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A" w:rsidRPr="006C4183"><w:t>5</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. Simple ASPX page</w:t></w:r><w:r w:rsidR="00C32096"><w:t xml:space="preserve"> from last listing</w:t></w:r><w:r><w:t xml:space="preserve"> compiled into code</w:t></w:r></w:p><w:p w:rsidR="00C32096" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r w:rsidRPr="00915540"><w:t>public class default_aspx : _Default, IRequiresSessionState, IHttpHandler</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    private static object __fileDependencies;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    private static bool __initialized;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    public default_aspx()</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        base.AppRelativeVirtualPath = "~/Default.aspx";</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        if (!__initialized)</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">            string[] virtualFileDependencies = new string[] { "~/Default.aspx" };</w:t></w:r></w:p><w:p w:rsidR="00C32096" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">            __fileDependencies =</w:t></w:r><w:r w:rsidR="00C32096"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00C32096"><w:sym w:font="Wingdings" w:char="F0C3"/></w:r><w:r w:rsidRPr="00915540"><w:t xml:space="preserve"> </w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00C32096" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">                     </w:t></w:r><w:r w:rsidR="00915540" w:rsidRPr="00915540"><w:t>base.GetWrappedFileDependencies(virtualFileDependencies);</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">            __initialized = true;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    private HtmlTitle __BuildControl__control2()</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:lastRenderedPageBreak/><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        return new HtmlTitle();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    private void __BuildControl__control3(ListItemCollection __ctrl)</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        ListItem item = this.__BuildControl__control4();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        __ctrl.Add(item);</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        ListItem item2 = this.__BuildControl__control5();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        __ctrl.Add(item2);</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        ListItem item3 = this.__BuildControl__control6();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        __ctrl.Add(item3);</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    private ListItem __BuildControl__control4()</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        ListItem item = new ListItem();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        item.Value = "G";</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        item.Selected = true;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        item.Text = "Geek";</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        return item;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    private ListItem __BuildControl__control5()</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        ListItem item = new ListItem();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        item.Value = "N";</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        item.Text = "Nerd";</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        return item;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    private ListItem __BuildControl__control6()</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        ListItem item = new ListItem();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        item.Value = "W";</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        item.Text = "Don’t know";</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        return item;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    private Button __BuildControlbtnSend()</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        Button button = new Button();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        base.btnSend = button;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        button.ApplyStyleSheetSkin(this);</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        button.ID = "btnSend";</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        button.Text = "Send!";</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        return button;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:lastRenderedPageBreak/><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    private DropDownList __BuildControlddlWhat()</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        DropDownList list = new DropDownList();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        base.ddlWhat = list;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        list.ApplyStyleSheetSkin(this);</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        list.ID = "ddlWhat";</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        this.__BuildControl__control3(list.Items);</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        return list;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    private HtmlForm __BuildControlform1()</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        HtmlForm form = new HtmlForm();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        base.form1 = form;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        form.ID = "form1";</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        IParserAccessor accessor = form;</w:t></w:r></w:p><w:p w:rsidR="00C32096" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        accessor.AddParsedSubObject(</w:t></w:r><w:r w:rsidR="00C32096"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00C32096"><w:sym w:font="Wingdings" w:char="F0C3"/></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00C32096" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">                              </w:t></w:r><w:r w:rsidR="00915540" w:rsidRPr="00915540"><w:t>new LiteralControl("\r\n    &lt;div&gt;\r\n        "));</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        TextBox box = this.__BuildControltxtName();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        accessor.AddParsedSubObject(box);</w:t></w:r></w:p><w:p w:rsidR="00C32096" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        accessor.AddParsedSubObject(</w:t></w:r><w:r w:rsidR="00C32096"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00C32096"><w:sym w:font="Wingdings" w:char="F0C3"/></w:r></w:p><w:p w:rsidR="00C32096" w:rsidRDefault="00C32096" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">                              </w:t></w:r><w:r w:rsidR="00915540" w:rsidRPr="00915540"><w:t xml:space="preserve">new LiteralControl("\r\n        &lt;br /&gt;\r\n    </w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:sym w:font="Wingdings" w:char="F0C3"/></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00C32096" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">                                               </w:t></w:r><w:r w:rsidR="00915540" w:rsidRPr="00915540"><w:t xml:space="preserve">    Are you called a \r\n        "));</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        DropDownList list = this.__BuildControlddlWhat();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        accessor.AddParsedSubObject(list);</w:t></w:r></w:p><w:p w:rsidR="00C32096" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        accessor.AddParsedSubObject(</w:t></w:r><w:r w:rsidR="00C32096"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00C32096"><w:sym w:font="Wingdings" w:char="F0C3"/></w:r><w:r w:rsidR="00C32096"><w:t xml:space="preserve"> </w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00C32096" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">                              </w:t></w:r><w:r w:rsidR="00915540" w:rsidRPr="00915540"><w:t>new LiteralControl("\r\n        &lt;br /&gt;\r\n        "));</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        Button button = this.__BuildControlbtnSend();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        accessor.AddParsedSubObject(button);</w:t></w:r></w:p><w:p w:rsidR="00C32096" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        accessor.AddParsedSubObject(</w:t></w:r><w:r w:rsidR="00C32096"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00C32096"><w:sym w:font="Wingdings" w:char="F0C3"/></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00C32096" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">                              </w:t></w:r><w:r w:rsidR="00915540" w:rsidRPr="00915540"><w:t>new LiteralControl("\r\n    &lt;/div&gt;\r\n    "));</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        return form;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    private HtmlHead __BuildControlHead1()</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        HtmlHead head = new HtmlHead("head");</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        base.Head1 = head;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        head.ID = "Head1";</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        HtmlTitle title = this.__BuildControl__control2();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        IParserAccessor accessor = head;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        accessor.AddParsedSubObject(title);</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        return head;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    private void __BuildControlTree(default_aspx __ctrl)</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:lastRenderedPageBreak/><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        this.InitializeCulture();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        IParserAccessor accessor = __ctrl;</w:t></w:r></w:p><w:p w:rsidR="00C32096" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        accessor.AddParsedSubObject(</w:t></w:r><w:r w:rsidR="00C32096"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00C32096"><w:sym w:font="Wingdings" w:char="F0C3"/></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00C32096" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">new LiteralControl("\r\n\r\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 </w:t></w:r><w:r w:rsidRPr="00C32096"><w:t>Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\r\n\r\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\r\n"));</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00C32096"><w:t xml:space="preserve">        </w:t></w:r><w:r w:rsidRPr="00915540"><w:t>HtmlHead head = this.__BuildControlHead1();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        accessor.AddParsedSubObject(head);</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        accessor.AddParsedSubObject(new LiteralControl("\r\n&lt;body&gt;\r\n    &lt;h1&gt;\r\n        Apress - ViewState&lt;/h1&gt;\r\n    "));</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        HtmlForm form = this.__BuildControlform1();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        accessor.AddParsedSubObject(form);</w:t></w:r></w:p><w:p w:rsidR="00C32096" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        accessor.AddParsedSubObject(</w:t></w:r><w:r w:rsidR="00C32096"><w:sym w:font="Wingdings" w:char="F0C3"/></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00C32096" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">                      </w:t></w:r><w:r w:rsidR="00915540" w:rsidRPr="00915540"><w:t>new LiteralControl("\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n"));</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    private TextBox __BuildControltxtName()</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        TextBox box = new TextBox();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        base.txtName = box;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        box.ApplyStyleSheetSkin(this);</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        box.ID = "txtName";</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        return box;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    protected override void FrameworkInitialize()</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        base.FrameworkInitialize();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        this.__BuildControlTree(this);</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        base.AddWrappedFileDependencies(__fileDependencies);</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        base.Request.ValidateInput();</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    public override int GetTypeHashCode()</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        return -1678387491;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    [DebuggerNonUserCode]</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    public override void ProcessRequest(HttpContext context)</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        base.ProcessRequest(context);</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    // Properties</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    protected HttpApplication ApplicationInstance</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        get</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:lastRenderedPageBreak/><w:t xml:space="preserve">        {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">            return this.Context.ApplicationInstance;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    protected DefaultProfile Profile</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        get</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        {</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">            return (DefaultProfile) this.Context.Profile;</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">        }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="00915540"><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00915540" w:rsidRPr="00915540" w:rsidRDefault="00915540" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r w:rsidRPr="00915540"><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00C32096" w:rsidRDefault="00165A64" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="BodyTextCont"/><w:rPr><w:rFonts w:ascii="TheSansMonoConNormal" w:hAnsi="TheSansMonoConNormal"/><w:noProof/><w:sz w:val="20"/></w:rPr></w:pPr><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve">The code is not </w:t></w:r><w:r w:rsidR="00AE4048"><w:t>very</w:t></w:r><w:r w:rsidR="00AE4048" w:rsidRPr="007E09EC"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="007E09EC"><w:t>readable</w:t></w:r><w:r w:rsidR="00A06552"><w:t>,</w:t></w:r><w:r w:rsidRPr="007E09EC"><w:t xml:space="preserve"> but this is</w:t></w:r><w:r><w:t xml:space="preserve"> what generated code is supposed to look like, right? There is no need to do anything special with it</w:t></w:r><w:r w:rsidR="00A06552"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> but</w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve"> rather to</w:t></w:r><w:r><w:t xml:space="preserve"> learn what is going on internally. Note two things here</w:t></w:r><w:r w:rsidR="004C54F9"><w:t>. First</w:t></w:r><w:r w:rsidR="00536AAE"><w:t>ly</w:t></w:r><w:r w:rsidR="004C54F9"><w:t>, the declarative assign</w:t></w:r><w:r><w:t xml:space="preserve">ment of attributes is being replaced with simple property assignments. </w:t></w:r><w:r w:rsidR="0029321B"><w:t>See the following markup:</w:t></w:r></w:p><w:p w:rsidR="00116593" w:rsidRDefault="00165A64"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t>&lt;asp:Button text=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r w:rsidR="0029321B"><w:t>Foobar</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve">&gt; </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="0029321B" w:rsidP="00B6570A"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">It </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">becomes this in the generated class: </w:t></w:r></w:p><w:p w:rsidR="00116593" w:rsidRDefault="00165A64"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t xml:space="preserve">button1.Text = </w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r w:rsidR="0029321B"><w:t>Foobar</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r></w:p><w:p w:rsidR="00C32096" w:rsidRDefault="00C32096" w:rsidP="00B6570A"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>Secondly, all literal stuff is placed in strings and copied into the final page “as is”, just like shown in the snippet below:</w:t></w:r></w:p><w:p w:rsidR="00C32096" w:rsidRPr="00C32096" w:rsidRDefault="00C32096" w:rsidP="00C32096"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r w:rsidRPr="00915540"><w:t>new LiteralControl("\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n"))</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00B6570A" w:rsidRDefault="00165A64" w:rsidP="00B6570A"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r w:rsidRPr="00B6570A"><w:t xml:space="preserve">Once the class is </w:t></w:r><w:r><w:t>complete</w:t></w:r><w:r w:rsidR="00520441"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the engine proceed</w:t></w:r><w:r w:rsidR="00AE4048"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> to the next step. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00BE0FBC" w:rsidP="00B6570A"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t>Step Two—</w:t></w:r><w:r w:rsidR="00165A64" w:rsidRPr="003B7E25"><w:t>Initializing</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B6570A"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r w:rsidRPr="00B6570A"><w:t>After creating the control hierarchy</w:t></w:r><w:r w:rsidR="00AE4048"><w:t>,</w:t></w:r><w:r w:rsidRPr="00B6570A"><w:t xml:space="preserve"> all </w:t></w:r><w:r w:rsidR="00CE3B3A"><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidRPr="00B6570A"><w:t xml:space="preserve">controls </w:t></w:r><w:r><w:t>of t</w:t></w:r><w:r w:rsidRPr="00B6570A"><w:t>he page</w:t></w:r><w:r w:rsidR="00AE4048"><w:t xml:space="preserve"> are</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00CE3B3A"><w:t xml:space="preserve">moved </w:t></w:r><w:r><w:t xml:space="preserve">into the initialization state. </w:t></w:r><w:r w:rsidR="00BE0FBC" w:rsidRPr="003B7E25"><w:t xml:space="preserve">This </w:t></w:r><w:r w:rsidR="00BE0FBC"><w:t>becomes apparent</w:t></w:r><w:r w:rsidRPr="003B7E25"><w:t xml:space="preserve"> by raising the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="003B7E25"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Init</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidRPr="003B7E25"><w:t xml:space="preserve"> event. </w:t></w:r><w:r w:rsidRPr="00B6570A"><w:t xml:space="preserve">In this phase not only </w:t></w:r><w:r w:rsidR="00AE4048"><w:t xml:space="preserve">are </w:t></w:r><w:r w:rsidRPr="00B6570A"><w:t>the controls ready but</w:t></w:r><w:r w:rsidR="00AE4048"><w:t xml:space="preserve"> they</w:t></w:r><w:r w:rsidRPr="00B6570A"><w:t xml:space="preserve"> also </w:t></w:r><w:r w:rsidR="00BE0FBC" w:rsidRPr="00B6570A"><w:t>having</w:t></w:r><w:r w:rsidRPr="00B6570A"><w:t xml:space="preserve"> their static, declarative properties assigned. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00B6570A" w:rsidRDefault="00165A64" w:rsidP="00B6570A"><w:pPr><w:pStyle w:val="NoteTipCaution"/></w:pPr><w:r w:rsidRPr="00B6570A"><w:t>Note:</w:t></w:r><w:r w:rsidRPr="00B6570A"><w:tab/></w:r><w:r w:rsidR="00193EDD"><w:t>“</w:t></w:r><w:r w:rsidRPr="00B6570A"><w:t>Declarative</w:t></w:r><w:r w:rsidR="00193EDD"><w:t>”</w:t></w:r><w:r w:rsidRPr="00B6570A"><w:t xml:space="preserve"> is everything that’s </w:t></w:r><w:r><w:t>written within the markup and not in code fragments.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B6570A"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Whether </w:t></w:r><w:r w:rsidR="00193EDD"><w:t xml:space="preserve">or not </w:t></w:r><w:r><w:t>a property has been declarative</w:t></w:r><w:r w:rsidR="00193EDD"><w:t>ly</w:t></w:r><w:r><w:t xml:space="preserve"> assigned</w:t></w:r><w:r w:rsidR="00A06552"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> you still can change the value any time before the render process is </w:t></w:r><w:r w:rsidR="00A06552"><w:t>complete</w:t></w:r><w:r><w:t>. However, because I’m talking about view</w:t></w:r><w:r w:rsidR="0042398B"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">state, the initialization step plays a special role regarding property values. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00753487" w:rsidRDefault="00193EDD" w:rsidP="00753487"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t>V</w:t></w:r><w:r w:rsidR="00165A64"><w:t>iew</w:t></w:r><w:r w:rsidR="0042398B"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00BE0FBC"><w:t>State Tracks Changes</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00193EDD" w:rsidP="00B6570A"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>V</w:t></w:r><w:r w:rsidR="00165A64"><w:t>iew</w:t></w:r><w:r w:rsidR="0042398B"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">state tracks changes of properties. This is a special </w:t></w:r><w:r w:rsidR="00A06552"><w:t xml:space="preserve">function </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">of the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00B6570A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>StateBag</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> class, which holds the data behind the scene</w:t></w:r><w:r w:rsidR="00A06552"><w:t>s</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00A06552"><w:t>T</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">racking starts during the Initializing step. </w:t></w:r><w:r w:rsidR="00A06552"><w:t>In order t</w:t></w:r><w:r w:rsidR="00165A64"><w:t>o recognize the default value and the changed one</w:t></w:r><w:r w:rsidR="00A06552"><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="004C54F9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>StateBag</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> compares the initialized value </w:t></w:r><w:r w:rsidR="00165A64"><w:lastRenderedPageBreak/><w:t>set by declarative markup with the current value set anytime later programmatically. Even if the result</w:t></w:r><w:r w:rsidR="00C96484"><w:t>s</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> look</w:t></w:r><w:r w:rsidR="003309B1"><w:t xml:space="preserve"> the</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> same</w:t></w:r><w:r w:rsidR="00C96484"><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> the view</w:t></w:r><w:r w:rsidR="0042398B"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">state treats the data in a different way. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00753487"><w:pPr><w:pStyle w:val="berschrift4"/></w:pPr><w:r><w:t>View</w:t></w:r><w:r w:rsidR="0042398B"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00BE0FBC"><w:t xml:space="preserve">State </w:t></w:r><w:r><w:t xml:space="preserve">and </w:t></w:r><w:r w:rsidR="00BE0FBC"><w:t>Dynamic Controls</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B6570A"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>Using dynamic controls</w:t></w:r><w:r w:rsidR="002A3548"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> you</w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">’ll </w:t></w:r><w:r><w:t xml:space="preserve">know that technically it’s possible to add controls any time before the page render process is </w:t></w:r><w:r w:rsidR="002A3548"><w:t>complete</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="002A3548"><w:t>V</w:t></w:r><w:r w:rsidR="0009536C"><w:t>iew state</w:t></w:r><w:r w:rsidR="002A3548"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">is </w:t></w:r><w:r><w:t xml:space="preserve">not that flexible. Adding controls using </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00753487"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Controls.Add</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method must take place in the initializing phase. Otherwise the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00753487"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>StateBag</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class does not recognize the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00753487"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Init</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event at the right time and does not start tracking changes. You still can add controls anytime, but for those controls the </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">will not </w:t></w:r><w:r><w:t>work. You might find problems here</w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve"> occasionally as</w:t></w:r><w:r><w:t xml:space="preserve"> the majority of controls being added dynamically—</w:t></w:r><w:r w:rsidR="00C96484"><w:t xml:space="preserve">such as the </w:t></w:r><w:r w:rsidRPr="00753487"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Label</w:t></w:r><w:r><w:t xml:space="preserve"> control—don’t require property value tracking. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00753487"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>The golden rule</w:t></w:r><w:r w:rsidR="00F1361C"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="002A3548"><w:t>states that in order to</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00F1361C"><w:t>“</w:t></w:r><w:r><w:t xml:space="preserve">take care of the </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve">, whether it’s required or not, add dynamic controls </w:t></w:r><w:r w:rsidR="00C96484"><w:t xml:space="preserve">during </w:t></w:r><w:r><w:t>the Initializing step</w:t></w:r><w:r w:rsidR="00F1361C"><w:t>”</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00753487"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t>Step Three—Loading the View</w:t></w:r><w:r w:rsidR="00313EB7"><w:t xml:space="preserve"> S</w:t></w:r><w:r><w:t>tate</w:t></w:r></w:p><w:p w:rsidR="001811AA" w:rsidRDefault="00BC7B40" w:rsidP="00753487"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>V</w:t></w:r><w:r w:rsidR="0009536C"><w:t>iew state</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> data </w:t></w:r><w:r><w:t xml:space="preserve">is </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">saved into a hidden field called </w:t></w:r><w:r w:rsidR="00165A64" w:rsidRPr="00706F5F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>__VIEWSTATE</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. It’s transmitted back to the server only </w:t></w:r><w:r><w:t xml:space="preserve">during a </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">POST operation, which forces a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64"><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="001811AA" w:rsidP="001811AA"><w:pPr><w:pStyle w:val="NoteTipCaution"/></w:pPr><w:r><w:t>Note:</w:t></w:r><w:r><w:tab/></w:r><w:r w:rsidR="00165A64"><w:t>You can</w:t></w:r><w:r w:rsidR="00B76AB6"><w:t xml:space="preserve"> completely</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> ignore page requests </w:t></w:r><w:r w:rsidR="00B76AB6"><w:t xml:space="preserve">that </w:t></w:r><w:r w:rsidR="00165A64"><w:t>us</w:t></w:r><w:r w:rsidR="00B76AB6"><w:t>e</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> GET </w:t></w:r><w:r w:rsidR="00B76AB6"><w:t xml:space="preserve">for </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">this step. </w:t></w:r><w:r w:rsidR="00B76AB6"><w:t>Such requests</w:t></w:r><w:r w:rsidR="00BC7B40"><w:t xml:space="preserve"> do not interact with view state at all. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00706F5F"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">In this </w:t></w:r><w:r w:rsidR="004C54F9"><w:t xml:space="preserve">step </w:t></w:r><w:r><w:t xml:space="preserve">the engine decodes values from the hidden fields and assigns them to the controls, looping recursively through the control hierarchy. </w:t></w:r><w:r w:rsidR="0080379B"><w:t>Also i</w:t></w:r><w:r><w:t xml:space="preserve">n this phase the validity of the </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> is checked. There are several reasons why the </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> could become invalid. On</w:t></w:r><w:r w:rsidR="004C54F9"><w:t>e</w:t></w:r><w:r><w:t xml:space="preserve"> reason is that the control hierarchy has been changed </w:t></w:r><w:r w:rsidR="00B76AB6"><w:t xml:space="preserve">during </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and the control is not at the expected place, or removed completely.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00706F5F"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>If everything is fine</w:t></w:r><w:r w:rsidR="002A3548"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the engine proceeds </w:t></w:r><w:r w:rsidR="00B76AB6"><w:t xml:space="preserve">to </w:t></w:r><w:r><w:t>the next step.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00706F5F" w:rsidRDefault="00165A64" w:rsidP="00706F5F"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r w:rsidRPr="00706F5F"><w:t xml:space="preserve">Step Four—Loading </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00706F5F"><w:t>Postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidRPr="00706F5F"><w:t xml:space="preserve"> Data</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00706F5F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">After loading and restoring the </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00F829BC"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the form data </w:t></w:r><w:r w:rsidR="00F829BC"><w:t>is</w:t></w:r><w:r><w:t xml:space="preserve"> processed. Not all controls can return data. To let the engine know whether it has to look for data </w:t></w:r><w:r w:rsidR="00F829BC"><w:t xml:space="preserve">sent </w:t></w:r><w:r><w:t>back</w:t></w:r><w:r w:rsidR="00F829BC"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00706F5F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IPostBackDataHandler</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> interface is recognized. Each control implementing this interface might send form data back. Form data </w:t></w:r><w:r w:rsidR="0080379B"><w:t xml:space="preserve">is </w:t></w:r><w:r><w:t>sent back in the HTTP protocol as id</w:t></w:r><w:r w:rsidR="00AC5C26"><w:t>−</w:t></w:r><w:r><w:t>value pairs:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00706F5F" w:rsidRDefault="00165A64" w:rsidP="00706F5F"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t>Myclientid=value</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00706F5F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The page class </w:t></w:r><w:r w:rsidR="00243A86"><w:t>looks</w:t></w:r><w:r><w:t xml:space="preserve"> for a control with </w:t></w:r><w:r w:rsidR="00243A86"><w:t xml:space="preserve">a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00706F5F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ClientID</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00243A86"><w:t xml:space="preserve">that </w:t></w:r><w:r><w:t xml:space="preserve">equals </w:t></w:r><w:r w:rsidR="004C54F9"><w:t>“</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>Myclientid</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="004C54F9"><w:t>”</w:t></w:r><w:r><w:t xml:space="preserve">. When found, it </w:t></w:r><w:r w:rsidR="00243A86"><w:t xml:space="preserve">checks </w:t></w:r><w:r><w:t xml:space="preserve">whether </w:t></w:r><w:r w:rsidR="00243A86"><w:t xml:space="preserve">the control </w:t></w:r><w:r><w:t>implements</w:t></w:r><w:r w:rsidRPr="00706F5F"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00706F5F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IPostBackDataHandler</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> interface. </w:t></w:r><w:r w:rsidR="00243A86"><w:t>If it does</w:t></w:r><w:r w:rsidR="000208F0"><w:t xml:space="preserve"> this</w:t></w:r><w:r w:rsidR="00243A86"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00243A86"><w:t xml:space="preserve">the page class </w:t></w:r><w:r><w:t>calls the only method defined there</w:t></w:r><w:r w:rsidR="000208F0"><w:t>—</w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00722D15"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>LoadPostData</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="000208F0"><w:t>.</w:t></w:r><w:r><w:t xml:space="preserve"> That means that </w:t></w:r><w:r w:rsidR="0080379B"><w:t>the</w:t></w:r><w:r><w:t xml:space="preserve"> control itself manages the loading of data</w:t></w:r><w:r w:rsidR="002A3548"><w:t>, which</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00243A86"><w:t>opens up</w:t></w:r><w:r><w:t xml:space="preserve"> a great way </w:t></w:r><w:r w:rsidR="002A3548"><w:t>of changing</w:t></w:r><w:r><w:t xml:space="preserve"> behavior and add</w:t></w:r><w:r w:rsidR="002A3548"><w:t>ing</w:t></w:r><w:r><w:t xml:space="preserve"> custom code.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00706F5F" w:rsidRDefault="00B85BDC" w:rsidP="00706F5F"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">Concerning </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> this behavior is </w:t></w:r><w:r><w:t>very significant</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. The ability to get the values of controls back between </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64"><w:t>postbacks</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> is called </w:t></w:r><w:r w:rsidR="00F025F6"><w:t>“</w:t></w:r><w:r w:rsidR="00165A64"><w:t>sticky form</w:t></w:r><w:r w:rsidR="00F025F6"><w:t>”</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> behavior. It’s one of the best features </w:t></w:r><w:r w:rsidR="002A3548"><w:lastRenderedPageBreak/><w:t xml:space="preserve">of </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">ASP.NET. Let me explain this in more detail using </w:t></w:r><w:r w:rsidR="00495A7D"><w:t xml:space="preserve">the example of </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00F3209B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>TextBox</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64" w:rsidRPr="00F3209B"><w:t xml:space="preserve"> con</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">trol. The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00F3209B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>TextBox</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> has a property </w:t></w:r><w:r w:rsidR="00165A64" w:rsidRPr="00F3209B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Text</w:t></w:r><w:r w:rsidR="00165A64"><w:t>. It also implements</w:t></w:r><w:r w:rsidR="00495A7D"><w:t xml:space="preserve"> the</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00706F5F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IPostBackDataHandler</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> interface. Once a page with the textbox control is posted back</w:t></w:r><w:r w:rsidR="002A3548"><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00F3209B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>LoadPostData</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> method reads the value of the control </w:t></w:r><w:r w:rsidR="00495A7D"><w:t xml:space="preserve">out of the view state </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">and writes it into the </w:t></w:r><w:r w:rsidR="00165A64" w:rsidRPr="00F3209B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Text</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> property. The</w:t></w:r><w:r w:rsidR="00495A7D"><w:t xml:space="preserve"> default value—that was</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> probably </w:t></w:r><w:r w:rsidR="00495A7D"><w:t xml:space="preserve">set </w:t></w:r><w:r w:rsidR="00165A64"><w:t>declaratively</w:t></w:r><w:r w:rsidR="00495A7D"><w:t>—</w:t></w:r><w:r w:rsidR="00165A64"><w:t>is overwritten. You can easily check this with the following definition:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t>&lt;asp:TextBox runat=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>server</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> ID=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>txtName</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> Text=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>""</w:t></w:r><w:r><w:t xml:space="preserve"> /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F3209B" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r w:rsidRPr="00F3209B"><w:t>The render process transforms this markup into HTML form:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t>&lt;input type=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>text</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> id=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>txtName</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> name=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>txtName</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r w:rsidRPr="00F3209B"><w:t>If the user now enters some text here, like</w:t></w:r><w:r w:rsidR="00BE4A3E"><w:t xml:space="preserve"> “</w:t></w:r><w:r w:rsidRPr="00F3209B"><w:t>It’s a geek</w:t></w:r><w:r w:rsidR="00BE4A3E"><w:t>”</w:t></w:r><w:r w:rsidRPr="00F3209B"><w:t xml:space="preserve">, the </w:t></w:r><w:r><w:t>form transmitted back to the server contains at least this line:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F3209B" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r w:rsidRPr="00F3209B"><w:t xml:space="preserve">txtName=It’s a </w:t></w:r><w:r><w:t>g</w:t></w:r><w:r w:rsidRPr="00F3209B"><w:t>eek</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F3209B" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>This data</w:t></w:r><w:r w:rsidR="009E6904"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00BE4A3E"><w:t>pair</w:t></w:r><w:r><w:t xml:space="preserve"> becomes part of the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00F3209B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Request.Form</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> collection. The key is “</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>txtName</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>” and the value is “It’s a geek”. The page class hands this data</w:t></w:r><w:r w:rsidR="009E6904"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00B07C17"><w:t>pair</w:t></w:r><w:r><w:t xml:space="preserve"> to the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00F3209B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>LoadPostData</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method. Internally there is nothing surprising here. Using Reflector</w:t></w:r><w:r w:rsidR="002A3548"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> you can look into the </w:t></w:r><w:r w:rsidR="00B07C17"><w:t xml:space="preserve">relevant </w:t></w:r><w:r><w:t xml:space="preserve">code </w:t></w:r><w:r w:rsidR="00B07C17"><w:t>inside</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="004C54F9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>System.Web.dll</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F3209B" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:r w:rsidRPr="006C4183"><w:t xml:space="preserve">Listing </w:t></w:r><w:r w:rsidR="00B07C17"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00011B23" w:rsidRPr="006C4183"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A" w:rsidRPr="006C4183"><w:t>6</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t>. Disassemble</w:t></w:r><w:r w:rsidR="004C54F9"><w:t>d</w:t></w:r><w:r><w:t xml:space="preserve"> code of the LoadPostData method </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t xml:space="preserve">protected virtual bool LoadPostData(string postDataKey, </w:t></w:r><w:r w:rsidR="000208F0"><w:sym w:font="Wingdings" w:char="F0C3"/></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">                                    NameValueCollection postCollection)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    base.ValidateEvent(postDataKey);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    string text = this.Text;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    string str2 = postCollection[postDataKey];</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    if (!this.ReadOnly &amp;&amp; !text.Equals(str2, StringComparison.Ordinal))</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        this.Text = str2;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        return true;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    </w:t></w:r><w:r w:rsidRPr="003B7E25"><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="003B7E25"><w:t xml:space="preserve">    return false;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r w:rsidRPr="003B7E25"><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F3209B" w:rsidRDefault="00165A64" w:rsidP="00F3209B"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>T</w:t></w:r><w:r w:rsidRPr="00F3209B"><w:t xml:space="preserve">his code snippet is from </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00F3209B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>TextBox</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidRPr="00F3209B"><w:t xml:space="preserve">, </w:t></w:r><w:r><w:t>and the</w:t></w:r><w:r w:rsidRPr="00F3209B"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">one and only </w:t></w:r><w:r w:rsidRPr="00F3209B"><w:t>property</w:t></w:r><w:r><w:t xml:space="preserve"> filled by a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is </w:t></w:r><w:r w:rsidRPr="00F3209B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Text</w:t></w:r><w:r><w:t xml:space="preserve">. The control might have been set </w:t></w:r><w:r w:rsidR="00E77F32"><w:t>read-only</w:t></w:r><w:r><w:t xml:space="preserve"> and therefore this is checked first (</w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00F3209B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>this.ReadOnly</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">). Also, </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">as the </w:t></w:r><w:r><w:t>code compares the old value and the new one</w:t></w:r><w:r w:rsidR="002A3548"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> it’s written only if the value has been changed. Why is this additional check required? You might assume that comparing takes more time than assigning a property—even if there is nothing to render at this stage. Well, the reason is </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve">. To understand this, take a look into the code </w:t></w:r><w:r w:rsidR="00B07C17"><w:t xml:space="preserve">for </w:t></w:r><w:r><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidRPr="00BA74FE"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Text</w:t></w:r><w:r><w:t xml:space="preserve"> property:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F3209B" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:r w:rsidRPr="006C4183"><w:t xml:space="preserve">Listing </w:t></w:r><w:r w:rsidR="00B07C17"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00011B23" w:rsidRPr="006C4183"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A" w:rsidRPr="006C4183"><w:t>7</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t xml:space="preserve">. Disassembled code of Text method of the TextBox class </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>public virtual string Text</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    get</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        string str = (string) this.ViewState["Text"];</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">        if (str != null)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">            return str;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        return string.Empty;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    set</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        this.ViewState["Text"] = value;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    </w:t></w:r><w:r w:rsidRPr="003B7E25"><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r w:rsidRPr="003B7E25"><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="009E6904" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>The</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> value is not stored in a private field but</w:t></w:r><w:r><w:t xml:space="preserve"> only</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> in </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. The tracking feature of the underlying </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00BA74FE"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>StateBag</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> class handles changes </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">as </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">well. </w:t></w:r><w:r w:rsidR="002A3548"><w:t>I</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">f nothing </w:t></w:r><w:r w:rsidR="00396E7A"><w:t xml:space="preserve">has </w:t></w:r><w:r w:rsidR="00165A64"><w:t>changed</w:t></w:r><w:r w:rsidR="002A3548"><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> it’s not recommended to assign the value to </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="002A3548"><w:t>, or</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00BA74FE"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>State</w:t></w:r><w:r w:rsidR="00165A64"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>B</w:t></w:r><w:r w:rsidR="00165A64" w:rsidRPr="00BA74FE"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>ag</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> class </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">will </w:t></w:r><w:r w:rsidR="00165A64"><w:t>start tracking. If there is nothing to track</w:t></w:r><w:r><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> it doesn’t make sense to do so</w:t></w:r><w:r w:rsidR="002A3548"><w:t>, and</w:t></w:r><w:r w:rsidR="00165A64" w:rsidRPr="003B7E25"><w:t xml:space="preserve"> the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="003B7E25"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>LoadPostData</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64" w:rsidRPr="003B7E25"><w:t xml:space="preserve"> method is clever enough to know.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00BA74FE" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r w:rsidRPr="00BA74FE"><w:t xml:space="preserve">One major </w:t></w:r><w:r w:rsidR="00396E7A"><w:t>aspect</w:t></w:r><w:r w:rsidR="00396E7A" w:rsidRPr="00BA74FE"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="00BA74FE"><w:t xml:space="preserve">many developers </w:t></w:r><w:r w:rsidR="00396E7A"><w:t xml:space="preserve">overlook </w:t></w:r><w:r><w:t xml:space="preserve">is the role of </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00F52407"><w:t xml:space="preserve">in </w:t></w:r><w:r><w:t xml:space="preserve">the handling of </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> dat</w:t></w:r><w:r w:rsidR="004C54F9"><w:t>a</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00F52407"><w:t>The previous</w:t></w:r><w:r><w:t xml:space="preserve"> code snippets </w:t></w:r><w:r w:rsidR="00F52407"><w:t xml:space="preserve">showed that </w:t></w:r><w:r><w:t xml:space="preserve">the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and form data loading procedure</w:t></w:r><w:r w:rsidR="002A3548"><w:t>s do</w:t></w:r><w:r><w:t xml:space="preserve"> not involve </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t>. More than that</w:t></w:r><w:r w:rsidR="00F52407"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">they try </w:t></w:r><w:r><w:t xml:space="preserve">to avoid any interaction with </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve">. The form data handling and stickiness behavior has nothing to do with the </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve">. The stickiness is a feature </w:t></w:r><w:r w:rsidR="004C54F9"><w:t>that</w:t></w:r><w:r><w:t xml:space="preserve"> comes with</w:t></w:r><w:r w:rsidR="00C63C57"><w:t xml:space="preserve"> the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00BA74FE"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IPostBackDataHandler</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> interface. Just for clarity</w:t></w:r><w:r w:rsidR="00F52407"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">here it is </w:t></w:r><w:r><w:t xml:space="preserve">in its </w:t></w:r><w:r w:rsidR="00F52407"><w:t xml:space="preserve">entire </w:t></w:r><w:r><w:t>glory:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00F3209B" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:r><w:t xml:space="preserve">Listing </w:t></w:r><w:r w:rsidR="00F52407"><w:t>1-</w:t></w:r><w:r w:rsidR="009A02DC"><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="009A02DC"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="009A02DC"><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>8</w:t></w:r><w:r w:rsidR="009A02DC"><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t xml:space="preserve">. Code of IPostBackDataHandler interface </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>public interface IPostBackDataHandler</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    bool LoadPostData(string postDataKey, </w:t></w:r><w:r w:rsidR="000208F0"><w:sym w:font="Wingdings" w:char="F0C3"/></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">                      NameValueCollection postCollection);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    void RaisePostDataChangedEvent();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA74FE"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">You know now that </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> tracks changes and stores these changes. You know, too, that the stickiness of the form has nothing to do with </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A244CC"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>Now</w:t></w:r><w:r w:rsidR="002A3548"><w:t>,</w:t></w:r><w:r w:rsidR="000208F0"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">all </w:t></w:r><w:r w:rsidR="00C63C57"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">controls </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">have been </w:t></w:r><w:r><w:t xml:space="preserve">initialized, properly filled with declarative data, </w:t></w:r><w:r w:rsidR="00F52407"><w:t xml:space="preserve">over-written </w:t></w:r><w:r><w:t>with data posted back from</w:t></w:r><w:r w:rsidR="00F52407"><w:t xml:space="preserve"> the</w:t></w:r><w:r><w:t xml:space="preserve"> browser</w:t></w:r><w:r w:rsidR="002A3548"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">are </w:t></w:r><w:r><w:t>ready to enter the next state.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A244CC"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t>Step Five—Load Step</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00FB70BB" w:rsidP="00A244CC"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Most </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">descriptions of ASP.NET put user code into the </w:t></w:r><w:r w:rsidR="00165A64" w:rsidRPr="00A244CC"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Load</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> event. In the explanation of life cycles you read about this important step. </w:t></w:r><w:r w:rsidR="002A3548"><w:t>I as i</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">t signals </w:t></w:r><w:r><w:t xml:space="preserve">to </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">us that the control is now “ready”. </w:t></w:r><w:r w:rsidR="002A3548"><w:t>Even i</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">f you </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">don’t </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">want to do </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">anything </w:t></w:r><w:r w:rsidR="00165A64"><w:t>else with the control</w:t></w:r><w:r><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> it’s ready to be rendered. This is why the best step </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">for adding </w:t></w:r><w:r w:rsidR="00165A64"><w:t>custom code and modify</w:t></w:r><w:r w:rsidR="002A3548"><w:t>ing</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> the behavior of the page is the load step. Internally</w:t></w:r><w:r w:rsidR="002A3548"><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> it’s much easier, because there is nothing to do. Anything that is supposed to happen here is up to you.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00A244CC" w:rsidRDefault="00165A64" w:rsidP="00A244CC"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r w:rsidRPr="00A244CC"><w:lastRenderedPageBreak/><w:t xml:space="preserve">Step Six—Raising </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A244CC"><w:t>Postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidRPr="00A244CC"><w:t xml:space="preserve"> Events</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A244CC"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r w:rsidRPr="00A244CC"><w:t xml:space="preserve">Several controls can fire events, depending on </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidRPr="00A244CC"><w:t xml:space="preserve">form data posted back. </w:t></w:r><w:r><w:t xml:space="preserve">After </w:t></w:r><w:r w:rsidR="00CD07D3"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>loading step</w:t></w:r><w:r w:rsidR="00CD07D3"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the events </w:t></w:r><w:r w:rsidR="00CD07D3"><w:t xml:space="preserve">are </w:t></w:r><w:r><w:t xml:space="preserve">fired one by one. For example, the </w:t></w:r><w:r w:rsidRPr="00A244CC"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Button</w:t></w:r><w:r><w:t xml:space="preserve"> control can fire a </w:t></w:r><w:r w:rsidRPr="00A244CC"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Click</w:t></w:r><w:r><w:t xml:space="preserve"> event, whereas the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A244CC"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>DropDownList</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidRPr="00A244CC"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>fires</w:t></w:r><w:r w:rsidRPr="00A244CC"><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A244CC"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>SelectedIndexChanged</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">. This is another major feature that makes the dynamic portion of an ASP.NET page </w:t></w:r><w:r w:rsidR="00CD07D3"><w:t xml:space="preserve">so </w:t></w:r><w:r><w:t xml:space="preserve">powerful and easy to program. </w:t></w:r></w:p><w:p w:rsidR="00C619A8" w:rsidRDefault="00165A64" w:rsidP="00A244CC"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">There are two kinds of event fired </w:t></w:r><w:r w:rsidR="00C619A8"><w:t xml:space="preserve">during </w:t></w:r><w:r><w:t xml:space="preserve">the page’s </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A244CC"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>One</w:t></w:r><w:r w:rsidR="00C619A8"><w:t xml:space="preserve"> kind</w:t></w:r><w:r><w:t xml:space="preserve"> is responsible </w:t></w:r><w:r w:rsidR="00C619A8"><w:t xml:space="preserve">for </w:t></w:r><w:r><w:t xml:space="preserve">changes, indicated by the suffix </w:t></w:r><w:r w:rsidRPr="00B1203F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>_Change</w:t></w:r><w:r><w:t xml:space="preserve">. The implementation </w:t></w:r><w:r w:rsidR="00C619A8"><w:t xml:space="preserve">of </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00B1203F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IPostBackDataHandler</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidRPr="00B1203F"><w:t xml:space="preserve"> is responsible </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">for recognizing </w:t></w:r><w:r w:rsidRPr="00B1203F"><w:t xml:space="preserve">this and </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">firing </w:t></w:r><w:r w:rsidRPr="00B1203F"><w:t>the appropriate event by calling</w:t></w:r><w:r w:rsidR="00C619A8"><w:t xml:space="preserve"> the</w:t></w:r><w:r w:rsidRPr="00B1203F"><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00B1203F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>RaisePostDataChangedEvent</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method. In </w:t></w:r><w:r w:rsidR="00C619A8"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">case of the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00B1203F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>TextBox</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00C619A8"><w:t xml:space="preserve">example, </w:t></w:r><w:r><w:t xml:space="preserve">the event exposed by the class is </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00B1203F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnTextChanged</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A244CC"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The other kind of event is </w:t></w:r><w:r w:rsidR="00C619A8"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>trigger event. For</w:t></w:r><w:r w:rsidR="00C619A8"><w:t xml:space="preserve"> example, </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">in the case of </w:t></w:r><w:r><w:t xml:space="preserve">a </w:t></w:r><w:r w:rsidRPr="00B1203F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Button</w:t></w:r><w:r><w:t xml:space="preserve"> this is</w:t></w:r><w:r w:rsidR="00C619A8"><w:t xml:space="preserve"> a</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="00B1203F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Click</w:t></w:r><w:r w:rsidR="00C619A8"><w:t xml:space="preserve"> event</w:t></w:r><w:r><w:t xml:space="preserve">. There is no special state required and no data </w:t></w:r><w:r w:rsidR="00C619A8"><w:t xml:space="preserve">to </w:t></w:r><w:r><w:t xml:space="preserve">compare. To handle trigger events the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00B1203F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>IPostBackEventHandler</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> interface is used:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00B1203F" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:r><w:t xml:space="preserve">Listing </w:t></w:r><w:r w:rsidR="00C168AB"><w:t>1-</w:t></w:r><w:r w:rsidR="009A02DC"><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="009A02DC"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="009A02DC"><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A"><w:t>9</w:t></w:r><w:r w:rsidR="009A02DC"><w:fldChar w:fldCharType="end"/></w:r><w:r><w:t xml:space="preserve">. Code of IPostBackEventHandler interface </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>public interface IPostBackEventHandler</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    void RaisePostBackEvent(string eventArgument);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r w:rsidRPr="003B7E25"><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00B1203F" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r w:rsidRPr="00B1203F"><w:t>To understand what happens internally</w:t></w:r><w:r w:rsidR="00D47D3D"><w:t>, we</w:t></w:r><w:r w:rsidR="002A3548"><w:t>’ll</w:t></w:r><w:r w:rsidR="00D47D3D"><w:t xml:space="preserve"> look into</w:t></w:r><w:r w:rsidRPr="00B1203F"><w:t xml:space="preserve"> the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00B1203F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>RaisePostBackEvent</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method</w:t></w:r><w:r w:rsidR="00D47D3D"><w:t xml:space="preserve">. Listing 1-10 </w:t></w:r><w:r w:rsidR="004C54F9"><w:t xml:space="preserve">is </w:t></w:r><w:r w:rsidR="00D47D3D"><w:t xml:space="preserve">for </w:t></w:r><w:r w:rsidR="004C54F9"><w:t xml:space="preserve">a </w:t></w:r><w:r w:rsidR="004C54F9" w:rsidRPr="004C54F9"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Button</w:t></w:r><w:r w:rsidR="004C54F9"><w:t xml:space="preserve"> control.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="004C54F9" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:r w:rsidRPr="002569A7"><w:t xml:space="preserve">Listing </w:t></w:r><w:r w:rsidR="00D47D3D"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00011B23" w:rsidRPr="002569A7"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A" w:rsidRPr="002569A7"><w:t>10</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r w:rsidRPr="002569A7"><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidRPr="004C54F9"><w:t>Code of</w:t></w:r><w:r w:rsidR="004C54F9" w:rsidRPr="004C54F9"><w:t xml:space="preserve"> typical implementation of</w:t></w:r><w:r w:rsidRPr="004C54F9"><w:t xml:space="preserve"> IPostBackEventHandler interface </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>protected virtual void RaisePostBackEvent(string eventArgument)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    base.ValidateEvent(this.UniqueID, eventArgument);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    if (this.CausesValidation)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        this.Page.Validate(this.ValidationGroup);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    this.OnClick(EventArgs.Empty);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    this.OnCommand(new CommandEventArgs( </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">                       </w:t></w:r><w:r w:rsidRPr="003B7E25"><w:t>this.CommandName, this.CommandArgument));</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r w:rsidRPr="003B7E25"><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r w:rsidRPr="00B1203F"><w:t xml:space="preserve">As you can see this method raises more than </w:t></w:r><w:r><w:t>o</w:t></w:r><w:r w:rsidRPr="00B1203F"><w:t>ne event</w:t></w:r><w:r><w:t xml:space="preserve"> in a predefined and hard</w:t></w:r><w:r w:rsidR="00100630"><w:t>-</w:t></w:r><w:r><w:t xml:space="preserve">coded order. </w:t></w:r><w:r w:rsidR="00100630"><w:t>S</w:t></w:r><w:r><w:t>everal other actions take place first</w:t></w:r><w:r w:rsidR="002A3548"><w:t>—</w:t></w:r><w:r w:rsidR="00100630"><w:t xml:space="preserve">such as </w:t></w:r><w:r><w:t>validation</w:t></w:r><w:r w:rsidR="002A3548"><w:t>—</w:t></w:r><w:r><w:t xml:space="preserve">but the events being fired </w:t></w:r><w:r w:rsidR="00100630"><w:t xml:space="preserve">are </w:t></w:r><w:r><w:t>unconditional.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00B1203F" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">Again, all these events can </w:t></w:r><w:r w:rsidR="007F2989"><w:t xml:space="preserve">only </w:t></w:r><w:r><w:t xml:space="preserve">happen </w:t></w:r><w:r w:rsidR="007F2989"><w:t xml:space="preserve">during </w:t></w:r><w:r><w:t xml:space="preserve">a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">. Calling the page using GET will </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">do </w:t></w:r><w:r><w:t xml:space="preserve">nothing. If you have a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00B1203F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>DropDownlist</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="002A3548"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">if you </w:t></w:r><w:r><w:t>change the current index programmatically</w:t></w:r><w:r w:rsidR="002A3548"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> nothing </w:t></w:r><w:r w:rsidR="002A3548"><w:t xml:space="preserve">will </w:t></w:r><w:r><w:t xml:space="preserve">happen unless the page is posted back. This is different from </w:t></w:r><w:r w:rsidR="003E6302"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>windows programming model, where the controls can fire events immediately and independen</w:t></w:r><w:r w:rsidR="003E6302"><w:t>t</w:t></w:r><w:r w:rsidR="002A3548"><w:t>ly</w:t></w:r><w:r><w:t xml:space="preserve"> of a particular state.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r w:rsidRPr="00B1203F"><w:lastRenderedPageBreak/><w:t>Step Seven—Storing the View</w:t></w:r><w:r w:rsidR="00985EF2"><w:t xml:space="preserve"> S</w:t></w:r><w:r w:rsidRPr="00B1203F"><w:t>tate</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">After all events </w:t></w:r><w:r w:rsidR="00985EF2"><w:t xml:space="preserve">have been </w:t></w:r><w:r><w:t>fired</w:t></w:r><w:r w:rsidR="00985EF2"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the current state of </w:t></w:r><w:r w:rsidR="00985EF2"><w:t xml:space="preserve">each </w:t></w:r><w:r><w:t>control</w:t></w:r><w:r w:rsidR="00985EF2"><w:t>’</w:t></w:r><w:r><w:t xml:space="preserve">s property changes </w:t></w:r><w:r w:rsidR="00985EF2"><w:t>need</w:t></w:r><w:r w:rsidR="00E77F32"><w:t>s</w:t></w:r><w:r w:rsidR="00985EF2"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>to be stored. The tracked changes are retrieved recursively through the controls hierarchy. To get the value back</w:t></w:r><w:r w:rsidR="00985EF2"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00825D41"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>SaveViewState</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method of each control </w:t></w:r><w:r w:rsidR="00985EF2"><w:t xml:space="preserve">is </w:t></w:r><w:r><w:t xml:space="preserve">called. The collection of data is then serialized and </w:t></w:r><w:r w:rsidR="001E0F32"><w:t>en</w:t></w:r><w:r><w:t xml:space="preserve">coded using Base64. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00B1203F" w:rsidRDefault="00165A64" w:rsidP="00B1203F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">In the next step the string is saved to the hidden field named </w:t></w:r><w:r w:rsidRPr="0087121F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>__VIEWSTATE</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00825D41"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t xml:space="preserve">Step </w:t></w:r><w:r w:rsidR="001E0F32"><w:t>E</w:t></w:r><w:r><w:t>ight—Render the Page</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00825D41" w:rsidRDefault="00165A64" w:rsidP="0087121F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The render process runs through all </w:t></w:r><w:r w:rsidR="001E0F32"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">controls and </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">allows </w:t></w:r><w:r><w:t xml:space="preserve">them </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">to </w:t></w:r><w:r><w:t xml:space="preserve">render. This is done by a recursive call to all </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0087121F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>RenderControl</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> methods. The </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0087121F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>HtmlForm</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> control mentioned at the beginning is responsible </w:t></w:r><w:r w:rsidR="001E0F32"><w:t>for creating</w:t></w:r><w:r><w:t xml:space="preserve"> the </w:t></w:r><w:r w:rsidRPr="0087121F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>__VIEWSTATE</w:t></w:r><w:r><w:t xml:space="preserve"> hidden field, which is the container for </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> data.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0087121F"><w:pPr><w:pStyle w:val="berschrift2"/></w:pPr><w:r w:rsidRPr="0087121F"><w:t>The True Role of View</w:t></w:r><w:r w:rsidR="0096039D"><w:t xml:space="preserve"> S</w:t></w:r><w:r w:rsidRPr="0087121F"><w:t>tate</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00ED1AE3" w:rsidRDefault="00165A64" w:rsidP="00ED1AE3"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The eight states of the life cycle are virtually all important for </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve">. There are several more steps the various life cycles could run through, but these steps don’t </w:t></w:r><w:r w:rsidR="000D23AC"><w:t>affect</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> and we can </w:t></w:r><w:r w:rsidR="0096039D"><w:t xml:space="preserve">exclude </w:t></w:r><w:r><w:t xml:space="preserve">them for now. To understand the </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="000D23AC"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> it’s crucial to know what the</w:t></w:r><w:r w:rsidR="0096039D"><w:t xml:space="preserve"> purpose of</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve"> is</w:t></w:r><w:r><w:t>. As the name implies</w:t></w:r><w:r w:rsidR="00BE5635"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">view state </w:t></w:r><w:r><w:t xml:space="preserve">stores status information. </w:t></w:r><w:r w:rsidRPr="00ED1AE3"><w:t xml:space="preserve">But what kind of status is </w:t></w:r><w:r w:rsidR="000D23AC"><w:t>it</w:t></w:r><w:r w:rsidRPr="00ED1AE3"><w:t>?</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00ED1AE3" w:rsidRDefault="00165A64" w:rsidP="00ED1AE3"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r w:rsidRPr="00ED1AE3"><w:t xml:space="preserve">The hierarchy of controls </w:t></w:r><w:r><w:t xml:space="preserve">and the default values of properties are defined in the declarative part of the page. Take a look </w:t></w:r><w:r w:rsidR="00BE5635"><w:t xml:space="preserve">at </w:t></w:r><w:r><w:t xml:space="preserve">this markup: </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00ED1AE3" w:rsidRDefault="00165A64" w:rsidP="00ED1AE3"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r w:rsidRPr="00ED1AE3"><w:t>&lt;a</w:t></w:r><w:r><w:t>sp:Label runat=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>server</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> Text=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>W</w:t></w:r><w:r w:rsidRPr="00ED1AE3"><w:t xml:space="preserve">e learn </w:t></w:r><w:r><w:t>v</w:t></w:r><w:r w:rsidRPr="00ED1AE3"><w:t>iewstate</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r w:rsidRPr="00ED1AE3"><w:t xml:space="preserve"> Font-Bold=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r w:rsidRPr="00ED1AE3"><w:t>true</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r w:rsidRPr="00ED1AE3"><w:t xml:space="preserve"> /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00165A64" w:rsidP="00ED1AE3"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>Neit</w:t></w:r><w:r w:rsidRPr="00ED1AE3"><w:t>h</w:t></w:r><w:r><w:t>e</w:t></w:r><w:r w:rsidRPr="00ED1AE3"><w:t>r</w:t></w:r><w:r><w:t xml:space="preserve"> the text </w:t></w:r><w:r w:rsidR="0029321B"><w:t>“</w:t></w:r><w:r><w:t>We</w:t></w:r><w:r w:rsidRPr="00ED1AE3"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">learn </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>viewstate</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">” nor the value </w:t></w:r><w:r w:rsidRPr="00ED1AE3"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Bold</w:t></w:r><w:r><w:t xml:space="preserve"> of the </w:t></w:r><w:r w:rsidRPr="00ED1AE3"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Font</w:t></w:r><w:r><w:t xml:space="preserve"> property is stored in </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve">. The values are assigned during the initializing phase. </w:t></w:r><w:r w:rsidR="00BE5635"><w:t>V</w:t></w:r><w:r w:rsidR="0009536C"><w:t>iew state</w:t></w:r><w:r w:rsidR="00BE5635"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> in contrast</w:t></w:r><w:r w:rsidR="00BE5635"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> tracks changes made </w:t></w:r><w:r w:rsidR="00722667" w:rsidRPr="000208F0"><w:rPr><w:i/></w:rPr><w:t>programmatically</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidRPr="003B7E25"><w:t>This leads to the first definition</w:t></w:r><w:r w:rsidR="000208F0"><w:t xml:space="preserve"> about view state</w:t></w:r><w:r w:rsidRPr="003B7E25"><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="008D54B4" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="NoteTipCaution"/></w:pPr><w:r w:rsidRPr="008D54B4"><w:t>Note:</w:t></w:r><w:r w:rsidRPr="008D54B4"><w:tab/></w:r><w:r w:rsidR="00BE5635"><w:t>V</w:t></w:r><w:r w:rsidR="0009536C"><w:t>iew state</w:t></w:r><w:r w:rsidRPr="008D54B4"><w:t xml:space="preserve"> becomes important </w:t></w:r><w:r><w:t xml:space="preserve">only </w:t></w:r><w:r w:rsidRPr="008D54B4"><w:t>if the page contains custom code.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>However, if a page contains custom code</w:t></w:r><w:r w:rsidR="00B55323"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> this does not </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">necessarily </w:t></w:r><w:r><w:t xml:space="preserve">mean that </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> is required. </w:t></w:r><w:r w:rsidR="00B55323"><w:t>L</w:t></w:r><w:r><w:t xml:space="preserve">et’s look into another code snippet. The following example has two buttons. Both cause a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">, but only one has an </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00722667" w:rsidRPr="00722667"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnClick</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event attached and handled to access properties in code.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="008D54B4" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:r w:rsidRPr="006C4183"><w:t xml:space="preserve">Listing </w:t></w:r><w:r w:rsidR="00B55323"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00011B23" w:rsidRPr="006C4183"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A" w:rsidRPr="006C4183"><w:t>11</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r w:rsidRPr="008D54B4"><w:t xml:space="preserve">. </w:t></w:r><w:r><w:t>Markup</w:t></w:r><w:r w:rsidRPr="008D54B4"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">of the </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> test</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="008D54B4" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r w:rsidRPr="008D54B4"><w:t xml:space="preserve">&lt;asp:Label ID="LabelMessage" runat="server" Text="We learn </w:t></w:r><w:r><w:t>v</w:t></w:r><w:r w:rsidRPr="008D54B4"><w:t>iew</w:t></w:r><w:r><w:t>s</w:t></w:r><w:r w:rsidRPr="008D54B4"><w:t>tate"&gt;&lt;/asp:Label&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>&lt;br /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">&lt;asp:Button ID="ButtonSubmit" runat="server" onclick="ButtonSubmit_Click" </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="008D54B4" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    </w:t></w:r><w:r w:rsidRPr="008D54B4"><w:t>Text="Change Text" Width="150px" /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="003B7E25"><w:t>&lt;br /&gt;</w:t></w:r></w:p><w:p w:rsidR="00116593" w:rsidRDefault="00165A64"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="008D54B4"><w:t xml:space="preserve">&lt;asp:Button ID="ButtonEmpty" runat="server" Text="No Change" </w:t></w:r></w:p><w:p w:rsidR="00116593" w:rsidRDefault="00165A64"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r w:rsidRPr="008D54B4"><w:t xml:space="preserve">    </w:t></w:r><w:r w:rsidRPr="003B7E25"><w:t>Width="150px" /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="008D54B4" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r w:rsidRPr="008D54B4"><w:lastRenderedPageBreak/><w:t xml:space="preserve">The code of the click handler </w:t></w:r><w:r w:rsidR="00B55323"><w:t>is</w:t></w:r><w:r w:rsidRPr="008D54B4"><w:t xml:space="preserve"> simple</w:t></w:r><w:r><w:t>, too.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="008D54B4" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:r w:rsidRPr="006C4183"><w:t xml:space="preserve">Listing </w:t></w:r><w:r w:rsidR="00B55323"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00011B23" w:rsidRPr="006C4183"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A" w:rsidRPr="006C4183"><w:t>12</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r w:rsidRPr="008D54B4"><w:t xml:space="preserve">. </w:t></w:r><w:r><w:t>Code of the Click handler</w:t></w:r><w:r w:rsidRPr="008D54B4"><w:t xml:space="preserve"> </w:t></w:r></w:p><w:p w:rsidR="00116593" w:rsidRDefault="00165A64"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>protected void ButtonSubmit_Click(object sender, EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="003B7E25"><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r w:rsidRPr="003B7E25"><w:t xml:space="preserve">    LabelMessage.Text = "Hello Geek!";</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r w:rsidRPr="003B7E25"><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">At the first call of the page the ASPX markup </w:t></w:r><w:r w:rsidR="00B55323"><w:t xml:space="preserve">is </w:t></w:r><w:r><w:t xml:space="preserve">processed and all values of properties </w:t></w:r><w:r w:rsidR="00B55323"><w:t xml:space="preserve">are </w:t></w:r><w:r><w:t xml:space="preserve">set, especially the text “We learn </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>viewstate</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">” </w:t></w:r><w:r w:rsidR="00B55323"><w:t xml:space="preserve">for </w:t></w:r><w:r><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidRPr="008D54B4"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Label</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00B55323"><w:t>V</w:t></w:r><w:r w:rsidR="0009536C"><w:t>iew state</w:t></w:r><w:r><w:t xml:space="preserve"> stores nothing and </w:t></w:r><w:r w:rsidR="00B55323"><w:t xml:space="preserve">therefore </w:t></w:r><w:r><w:t xml:space="preserve">contains only </w:t></w:r><w:r w:rsidR="007449CC"><w:t>internal</w:t></w:r><w:r><w:t xml:space="preserve"> information</w:t></w:r><w:r w:rsidR="007449CC"><w:t xml:space="preserve"> without custom data</w:t></w:r><w:r><w:t xml:space="preserve">: </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="008D54B4" w:rsidRDefault="00165A64" w:rsidP="008D54B4"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r w:rsidRPr="008D54B4"><w:t xml:space="preserve">&lt;input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" </w:t></w:r><w:r w:rsidR="007449CC"><w:sym w:font="Wingdings" w:char="F0C3"/></w:r><w:r w:rsidR="007449CC"><w:br/><w:t xml:space="preserve">       va</w:t></w:r><w:r w:rsidRPr="008D54B4"><w:t>lue="/wEPDwULLTExNjMzNDIxNjRkZGn5amjBsOOap6CvRbpUM5D9Mlgo" /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="008D54B4" w:rsidRDefault="00165A64" w:rsidP="001074EE"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Now click on the button “No Change”. This forces the page to </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> and reload, but nothing more happens, because no custom code is involved. Now click </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">on </w:t></w:r><w:r><w:t xml:space="preserve">the other button “Change Text”. Again a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00720A0F"><w:t>occurs</w:t></w:r><w:r w:rsidR="000D23AC"><w:t>,</w:t></w:r><w:r w:rsidR="00720A0F"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">but now the handler </w:t></w:r><w:r w:rsidR="007449CC"><w:t>processes</w:t></w:r><w:r><w:t xml:space="preserve"> the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="001074EE"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnClick</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event. In the code</w:t></w:r><w:r w:rsidR="000D23AC"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the text of the label gets a new value. </w:t></w:r><w:r w:rsidR="0014133A"><w:t>V</w:t></w:r><w:r w:rsidR="0009536C"><w:t>iew state</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="0014133A"><w:t xml:space="preserve">is changed to </w:t></w:r><w:r><w:t>this</w:t></w:r><w:r w:rsidR="000D23AC"><w:t>:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="001074EE" w:rsidRDefault="00165A64" w:rsidP="001074EE"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r w:rsidRPr="001074EE"><w:t>&lt;input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" va-lue="/wEPDwULLTExNjMzNDIxNjQPZBYCAgMPZBYCAgEPDxYCHgRUZXh0BQtIYWxsbyBHZWVrIWRkZHTeN11LiTv5BJ0xSdey0L0Qsnk8" /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="001074EE"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">As you see, the coded part is bigger and </w:t></w:r><w:r w:rsidR="00497FC5"><w:t xml:space="preserve">obviously </w:t></w:r><w:r><w:t xml:space="preserve">contains more information. </w:t></w:r><w:r w:rsidR="000D23AC"><w:t>This</w:t></w:r><w:r><w:t xml:space="preserve"> is no surprise. </w:t></w:r><w:r w:rsidR="00C54526"><w:t>I</w:t></w:r><w:r><w:t xml:space="preserve">f you click </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">now </w:t></w:r><w:r><w:t>on the other button “No Change”, the page loads as expected and no custom code is run. However, the text of the label is still “Hello geek!” There is no custom code</w:t></w:r><w:r w:rsidR="00C54526"><w:t>—</w:t></w:r><w:r><w:t xml:space="preserve">the initializing phase has obviously passed and </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">has </w:t></w:r><w:r><w:t>set the declarative</w:t></w:r><w:r w:rsidR="00C54526"><w:t>ly</w:t></w:r><w:r><w:t xml:space="preserve"> assigned values. </w:t></w:r><w:r w:rsidR="00C54526"><w:t>But</w:t></w:r><w:r><w:t xml:space="preserve"> the change made programmatically in an earlier </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is still there—it’s persistent. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="001074EE" w:rsidRDefault="00165A64" w:rsidP="001074EE"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">And that’s </w:t></w:r><w:r w:rsidR="0057091C"><w:t xml:space="preserve">really </w:t></w:r><w:r><w:t>the</w:t></w:r><w:r w:rsidR="0057091C"><w:t xml:space="preserve"> purpose of</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">During </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="000D23AC"><w:t>postbacks</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="000D23AC"><w:t>, i</w:t></w:r><w:r><w:t xml:space="preserve">t makes programmatic changes to control properties persistent. To check whether this behavior is really managed by </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="0057091C"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> just disable it using the </w:t></w:r><w:r w:rsidRPr="0029321B"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>@Page</w:t></w:r><w:r><w:t xml:space="preserve"> directive:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="001074EE"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>&lt;%@ Page Language="C#" EnableViewState="false"</w:t></w:r><w:r w:rsidR="0029321B"><w:t xml:space="preserve"> …</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="001074EE"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The first click </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">on </w:t></w:r><w:r><w:t>“Change text” still works as expected. The new text appears. However, when you click</w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve"> on</w:t></w:r><w:r><w:t xml:space="preserve"> “No change”</w:t></w:r><w:r w:rsidR="000D23AC"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> forces the page to reload and the declarative part of the markup </w:t></w:r><w:r w:rsidR="0057091C"><w:t>re</w:t></w:r><w:r><w:t>load</w:t></w:r><w:r w:rsidR="0057091C"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> the default values.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="0057091C" w:rsidP="001074EE"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>I</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">magine that the </w:t></w:r><w:r><w:t xml:space="preserve">“no view state” </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">behavior described </w:t></w:r><w:r><w:t xml:space="preserve">above is the intended behavior </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">in most cases. If you have </w:t></w:r><w:r w:rsidR="004C54F9"><w:t xml:space="preserve">a </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">label, you usually want </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">it </w:t></w:r><w:r w:rsidR="00165A64"><w:t>to show its default text. In case of an exception you might want to display a different text. But subsequent reloads usually store the state of such an exception by either overwriting the text again or let</w:t></w:r><w:r w:rsidR="00CC0498"><w:t>ting</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> the default text appear. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="001074EE" w:rsidRDefault="00165A64" w:rsidP="001074EE"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">Globally disabling </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> is no</w:t></w:r><w:r w:rsidR="007E197B"><w:t>t an</w:t></w:r><w:r><w:t xml:space="preserve"> option either, because several complex controls use it to handle their behavior properly, such as</w:t></w:r><w:r w:rsidR="007E197B"><w:t xml:space="preserve"> the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="008D136D"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>GridView</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> control. </w:t></w:r><w:r w:rsidR="003423F1"><w:t>Y</w:t></w:r><w:r><w:t>ou need to understand</w:t></w:r><w:r w:rsidR="003423F1"><w:t xml:space="preserve"> the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> to prevent overuse in case you don’t need it</w:t></w:r><w:r w:rsidR="003423F1"><w:t>.</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="003423F1"><w:t>I</w:t></w:r><w:r><w:t>n case you really need th</w:t></w:r><w:r w:rsidR="003423F1"><w:t>e</w:t></w:r><w:r><w:t xml:space="preserve"> special behavior</w:t></w:r><w:r w:rsidR="003423F1"><w:t xml:space="preserve"> the view state provides</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="003423F1"><w:t xml:space="preserve">you </w:t></w:r><w:r><w:t>use it correctly</w:t></w:r><w:r w:rsidR="003423F1"><w:t>, then</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="008D136D" w:rsidRDefault="003423F1" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="berschrift2"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t>View State Anti-Patterns</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Improper use of </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> is easily </w:t></w:r><w:r w:rsidR="00E32EA1"><w:t xml:space="preserve">avoided </w:t></w:r><w:r><w:t xml:space="preserve">once you really understand how it </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>works.</w:t></w:r><w:r w:rsidR="00E32EA1"><w:t>T</w:t></w:r><w:r><w:t>o</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> make things clear</w:t></w:r><w:r w:rsidR="000D23AC"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> I’ll explain the most frequent misuse scenarios. </w:t></w:r><w:r w:rsidR="00B471BC"><w:t xml:space="preserve">Examples of how </w:t></w:r><w:r w:rsidR="00722667" w:rsidRPr="00722667"><w:rPr><w:i/></w:rPr><w:t>not</w:t></w:r><w:r w:rsidR="00B471BC"><w:t xml:space="preserve"> to use view state will help you understand how to use view state correctly</w:t></w:r><w:r w:rsidR="000D23AC"><w:t>:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="NumListFirst"/></w:pPr><w:r><w:t>1.</w:t></w:r><w:r><w:tab/><w:t>Forcing a default.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="NumList"/></w:pPr><w:r><w:t>2.</w:t></w:r><w:r><w:tab/><w:t>Persisting static data.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="NumList"/></w:pPr><w:r><w:t>3.</w:t></w:r><w:r><w:tab/><w:t>Persisting “cheap” data.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="NumList"/></w:pPr><w:r><w:t>4.</w:t></w:r><w:r><w:tab/><w:t>Initializing child controls.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00A20D8F" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="NumList"/></w:pPr><w:r><w:t xml:space="preserve">5. </w:t></w:r><w:proofErr w:type="gramStart"/><w:r><w:t>Adding</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t xml:space="preserve"> controls dynamically.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="NumListLast"/></w:pPr><w:r><w:t>6.</w:t></w:r><w:r><w:tab/></w:r><w:proofErr w:type="gramStart"/><w:r><w:t>Initializing</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t xml:space="preserve"> dynamically created controls.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">I’ll explain </w:t></w:r><w:r w:rsidR="003D4E4D"><w:t xml:space="preserve">each of </w:t></w:r><w:r><w:t>these scenarios to make things as clear as possible.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="005170F8"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t xml:space="preserve">Forcing a </w:t></w:r><w:r w:rsidR="003423F1"><w:t>Default</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="003423F1" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Forcing a default </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>vlue</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00165A64"><w:t>i</w:t></w:r><w:r w:rsidR="004C54F9"><w:t xml:space="preserve">s a </w:t></w:r><w:r w:rsidR="003D4E4D"><w:t xml:space="preserve">very </w:t></w:r><w:r w:rsidR="004C54F9"><w:t>common misuse. Fortu</w:t></w:r><w:r w:rsidR="00165A64"><w:t>n</w:t></w:r><w:r w:rsidR="004C54F9"><w:t>a</w:t></w:r><w:r w:rsidR="00165A64"><w:t>t</w:t></w:r><w:r w:rsidR="003D4E4D"><w:t>e</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">ly, it’s even </w:t></w:r><w:r w:rsidR="003D4E4D"><w:t xml:space="preserve">easier </w:t></w:r><w:r w:rsidR="00165A64"><w:t>to fix. It’s also a good demonstration of the KISS</w:t></w:r><w:r w:rsidR="00165A64"><w:rPr><w:rStyle w:val="Funotenzeichen"/></w:rPr><w:footnoteReference w:id="4"/></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> principle. </w:t></w:r><w:r><w:t>The developers of ASP.NET did a tremendous job to give us a powerful and well-designed toolkit. The whole framework is an infrastructure thing and provides stable and reliable blocks of code for basic stuff. Doing too much infrastructure work is a signal that something is going wrong.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Assume that you want to store some private data used in a user control. The following code uses the </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve">, </w:t></w:r><w:r w:rsidR="00A2000D"><w:t xml:space="preserve">which, </w:t></w:r><w:r><w:t>in principle</w:t></w:r><w:r w:rsidR="00A2000D"><w:t>, is</w:t></w:r><w:r><w:t xml:space="preserve"> not a bad idea.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="008D136D" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:bookmarkStart w:id="20" w:name="_Ref221872212"/><w:r w:rsidRPr="006C4183"><w:t xml:space="preserve">Listing </w:t></w:r><w:r w:rsidR="00C824ED"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00011B23" w:rsidRPr="006C4183"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="0074712A" w:rsidRPr="006C4183"><w:t>13</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:bookmarkEnd w:id="20"/><w:r w:rsidRPr="008D54B4"><w:t xml:space="preserve">. </w:t></w:r><w:r><w:t>DON’T TRY THIS AT HOME: a wrong</w:t></w:r><w:r w:rsidR="00301B6D"><w:t>ly</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00301B6D"><w:t xml:space="preserve">written </w:t></w:r><w:r><w:t>user control</w:t></w:r><w:r w:rsidRPr="008D54B4"><w:t xml:space="preserve"> </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>public class MyControl : WebControl</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  public string MyData</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    get { return ViewState[</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>MyData</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>] as string;  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    set { ViewState[</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>MyData</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>] = value; }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r><w:r><w:br/></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  protected override OnLoad(EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     if (!IsPostBack)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">       this.</w:t></w:r><w:r w:rsidRPr="008D136D"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>MyData = Session[</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>Control</w:t></w:r><w:r w:rsidRPr="008D136D"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>MyData</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>] as string;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     base.OnLoad();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="008D136D"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">You </w:t></w:r><w:r w:rsidR="00141DF2"><w:t>may have written</w:t></w:r><w:r><w:t xml:space="preserve"> code </w:t></w:r><w:r w:rsidR="00141DF2"><w:t xml:space="preserve">like this </w:t></w:r><w:r><w:t xml:space="preserve">before. It’s not </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">a </w:t></w:r><w:r><w:t>bad style</w:t></w:r><w:r w:rsidR="000D23AC"><w:t>; it’s</w:t></w:r><w:r><w:t xml:space="preserve"> simply wrong. To understand </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">my </w:t></w:r><w:r><w:t xml:space="preserve">harsh </w:t></w:r><w:r w:rsidR="00E77F32"><w:t>judgment</w:t></w:r><w:r w:rsidR="00141DF2"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> let’s examine the intent of the control. The developer wrote a user control with the public property </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>MyData</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">. This gives other developers access to it </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">in order </w:t></w:r><w:r><w:t>to put the control in</w:t></w:r><w:r w:rsidR="00B8211E"><w:t>to</w:t></w:r><w:r><w:t xml:space="preserve"> a </w:t></w:r><w:r w:rsidR="00B8211E"><w:t xml:space="preserve">defined </w:t></w:r><w:r><w:t>state using markup like this:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t>&lt;alias:mycontrol runat=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>server</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> Text=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>Show this label</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> id=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>myControl1</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> /&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="006C4183" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>This compiles and runs well without any exception</w:t></w:r><w:r w:rsidR="00B8211E"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00B8211E"><w:t>However</w:t></w:r><w:r><w:t xml:space="preserve">, it doesn’t work as expected because the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>MyData</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> property is never set. Instead, the </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> of the page starts </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">growing </w:t></w:r><w:r><w:t xml:space="preserve">because </w:t></w:r><w:r w:rsidR="003423F1"><w:t>the view state field</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="003423F1"><w:t>stores this</w:t></w:r><w:r><w:t xml:space="preserve"> private information. From that perspective</w:t></w:r><w:r w:rsidR="000D23AC"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> it’s doing well</w:t></w:r><w:r w:rsidR="00B8211E"><w:t>;</w:t></w:r><w:r><w:t xml:space="preserve"> it holds some data. </w:t></w:r><w:r w:rsidR="000D23AC"><w:t>Also</w:t></w:r><w:r><w:t xml:space="preserve">, remember the life cycle events. </w:t></w:r><w:r w:rsidR="000D23AC"><w:t>It’s</w:t></w:r><w:r><w:t xml:space="preserve"> boring to repeat </w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve">them </w:t></w:r><w:r><w:t xml:space="preserve">again and again, but </w:t></w:r><w:r w:rsidR="003423F1"><w:t>everything in ASP.NET is based on the life cycle</w:t></w:r><w:r><w:t xml:space="preserve">. In </w:t></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="003423F1"><w:instrText xml:space="preserve"> REF _Ref221872212 \h </w:instrText></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="separate"/></w:r><w:proofErr w:type="gramStart"/><w:r w:rsidR="003423F1" w:rsidRPr="006C4183"><w:t>Listing</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r w:rsidR="003423F1" w:rsidRPr="006C4183"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="003423F1"><w:t>1-</w:t></w:r><w:r w:rsidR="003423F1" w:rsidRPr="006C4183"><w:t>13</w:t></w:r><w:r w:rsidR="00D60028"><w:fldChar w:fldCharType="end"/></w:r><w:r w:rsidR="003423F1"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">the code is written into the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00BA2C51"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnLoad</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method. But</w:t></w:r><w:r w:rsidR="00D0772B"><w:t xml:space="preserve"> the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="00BA2C51"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Load</w:t></w:r><w:r><w:t xml:space="preserve"> stage is too late. </w:t></w:r><w:r w:rsidR="00D0772B"><w:t>V</w:t></w:r><w:r w:rsidR="0009536C"><w:t>iew state</w:t></w:r><w:r><w:t xml:space="preserve"> already tracks changes and now it’s being overwritten. That</w:t></w:r><w:r w:rsidR="00D0772B"><w:t>’s why</w:t></w:r><w:r><w:t xml:space="preserve"> it doesn’t make sense to write the data there. </w:t></w:r><w:r w:rsidRPr="006C4183"><w:t xml:space="preserve">Let’s improve </w:t></w:r><w:r w:rsidR="000D23AC"><w:t>our</w:t></w:r><w:r w:rsidR="000D23AC" w:rsidRPr="006C4183"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="006C4183"><w:t>example</w:t></w:r><w:r w:rsidR="00D0772B"><w:t>:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="008D136D" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="CodeCaption"/></w:pPr><w:r w:rsidRPr="006C4183"><w:t xml:space="preserve">Listing </w:t></w:r><w:r w:rsidR="00D0772B"><w:t>1-</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="begin"/></w:r><w:r w:rsidR="00011B23" w:rsidRPr="006C4183"><w:instrText xml:space="preserve"> SEQ Listing \* ARABIC </w:instrText></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="separate"/></w:r><w:r w:rsidR="003423F1"><w:t>16</w:t></w:r><w:r w:rsidR="00D60028"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:fldChar w:fldCharType="end"/></w:r><w:r w:rsidRPr="008D54B4"><w:t xml:space="preserve">. </w:t></w:r><w:r><w:t xml:space="preserve">Save to </w:t></w:r><w:r w:rsidR="004C54F9"><w:t xml:space="preserve">be </w:t></w:r><w:r><w:t xml:space="preserve">used at home: A well </w:t></w:r><w:r w:rsidR="00301B6D"><w:t xml:space="preserve">written </w:t></w:r><w:r><w:t>control</w:t></w:r><w:r w:rsidRPr="008D54B4"><w:t xml:space="preserve"> </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>public class MyControl : WebControl</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  public string MyData</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    get { </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">      if (ViewState[</w:t></w:r><w:r w:rsidR="004C54F9" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>MyData</w:t></w:r><w:r w:rsidR="004C54F9" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>] == null)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">        return Session[</w:t></w:r><w:r w:rsidR="004C54F9" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>Control</w:t></w:r><w:r w:rsidRPr="00BA2C51"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>MyData</w:t></w:r><w:r w:rsidR="004C54F9" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>] as string;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">      else</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">      return ViewState[</w:t></w:r><w:r w:rsidR="004C54F9" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>MyData</w:t></w:r><w:r w:rsidR="004C54F9" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve">] as string;  </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    set { ViewState[</w:t></w:r><w:r w:rsidR="004C54F9" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>MyData</w:t></w:r><w:r w:rsidR="004C54F9" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>] = value; }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BA2C51"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="002F10C8" w:rsidRDefault="000D23AC" w:rsidP="005170F8"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>This involves</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> less code and it’s working well. The default value in the session is now used without touching </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00165A64"><w:t>. Simply putting the control onto the page does not inc</w:t></w:r><w:r w:rsidR="004C54F9"><w:t>r</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">ease the size of </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="002F10C8"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnLoad</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> is out of the way </w:t></w:r><w:r w:rsidR="00E77F32"><w:t>here. The</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> assignment of properties happens in the Initializing phase</w:t></w:r><w:r w:rsidR="00FF75AF"><w:t>—</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">early enough </w:t></w:r><w:r w:rsidR="00FF75AF"><w:t xml:space="preserve">to </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">set values properly. In case the user of the control sets the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64"><w:t>MyData</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> property programmatically</w:t></w:r><w:r w:rsidR="00FF75AF"><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> is in full cry and stores the changes silently in the hidden field.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="005170F8"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t>Persisting constant data</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>A lot of data used in a page’s code never change</w:t></w:r><w:r w:rsidR="002564E9"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> during the life of the page or</w:t></w:r><w:r w:rsidR="002564E9"><w:t xml:space="preserve"> during the</w:t></w:r><w:r><w:t xml:space="preserve"> user’s session. Assume your application ha</w:t></w:r><w:r w:rsidR="004C54F9"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> some “My” section that is customizable by the user. After the user is logged on</w:t></w:r><w:r w:rsidR="002564E9"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> his or her name appears at the top of each page. Assume further that a user control is being written to </w:t></w:r><w:r w:rsidR="002564E9"><w:t xml:space="preserve">achieve </w:t></w:r><w:r><w:t xml:space="preserve">this. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="005073F5" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="CodeSingle"/><w:rPr><w:lang w:val="de-DE"/></w:rPr></w:pPr><w:r w:rsidRPr="005073F5"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:t>&lt;asp:label id=”lblUser” runat=”server”/&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">In </w:t></w:r><w:r w:rsidR="00411AA6"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>code behind portion the name is set:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="004C54F9" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">public </w:t></w:r><w:r w:rsidR="00165A64"><w:t>class MyControl : WebControl</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  protected override OnLoad(EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     lbluser.Text = CurrentUser.Name;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     base.OnLoad();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">This is code that would work well. However, it’s doing something under the </w:t></w:r><w:r w:rsidR="00411AA6"><w:t xml:space="preserve">hood that </w:t></w:r><w:r><w:t xml:space="preserve">we don’t want. The label has its own </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> and</w:t></w:r><w:r w:rsidR="00D0630F"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> as </w:t></w:r><w:r w:rsidR="00D0630F"><w:t xml:space="preserve">a </w:t></w:r><w:r><w:t>child control of the user control</w:t></w:r><w:r w:rsidR="00D0630F"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> it will store its changed properties in the parent’s </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve">. The user control is going to recognize this and store the change of </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve">. Storing the label’s text value in </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> doesn’t make sense</w:t></w:r><w:r w:rsidR="000D23AC"><w:t xml:space="preserve"> as, </w:t></w:r><w:r><w:t xml:space="preserve">each time it’s </w:t></w:r><w:proofErr w:type="gramStart"/><w:r><w:t>loaded</w:t></w:r><w:r w:rsidR="000D23AC"><w:t>,</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t xml:space="preserve"> the value is pulled from the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00BE0E8D"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>CurrentUser</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class.</w:t></w:r><w:r w:rsidR="00D0630F"><w:t xml:space="preserve"> The default behavior of controls is </w:t></w:r><w:r><w:t xml:space="preserve">an implicit usage of </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t>. Either you assign it once</w:t></w:r><w:r w:rsidR="00D0630F"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:r w:rsidR="003B4164"><w:t xml:space="preserve">hold </w:t></w:r><w:r><w:t xml:space="preserve">data in </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00D0630F"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> or you need to prevent it from using </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00D0630F"><w:t>T</w:t></w:r><w:r><w:t xml:space="preserve">he solution I would recommend looks </w:t></w:r><w:r w:rsidR="003B4164"><w:t xml:space="preserve">very </w:t></w:r><w:r><w:t>easy:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t>&lt;asp:label id=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>lblUser</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> runat=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>server</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> EnableViewstate=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>false</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> /&gt;</w:t></w:r></w:p><w:p w:rsidR="004C54F9" w:rsidRDefault="00AA6377" w:rsidP="004C54F9"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>D</w:t></w:r><w:r w:rsidR="004C54F9"><w:t xml:space="preserve">isable </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="004C54F9"><w:t xml:space="preserve"> on </w:t></w:r><w:r w:rsidR="003B4164"><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="004C54F9"><w:t>control level and it will work like a charm.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="005170F8"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t>Persisting cheap data</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>Sometime</w:t></w:r><w:r w:rsidR="00D0630F"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> you use data that change</w:t></w:r><w:r w:rsidR="005C3A75"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> frequently, depending on user action or external conditions. Assume you want to show a list of data on your page. It is a</w:t></w:r><w:r w:rsidR="005C3A75"><w:t xml:space="preserve"> small</w:t></w:r><w:r><w:t xml:space="preserve"> list and it doesn’t change frequently. But it could change or grow </w:t></w:r><w:r w:rsidR="005C3A75"><w:t xml:space="preserve">at </w:t></w:r><w:r><w:t>any time. Your site is already using a database</w:t></w:r><w:r w:rsidR="005C3A75"><w:t>;</w:t></w:r><w:r><w:t xml:space="preserve"> it’s fast and there is nothing wrong </w:t></w:r><w:r w:rsidR="005C3A75"><w:t xml:space="preserve">with </w:t></w:r><w:r><w:t xml:space="preserve">pulling the </w:t></w:r><w:r w:rsidR="005C3A75"><w:t xml:space="preserve">data </w:t></w:r><w:r><w:t>from a table.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t>&lt;asp:dropdownlist runat=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>server</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> id=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>ddlMyData</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> DataTextField=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>Name</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve">      DataValueField=</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>ID</w:t></w:r><w:r w:rsidR="0029321B" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>/&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>The (</w:t></w:r><w:r w:rsidR="005C3A75"><w:t>fictitious</w:t></w:r><w:r><w:t>) code</w:t></w:r><w:r w:rsidR="003423F1"><w:t>-</w:t></w:r><w:r><w:t>behind portion could look like this:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>public class MyControl : WebControl</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  protected override OnLoad(EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     if (!IsPostBack)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">       ddlMyData.DataSource = DAL.QueryDdlData();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">       ddlMyData.DataBind();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     base.OnLoad();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00BE0E8D"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>This is, again, working well and nobody would see any issues here. However, there is something</w:t></w:r><w:r w:rsidR="00D0630F"><w:t xml:space="preserve"> here</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="005C3A75"><w:t>that is easily overlooked</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>Databound</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> controls need to remember their state, for instance, to hold the last selected option of a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>dropdownlist</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> after </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">. I </w:t></w:r><w:r w:rsidR="005C3A75"><w:t>discussed this previously</w:t></w:r><w:r><w:t xml:space="preserve"> and called this smart behavior </w:t></w:r><w:r w:rsidR="005C3A75"><w:t>“</w:t></w:r><w:r><w:t>stickiness</w:t></w:r><w:r w:rsidR="005C3A75"><w:t>”</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00D0630F"><w:t xml:space="preserve">We </w:t></w:r><w:r><w:t xml:space="preserve">don’t want to </w:t></w:r><w:r w:rsidR="00E77F32"><w:t>lose</w:t></w:r><w:r><w:t xml:space="preserve"> the form’s sticky behavior. </w:t></w:r><w:r w:rsidR="00D0630F"><w:t>Y</w:t></w:r><w:r><w:t xml:space="preserve">ou might </w:t></w:r><w:r w:rsidR="00D0630F"><w:t xml:space="preserve">therefore </w:t></w:r><w:r><w:t xml:space="preserve">assume that switching </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> off is no</w:t></w:r><w:r w:rsidR="00D0630F"><w:t>t a</w:t></w:r><w:r><w:t xml:space="preserve"> solution either. But stickiness is part of the control state; it’s made by checking the form data. It’s not </w:t></w:r><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">related to </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t>, as some developers think. The reason we run in</w:t></w:r><w:r w:rsidR="00D0630F"><w:t>to</w:t></w:r><w:r><w:t xml:space="preserve"> trouble with </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> is that it </w:t></w:r><w:r w:rsidR="00D0630F"><w:t>grows</w:t></w:r><w:r><w:t xml:space="preserve"> each time the page reloads. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="000D24B1" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">This </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">time the solution is not </w:t></w:r><w:r w:rsidR="00D0630F"><w:t xml:space="preserve">so </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">simple. Switching off </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> is only the half of the </w:t></w:r><w:r w:rsidR="00D0630F"><w:t>answer</w:t></w:r><w:r w:rsidR="00165A64"><w:t>:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t>&lt;asp:dropdownlist runat=</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>server</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> id=</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r w:rsidRPr="00231FD7"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>ddlMyData</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> DataTextField=</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>Name</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> DataValueField=</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>ID</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> EnableViewState=</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>false</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r w:rsidR="006F5E64"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>/&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="000D24B1" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>The</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> code behind </w:t></w:r><w:r><w:t xml:space="preserve">is </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">almost the same, </w:t></w:r><w:r><w:t xml:space="preserve">except we </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">pull the data </w:t></w:r><w:r><w:t xml:space="preserve">every </w:t></w:r><w:r w:rsidR="00165A64"><w:t>time the control loads (</w:t></w:r><w:r w:rsidR="004C54F9"><w:t>note</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> the missing </w:t></w:r><w:r w:rsidR="00165A64" w:rsidRPr="00DD7670"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>if</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> statement): </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>Public class MyControl : WebControl</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  protected override OnLoad(EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     ddlMyData.DataSource = DAL.</w:t></w:r><w:r w:rsidRPr="00231FD7"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>QueryDdlData ();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     ddlMyData.DataBind();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     base.OnLoad();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="004C54F9" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Now </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> is as clean as possible. But the sticky form behavior has gone, too. </w:t></w:r><w:r w:rsidR="00D0630F"><w:t>T</w:t></w:r><w:r><w:t>rying this</w:t></w:r><w:r w:rsidR="00D0630F"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> you might think </w:t></w:r><w:r w:rsidR="00D0630F"><w:t xml:space="preserve">you’ve found a bug in this book and that </w:t></w:r><w:r w:rsidR="004C54F9"><w:t>the author is</w:t></w:r><w:r><w:t xml:space="preserve"> wrong about </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">The fault is not </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> itself. It still has no </w:t></w:r><w:r w:rsidR="003423F1"><w:t>function</w:t></w:r><w:r><w:t xml:space="preserve"> because the control state is restoring the data from </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> values. However, we overwrite this because the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00DD7670"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnLoad</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event is fired after all states are restored. This is, again, a life cycle issue. Understanding the life cycle lead</w:t></w:r><w:r w:rsidR="007B69E3"><w:t>s</w:t></w:r><w:r><w:t xml:space="preserve"> us to the solution. </w:t></w:r><w:r w:rsidR="007B69E3"><w:t>M</w:t></w:r><w:r><w:t>ove the last code</w:t></w:r><w:r w:rsidR="007B69E3"><w:t xml:space="preserve"> fragment</w:t></w:r><w:r><w:t xml:space="preserve"> as is to another step in the life cycle—</w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00DD7670"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnInit</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>public class MyControl : WebControl</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00231FD7"><w:pPr><w:pStyle w:val="CodeBold"/></w:pPr><w:r><w:t xml:space="preserve">  protected override OnInit(EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     ddlMyData.DataSource = DAL.</w:t></w:r><w:r w:rsidRPr="00231FD7"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>QueryDdlData ();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     ddlMyData.DataBind();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     base.OnInit();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00DD7670"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="003423F1" w:rsidP="00231FD7"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">This solution is both clean and simple. </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00231FD7"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnInit</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> fires before the control state restores the values. It pulls static data from a fast database, puts it directly into the control, forces the render process before the control restores its state, and everything is fine. The render process is an important step here, made by calling the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64" w:rsidRPr="00231FD7"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>DataBind</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> method. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00231FD7" w:rsidRDefault="004C54F9" w:rsidP="00231FD7"><w:pPr><w:pStyle w:val="NoteTipCaution"/></w:pPr><w:r><w:t>Ti</w:t></w:r><w:r w:rsidR="00165A64"><w:t>p:</w:t></w:r><w:r w:rsidR="00165A64"><w:tab/><w:t>You</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>’ll</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> probably </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">want </w:t></w:r><w:r w:rsidR="00165A64"><w:t>to avoid heavy database access whenever possible. Instead</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> you</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>’ll</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> probably store small data portions in XML files and maintain changes there. I would recommend using a database anyway. Modern implementations, like Microsoft SQL Server™, hold frequently </w:t></w:r><w:r w:rsidR="007B69E3"><w:t xml:space="preserve">requested </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">data in memory. The amount of data </w:t></w:r><w:r w:rsidR="002C1808"><w:t xml:space="preserve">requested </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">is small, and the connection is </w:t></w:r><w:r w:rsidR="002C1808"><w:t xml:space="preserve">usually </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">1GB or 10GB Ethernet. A powerful data access layer will </w:t></w:r><w:r w:rsidR="002C1808"><w:lastRenderedPageBreak/><w:t xml:space="preserve">also </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">cache the data locally, so </w:t></w:r><w:r w:rsidR="002C1808"><w:t xml:space="preserve">that </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">in reality nothing is transferred between the servers. The </w:t></w:r><w:r w:rsidR="002C1808"><w:t xml:space="preserve">slowest </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">part of the </w:t></w:r><w:r w:rsidR="002C1808"><w:t xml:space="preserve">connection </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">is from </w:t></w:r><w:r w:rsidR="002C1808"><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">web server to </w:t></w:r><w:r w:rsidR="002C1808"><w:t xml:space="preserve">the </w:t></w:r><w:r w:rsidR="00165A64"><w:t>user. He or she</w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve"> will have</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> ISDN, DSL, or a </w:t></w:r><w:r w:rsidR="00753998"><w:t xml:space="preserve">dial-up </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">modem. Storing the small portion of data in </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> sends the data three times over the wire</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>:</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">once </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">when the user loads the page </w:t></w:r><w:r w:rsidR="00B825B3"><w:t>(</w:t></w:r><w:r w:rsidR="00165A64"><w:t>as visible data in the dropdown control</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>)</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">, once in </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>,</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> and</w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve"> the</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> third time when the form is sent back</w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve"> (as </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> is part of the form’s field collection</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>)</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">. Calling a database frequently is not torture; this is </w:t></w:r><w:r w:rsidR="00753998"><w:t xml:space="preserve">the reason for </w:t></w:r><w:r w:rsidR="00165A64"><w:t>a database.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="005170F8"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t>Initializing child controls</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00231FD7"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>One paradigm you might hear frequently about ASP.NET is</w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve"> to</w:t></w:r><w:r><w:t xml:space="preserve"> do things declaratively. Whatever you can do directly within the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>aspx</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> page, do it! However, this has some implications and limitations, </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">and </w:t></w:r><w:r><w:t xml:space="preserve">eventually you must start doing some work programmatically. The trouble is that initializing controls programmatically is not </w:t></w:r><w:r w:rsidR="00895C22"><w:t>straightforward</w:t></w:r><w:r><w:t>. As shown before</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> you </w:t></w:r><w:r w:rsidR="008B0120"><w:t xml:space="preserve">can </w:t></w:r><w:r><w:t xml:space="preserve">do this in </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00C14C50"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnLoad</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">, but this could </w:t></w:r><w:r w:rsidR="00B825B3"><w:t>cause the</w:t></w:r><w:r><w:t xml:space="preserve"> view</w:t></w:r><w:r w:rsidR="008B0120"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">state </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">to grow </w:t></w:r><w:r><w:t>and</w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">, in any case, </w:t></w:r><w:r><w:t xml:space="preserve">it’s not </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">necessary </w:t></w:r><w:r><w:t>to use view</w:t></w:r><w:r w:rsidR="008B0120"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">state when </w:t></w:r><w:r w:rsidR="008B0120"><w:t xml:space="preserve">merely </w:t></w:r><w:r><w:t xml:space="preserve">setting defaults. Even </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00C14C50"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnInit</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is not the </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">best </w:t></w:r><w:r><w:t>solution because view</w:t></w:r><w:r w:rsidR="008B0120"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">state will still track changes and catch the settings. </w:t></w:r><w:r w:rsidR="008B0120"><w:t xml:space="preserve">If </w:t></w:r><w:r><w:t>you need view</w:t></w:r><w:r w:rsidR="008B0120"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>state and can’t disable it</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>, you’ll</w:t></w:r><w:r><w:t xml:space="preserve"> have to live with this behavior. Because the control’s view</w:t></w:r><w:r w:rsidR="008B0120"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">state tracks changes from </w:t></w:r><w:r w:rsidR="008B0120"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>bottom up</w:t></w:r><w:r w:rsidR="008B0120"><w:t>—</w:t></w:r><w:r><w:t>say, from the last leaf control in the control hierarchy up to the tree’s root</w:t></w:r><w:r w:rsidR="008B0120"><w:t>—</w:t></w:r><w:r><w:t xml:space="preserve">the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00C14C50"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnInit</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> for child controls is done when the current </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00C14C50"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnInit</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is called.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="005073F5" w:rsidRDefault="00165A64" w:rsidP="00C14C50"><w:pPr><w:pStyle w:val="CodeSingle"/><w:rPr><w:lang w:val="de-DE"/></w:rPr></w:pPr><w:r w:rsidRPr="005073F5"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:t>&lt;asp:label id=</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="006F5E64"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:t>"</w:t></w:r><w:r w:rsidRPr="005073F5"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:t>lblDat</w:t></w:r><w:r w:rsidR="00AD3FD7"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:t>e</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="006F5E64"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:t>"</w:t></w:r><w:r w:rsidRPr="005073F5"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:t xml:space="preserve"> runat=</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="006F5E64"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:t>"</w:t></w:r><w:r w:rsidRPr="005073F5"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:t>server</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="006F5E64"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:t>"</w:t></w:r><w:r w:rsidRPr="005073F5"><w:rPr><w:lang w:val="de-DE"/></w:rPr><w:t>/&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00C14C50"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">In </w:t></w:r><w:r w:rsidR="00AD3FD7"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">code behind portion we set the </w:t></w:r><w:r w:rsidR="004C54F9"><w:t>text by assigning the current date</w:t></w:r><w:r><w:t>:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00C14C50"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>public class MyControl : WebControl</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00C14C50"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00C14C50"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  protected override OnInit(EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00C14C50"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00C14C50"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     lblDat</w:t></w:r><w:r w:rsidR="00AD3FD7"><w:t>e</w:t></w:r><w:r><w:t>.Text = DateTime.Now.ToLongDate();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00C14C50"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     base.OnInit();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00C14C50"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00C14C50"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00C14C50"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>Even if this is the earli</w:t></w:r><w:r w:rsidR="00AD3FD7"><w:t>e</w:t></w:r><w:r><w:t>st event possible</w:t></w:r><w:r w:rsidR="00AD3FD7"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> it’s already too late. The label is initialized before the user control, and view</w:t></w:r><w:r w:rsidR="00AD3FD7"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>state is already tracking changes. This means</w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve"> </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00B825B3"><w:t>that</w:t></w:r><w:r><w:t>the</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00AD3FD7"><w:t xml:space="preserve">date </w:t></w:r><w:r w:rsidR="00B825B3"><w:t>persists</w:t></w:r><w:r><w:t xml:space="preserve"> in view</w:t></w:r><w:r w:rsidR="00AD3FD7"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>state</w:t></w:r><w:r w:rsidR="00AD3FD7"><w:t xml:space="preserve">, </w:t></w:r><w:r w:rsidR="00B825B3"><w:t>which</w:t></w:r><w:r><w:t xml:space="preserve"> doesn’t make sense—</w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">this is </w:t></w:r><w:r w:rsidR="00AD3FD7"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>same situation we faced in the current user name example.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00C14C50"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>Disabling view</w:t></w:r><w:r w:rsidR="00CE3E82"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">state has been discussed before, but this is not always a solution. </w:t></w:r><w:r w:rsidR="00CE3E82"><w:t xml:space="preserve">Perhaps </w:t></w:r><w:r><w:t xml:space="preserve">you </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">have </w:t></w:r><w:r><w:t>tried this:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r><w:t>&lt;asp:label id=</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>lblDat</w:t></w:r><w:r w:rsidR="00CE3E82"><w:t>e</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> runat=</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>server</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t xml:space="preserve"> Text=</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>&lt;% = DateTime.Now.ToLongDate() %&gt;</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r><w:t>/&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="004C54F9"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">This is not possible, because ASP.NET doesn’t allow the initializing of properties </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">in </w:t></w:r><w:r><w:t xml:space="preserve">that way. Using </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>databinding</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> syntax </w:t></w:r><w:r w:rsidRPr="00A25783"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>&lt;%# %&gt;</w:t></w:r><w:r><w:t xml:space="preserve"> is no solution, either. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="004C54F9"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>Let’s assume that for some reason you want to assign the value by code. And you want to use view</w:t></w:r><w:r w:rsidR="00F57837"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">state for some other reason as well. You may think about </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A25783"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnPreInit</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">, but this event isn’t recursive and appears </w:t></w:r><w:r w:rsidR="00F57837"><w:t xml:space="preserve">only </w:t></w:r><w:r><w:t xml:space="preserve">on </w:t></w:r><w:r w:rsidR="00F57837"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">page level. </w:t></w:r><w:r w:rsidR="00A60DB1"><w:t>So</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>,</w:t></w:r><w:r w:rsidR="00A60DB1"><w:t xml:space="preserve"> what’s going on here? </w:t></w:r><w:r><w:t xml:space="preserve">It’s interesting that the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A25783"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnInit</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event behaves slightly different</w:t></w:r><w:r w:rsidR="00F57837"><w:t>ly</w:t></w:r><w:r><w:t xml:space="preserve"> depending on </w:t></w:r><w:r w:rsidR="00A60DB1"><w:t>how</w:t></w:r><w:r><w:t xml:space="preserve"> you get access to it. The obvious way is to override the event handler. This is easy, well supported in </w:t></w:r><w:r w:rsidR="00F57837"><w:t>I</w:t></w:r><w:r><w:t>ntelli</w:t></w:r><w:r w:rsidR="00F57837"><w:t>S</w:t></w:r><w:r><w:t>ense</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">the most common </w:t></w:r><w:r w:rsidR="00B825B3"><w:t>solution</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00F57837"><w:t>Y</w:t></w:r><w:r><w:t>ou can attach events declaratively, too. As I said before, this is one of the major paradigms</w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve"> of ASP.NET</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00EA705E" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r w:rsidRPr="00EA705E"><w:t>&lt;asp:label id=</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r w:rsidRPr="00EA705E"><w:t>lblDat</w:t></w:r><w:r w:rsidR="00F57837" w:rsidRPr="00EA705E"><w:t>e</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r w:rsidRPr="00EA705E"><w:t xml:space="preserve"> runat=</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r w:rsidRPr="00EA705E"><w:t>server</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r w:rsidRPr="00EA705E"><w:t xml:space="preserve"> OnInit=</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r w:rsidR="00F57837" w:rsidRPr="00EA705E"><w:t>lblDate</w:t></w:r><w:r w:rsidRPr="00EA705E"><w:t>_Init</w:t></w:r><w:r w:rsidR="006F5E64" w:rsidRPr="008D54B4"><w:t>"</w:t></w:r><w:r w:rsidR="006F5E64"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidRPr="00EA705E"><w:t>/&gt;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>This handler is fired before the internal initialization takes place</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>—</w:t></w:r><w:r><w:t xml:space="preserve">before the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A25783"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>TrackViewState</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method is called and </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t>view</w:t></w:r><w:r w:rsidR="00373761"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t>state starts tracking changes. Just set the text in the code behind as you would before:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>public class MyControl : WebControl</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  public void lblDat</w:t></w:r><w:r w:rsidR="00373761"><w:t>e</w:t></w:r><w:r><w:t>_Init(object sender, EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     lblDat</w:t></w:r><w:r w:rsidR="00373761"><w:t>e</w:t></w:r><w:r><w:t>.Text = DateTime.Now.ToLongDate();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00A60DB1" w:rsidRDefault="00A60DB1" w:rsidP="00A60DB1"><w:pPr><w:pStyle w:val="NoteTipCaution"/></w:pPr><w:r><w:t>Tip:</w:t></w:r><w:r><w:tab/><w:t xml:space="preserve">If you’re </w:t></w:r><w:r w:rsidR="00373761"><w:t>wondering</w:t></w:r><w:r><w:t xml:space="preserve"> whether</w:t></w:r><w:r w:rsidR="00373761"><w:t xml:space="preserve"> to use</w:t></w:r><w:r><w:t xml:space="preserve"> declarative events or just wire up to code—remember the basic rule</w:t></w:r><w:r w:rsidR="00373761"><w:t>:</w:t></w:r><w:r><w:t xml:space="preserve"> “</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>W</w:t></w:r><w:r><w:t>hatever we can do eas</w:t></w:r><w:r w:rsidR="00373761"><w:t>il</w:t></w:r><w:r><w:t>y and safely the declarative way is our primary programming technique”.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A60DB1"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">Another solution comes </w:t></w:r><w:r w:rsidR="00FD5C3A"><w:t xml:space="preserve">to </w:t></w:r><w:r><w:t>mind if you’re an experie</w:t></w:r><w:r w:rsidR="00A60DB1"><w:t>nced developer of object orient</w:t></w:r><w:r><w:t xml:space="preserve">ed software. Each object starts its life with </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">the </w:t></w:r><w:r><w:t xml:space="preserve">call of the </w:t></w:r><w:r w:rsidR="00FD5C3A"><w:t xml:space="preserve">object’s </w:t></w:r><w:r><w:t xml:space="preserve">constructor. </w:t></w:r><w:r w:rsidR="00E77F32"><w:t>Usually</w:t></w:r><w:r><w:t xml:space="preserve"> the construct</w:t></w:r><w:r w:rsidR="00FD5C3A"><w:t>o</w:t></w:r><w:r><w:t xml:space="preserve">r is the place to initialize the object. However, in ASP.NET the life of controls begins </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">some time </w:t></w:r><w:r><w:t>later, in the initialization phase. You may</w:t></w:r><w:r w:rsidR="00A60DB1"><w:t xml:space="preserve"> subclass the control and</w:t></w:r><w:r><w:t xml:space="preserve"> override the constructor to invoke code there, but child controls are not yet present. </w:t></w:r><w:r w:rsidR="00A60DB1"><w:t>The various events required are fired some</w:t></w:r><w:r w:rsidR="00894EAD"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00A60DB1"><w:t xml:space="preserve">time later. With a custom control it would work. This is indeed </w:t></w:r><w:r><w:t>another powerful solution. By implementing you</w:t></w:r><w:r w:rsidR="00894EAD"><w:t>r</w:t></w:r><w:r><w:t xml:space="preserve"> own label you </w:t></w:r><w:r w:rsidR="00894EAD"><w:t xml:space="preserve">can </w:t></w:r><w:r><w:t>access the constructor without need</w:t></w:r><w:r w:rsidR="00894EAD"><w:t>ing</w:t></w:r><w:r><w:t xml:space="preserve"> to </w:t></w:r><w:r w:rsidR="006F5E64"><w:t xml:space="preserve">do </w:t></w:r><w:r><w:t>anything else</w:t></w:r><w:r w:rsidR="006F5E64"><w:t>where</w:t></w:r><w:r><w:t>:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>public class MyLabel : Label</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  public MyLabel()</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">    this.Text = DateTime.Now.ToLongDate();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>This is a slightly modified label that simply initializes itself at the right time without any side effects. The constructor call assures that any tracking begins later.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="NoteTipCaution"/></w:pPr><w:r><w:t>Note:</w:t></w:r><w:r><w:tab/><w:t>The internal “building steps” of an object, like the constructor call, are made before the life time of the object begins.</w:t></w:r><w:r w:rsidR="00A60DB1"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">By </w:t></w:r><w:r w:rsidR="00A60DB1"><w:t>“life time”</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>,</w:t></w:r><w:r w:rsidR="00A60DB1"><w:t xml:space="preserve"> I </w:t></w:r><w:r w:rsidR="00894EAD"><w:t xml:space="preserve">mean </w:t></w:r><w:r w:rsidR="00A60DB1"><w:t>the life of an object within the control’s or page’s life cycle</w:t></w:r><w:r w:rsidR="00894EAD"><w:t>—</w:t></w:r><w:r w:rsidR="00A60DB1"><w:t>not the life time of an object with</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>in</w:t></w:r><w:r w:rsidR="00A60DB1"><w:t xml:space="preserve"> the runtime.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="003B7E25" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r w:rsidRPr="003B7E25"><w:lastRenderedPageBreak/><w:t>Attaching Dynamic controls</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00A20D8F" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r w:rsidRPr="00A20D8F"><w:t xml:space="preserve">All controls have a collection of child controls, represented by the property </w:t></w:r><w:r w:rsidRPr="00A20D8F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Control</w:t></w:r><w:r><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>s</w:t></w:r><w:r w:rsidRPr="00A20D8F"><w:t>.</w:t></w:r><w:r><w:t xml:space="preserve"> Some controls</w:t></w:r><w:r w:rsidR="00026277"><w:t xml:space="preserve">, such as </w:t></w:r><w:r w:rsidR="00722667" w:rsidRPr="00722667"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Label</w:t></w:r><w:r w:rsidR="00026277"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> have an empty collection, because they can’t render </w:t></w:r><w:r w:rsidR="00E77F32"><w:t>children. All</w:t></w:r><w:r><w:t xml:space="preserve"> controls inherit the collection from </w:t></w:r><w:r w:rsidRPr="00A20D8F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Control</w:t></w:r><w:r><w:t xml:space="preserve"> base class. This is the common way to access the hierarchy of controls. The class behind the collection is defined:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00A20D8F" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="CodeSingle"/></w:pPr><w:r w:rsidRPr="00A20D8F"><w:t>public class ControlCollection : ICollection, IEnumerable</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="00A20D8F" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r w:rsidRPr="00A20D8F"><w:t xml:space="preserve">There are no obvious limits </w:t></w:r><w:r><w:t xml:space="preserve">preventing you </w:t></w:r><w:r w:rsidR="00026277"><w:t>from adding</w:t></w:r><w:r><w:t xml:space="preserve"> new controls </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">at </w:t></w:r><w:r><w:t xml:space="preserve">any time. </w:t></w:r><w:r w:rsidR="00026277"><w:t xml:space="preserve"> With </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00026277"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> it’s no</w:t></w:r><w:r w:rsidR="00A60DB1"><w:t xml:space="preserve">t that easy. </w:t></w:r><w:r w:rsidR="00026277"><w:t>V</w:t></w:r><w:r w:rsidR="0009536C"><w:t>iew state</w:t></w:r><w:r w:rsidR="00A60DB1"><w:t xml:space="preserve"> can</w:t></w:r><w:r><w:t xml:space="preserve"> track values only for existing controls. To handle dynamic controls</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> you need to add them on any page load, whether it’s a </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> or regular page load cycle. Attaching dynamic controls must happen in the initializing phase (</w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0039328A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnInit</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> event), because</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00A60DB1"><w:t>at an earlier state</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>,</w:t></w:r><w:r w:rsidR="00A60DB1"><w:t xml:space="preserve"> there is no</w:t></w:r><w:r><w:t xml:space="preserve"> hierarchy</w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve"> of controls</w:t></w:r><w:r><w:t xml:space="preserve"> to </w:t></w:r><w:r w:rsidR="00026277"><w:t xml:space="preserve">which </w:t></w:r><w:r><w:t xml:space="preserve">you could attach anything. </w:t></w:r><w:r w:rsidR="00026277"><w:t>V</w:t></w:r><w:r w:rsidR="0009536C"><w:t>iew state</w:t></w:r><w:r><w:t xml:space="preserve"> of those dynamically attached controls is </w:t></w:r><w:r w:rsidR="00026277"><w:t xml:space="preserve">then </w:t></w:r><w:r><w:t xml:space="preserve">tracked automatically. Remember that this is done recursively through the whole hierarchy, so the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="0039328A"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>StateBag</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> class will never miss anything. However, this point is critical. You might experience the following exception loading the page after </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">: </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="Query"/></w:pPr><w:r w:rsidRPr="0039328A"><w:t xml:space="preserve"> [Failed loading </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidRPr="0039328A"><w:t>]</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRPr="0039328A" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="Query"/></w:pPr><w:r><w:t xml:space="preserve">Failed to load </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve">.  The control tree into which </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> is being loaded must match the control tree that was used to save </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> during the previous request.  For example, when adding controls dynamically, the controls added during a post-back must match the type and position of the controls added during the initial request.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>Let’s create a</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>n</w:t></w:r><w:r><w:t xml:space="preserve"> example </w:t></w:r><w:r w:rsidR="00B825B3"><w:t>so that we can</w:t></w:r><w:r><w:t xml:space="preserve"> figure out what </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">is </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>happen</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>ning</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> internally: </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>protected void Page_Init(object sender, EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  if (!IsPostBack)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     Button myButton = new Button();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     form1.Controls.Add(myButton);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     myButton.Text = "Click here";</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  else</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     Label label = new Label();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     form1.Controls.Add(label);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t xml:space="preserve">The intent of this code is obvious. The user has a </w:t></w:r><w:r><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>B</w:t></w:r><w:r w:rsidRPr="00ED66F6"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>utton</w:t></w:r><w:r><w:t xml:space="preserve"> to invoke some action</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> and</w:t></w:r><w:r w:rsidR="00B825B3"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> when the action is </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">completed, </w:t></w:r><w:r><w:t xml:space="preserve">the button is replaced by a </w:t></w:r><w:r w:rsidRPr="00ED66F6"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Label</w:t></w:r><w:r><w:t xml:space="preserve"> control. You might </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">argue </w:t></w:r><w:r><w:t xml:space="preserve">that </w:t></w:r><w:r w:rsidR="00B825B3"><w:t>this</w:t></w:r><w:r><w:t xml:space="preserve"> is not good practice, but let’s examine </w:t></w:r><w:r w:rsidR="00B825B3"><w:t>it</w:t></w:r><w:r><w:t xml:space="preserve"> for the moment. </w:t></w:r><w:r w:rsidR="008B27CE"><w:t>V</w:t></w:r><w:r w:rsidR="0009536C"><w:t>iew state</w:t></w:r><w:r><w:t xml:space="preserve"> tries to recognize the elements </w:t></w:r><w:r w:rsidR="008B27CE"><w:t xml:space="preserve">solely </w:t></w:r><w:r><w:t xml:space="preserve">by their index. In this example the control at index [0] is the </w:t></w:r><w:r w:rsidRPr="00ED66F6"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Button</w:t></w:r><w:r><w:t xml:space="preserve">. After </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="008B27CE"><w:t>it has been</w:t></w:r><w:r><w:t xml:space="preserve"> replaced by the </w:t></w:r><w:r w:rsidRPr="00ED66F6"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Label</w:t></w:r><w:r><w:t xml:space="preserve">, using the same index [0]. This </w:t></w:r><w:r w:rsidR="008B27CE"><w:t>does</w:t></w:r><w:r><w:t xml:space="preserve"> not </w:t></w:r><w:r w:rsidR="008B27CE"><w:t xml:space="preserve">lead </w:t></w:r><w:r><w:t xml:space="preserve">to the exception shown above, because the restoring code is </w:t></w:r><w:r w:rsidR="008B27CE"><w:t xml:space="preserve">fairly </w:t></w:r><w:r><w:t xml:space="preserve">stupid. It just looks for the right property, and both </w:t></w:r><w:r w:rsidRPr="00ED66F6"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Button</w:t></w:r><w:r><w:t xml:space="preserve"> and </w:t></w:r><w:r w:rsidRPr="00ED66F6"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Label</w:t></w:r><w:r><w:t xml:space="preserve"> share the same </w:t></w:r><w:r w:rsidRPr="00ED66F6"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Text</w:t></w:r><w:r><w:t xml:space="preserve"> property. W</w:t></w:r><w:r w:rsidR="008B27CE"><w:t>hile</w:t></w:r><w:r><w:t xml:space="preserve"> this works, the label now </w:t></w:r><w:r><w:lastRenderedPageBreak/><w:t>shows the text “Click here”. Wh</w:t></w:r><w:r w:rsidR="008B27CE"><w:t>y</w:t></w:r><w:r><w:t xml:space="preserve">? The exception appears </w:t></w:r><w:r w:rsidR="00B825B3"><w:t xml:space="preserve">even if </w:t></w:r><w:r><w:t xml:space="preserve">this </w:t></w:r><w:r w:rsidR="00B825B3"><w:t>less than ideal method</w:t></w:r><w:r><w:t xml:space="preserve"> fails, probably because the control does not provide the expected property.</w:t></w:r></w:p><w:p w:rsidR="008B27CE" w:rsidRDefault="008B27CE" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="008B27CE" w:rsidP="0039328A"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>The f</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">irst solution is simple. </w:t></w:r><w:r><w:t>T</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">urn off </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> for the button control. </w:t></w:r><w:r w:rsidR="00B825B3"><w:t>Since y</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">ou throw away the button anyway, </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> is not required at all. If </w:t></w:r><w:r w:rsidR="006F5E64"><w:t>the view state is</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> being saved, it can’t disturb the next cycle—problem solved. Here is the solution in all its glory:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>protected void Page_Init(object sender, EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  if (!IsPostBack)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     Button myButton = new Button();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="CodeBold"/></w:pPr><w:r><w:t xml:space="preserve">     myButton.EnableViewState = false;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     form1.Controls.Add(myButton);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     myButton.Text = "Click here";</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  else</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     Label label = new Label();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     form1.Controls.Add(label);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">  }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00ED66F6"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00B825B3" w:rsidP="00201746"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>H</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">ad you been using </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> in the sample above, the problem would resolve itself</w:t></w:r><w:r w:rsidR="00B33C55"><w:t xml:space="preserve">—that is, </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">if you </w:t></w:r><w:r w:rsidR="00B33C55"><w:t xml:space="preserve">had </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">recreated the control after </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64"><w:t>postback</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t>, which is one of the basic rules of dynamic controls creation. The ultimate solution looks like this:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201746"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>protected void Page_Init(object sender, EventArgs e)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201746"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201746"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">   Button myButton = new Button();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201746"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">   myButton.EnableViewState = false;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201746"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">   form1.Controls.Add(myButton);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201746"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">   myButton.Text = "Click here";</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201746"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">   if (IsPostBack)</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201746"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">   {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201746"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">      Label label = new Label();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201746"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">      form1.Controls.Add(label);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201746"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">      myButton.Visible = false;</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201746"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">   }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201746"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00201746"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Here we are close to the best practice. </w:t></w:r><w:r w:rsidR="00B33C55"><w:t>Allow</w:t></w:r><w:r><w:t xml:space="preserve"> all controls on the page </w:t></w:r><w:r w:rsidR="00B33C55"><w:t xml:space="preserve">to </w:t></w:r><w:r w:rsidR="008B27CE"><w:t xml:space="preserve">remain </w:t></w:r><w:r><w:t>untouched and switch the visibility on and off</w:t></w:r><w:r w:rsidR="008B27CE"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> as required</w:t></w:r><w:r w:rsidR="008B27CE"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="008B27CE"><w:t xml:space="preserve">via </w:t></w:r><w:r><w:t xml:space="preserve">code. The render method is smart enough to not render invisible controls. But that’s another topic and would lead us away from </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="005170F8"><w:pPr><w:pStyle w:val="berschrift3"/></w:pPr><w:r><w:t>Initializing dynamically created controls</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">I </w:t></w:r><w:r w:rsidR="00B33C55"><w:t>discussed</w:t></w:r><w:r><w:t xml:space="preserve"> dynamic controls before and</w:t></w:r><w:r w:rsidR="00B33C55"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> reading the text</w:t></w:r><w:r w:rsidR="00B33C55"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> you might feel that there are some issues with </w:t></w:r><w:r w:rsidR="00B33C55"><w:t>them</w:t></w:r><w:r><w:t xml:space="preserve">. </w:t></w:r><w:r w:rsidR="00B33C55"><w:t>This is</w:t></w:r><w:r><w:t xml:space="preserve"> indeed something we need to </w:t></w:r><w:r w:rsidR="00B33C55"><w:t xml:space="preserve">approach </w:t></w:r><w:r w:rsidR="00360EBF"><w:t>carefully</w:t></w:r><w:r><w:t xml:space="preserve">, but there </w:t></w:r><w:r w:rsidR="00B33C55"><w:t xml:space="preserve">are </w:t></w:r><w:r><w:t>no real issue</w:t></w:r><w:r w:rsidR="00B33C55"><w:t>s</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A25783"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">The problem is very similar to the one described before. Because you create the control when you </w:t></w:r><w:r w:rsidR="00360EBF"><w:t>choose</w:t></w:r><w:r><w:t xml:space="preserve">, you have more </w:t></w:r><w:r w:rsidR="006F5E64"><w:t>influence</w:t></w:r><w:r><w:t xml:space="preserve"> and this makes your life easier. </w:t></w:r><w:r w:rsidR="00B33C55"><w:t>It does, however, run</w:t></w:r><w:r><w:t xml:space="preserve"> against the paradigm, because we leave the world of declarative definitions completely. </w:t></w:r><w:r w:rsidR="00B33C55"><w:t>In any case</w:t></w:r><w:r><w:t xml:space="preserve">, let’s look how to handle another </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> issue correctly.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006D14D3"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>public class MyCustomControl : Control</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006D14D3"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006D14D3"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">   protected override void CreateChildControls()</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006D14D3"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">   {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006D14D3"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     Label l =  new Label();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006D14D3"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     Controls.Add(l);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006D14D3"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     l.Text = DateTime.Now.ToLongDate();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006D14D3"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">   }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="006D14D3"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">You can create child controls any time, but the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A20D8F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>CreateChildControls</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> method </w:t></w:r><w:r w:rsidR="00360EBF"><w:t xml:space="preserve">is the best opportunity </w:t></w:r><w:r w:rsidR="00B33C55"><w:t>for</w:t></w:r><w:r><w:t xml:space="preserve"> fit</w:t></w:r><w:r w:rsidR="00B33C55"><w:t>ting</w:t></w:r><w:r><w:t xml:space="preserve"> into the event sequence. </w:t></w:r><w:r w:rsidR="00360EBF"><w:t>T</w:t></w:r><w:r><w:t>he initialize event is called and the control doesn’t miss the tracking of view</w:t></w:r><w:r w:rsidR="00360EBF"><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">state. The secret is the behavior of the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A20D8F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Controls.Add</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> call. This isn’t just a collection; it does much more when the </w:t></w:r><w:r w:rsidRPr="00A20D8F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>Add</w:t></w:r><w:r><w:t xml:space="preserve"> method is invoked. Even if all events of the parent hierarchy are </w:t></w:r><w:r w:rsidR="00B33C55"><w:t>complete</w:t></w:r><w:r><w:t xml:space="preserve">, the control begins its regular life cycle and all events involved here are fired </w:t></w:r><w:r w:rsidR="00B33C55"><w:t>correctly</w:t></w:r><w:r><w:t xml:space="preserve">. That means that the control starts tracking </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t xml:space="preserve"> immediately after </w:t></w:r><w:r w:rsidR="00E77F32"><w:t>it’s</w:t></w:r><w:r><w:t xml:space="preserve"> added to the collection. </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A20D8F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>CreateChildControls</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> always </w:t></w:r><w:r w:rsidR="00360EBF"><w:t xml:space="preserve">seems </w:t></w:r><w:r><w:t>too late</w:t></w:r><w:r w:rsidR="00B33C55"><w:t xml:space="preserve">, as even though it is called at different points in time, </w:t></w:r><w:r><w:t xml:space="preserve">it’s always later than </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A20D8F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnInit</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>. Just for completeness</w:t></w:r><w:r w:rsidR="00B33C55"><w:t>,</w:t></w:r><w:r><w:t xml:space="preserve"> you</w:t></w:r><w:r w:rsidR="004A5B51"><w:t xml:space="preserve"> </w:t></w:r><w:r w:rsidR="00B33C55"><w:t xml:space="preserve">need </w:t></w:r><w:r><w:t xml:space="preserve">to know that it’s based on </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A20D8F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>EnsureChildControls</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> call, which happens in </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A20D8F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnPreRender</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> at the latest. For some reasons the call might come much earlier. </w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">Now take a closer look </w:t></w:r><w:r w:rsidR="00B33C55"><w:t xml:space="preserve">at </w:t></w:r><w:r><w:t>the solution:</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="CodeFirst"/></w:pPr><w:r><w:t>public class MyCustomControl : Control</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t>{</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">   protected override void CreateChildControls()</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">   {</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     Label l =  new Label();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">     l.Text = DateTime.Now.ToLongDate();</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="CodeBold"/></w:pPr><w:r><w:t xml:space="preserve">     Controls.Add(l);</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="Code"/></w:pPr><w:r><w:t xml:space="preserve">   }</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="CodeLast"/></w:pPr><w:r><w:t>}</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00165A64" w:rsidP="00A20D8F"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>There is only a subtle difference. The control’s properties are set before the control is added</w:t></w:r><w:r w:rsidR="00B33C55"><w:t xml:space="preserve">, which means that </w:t></w:r><w:r><w:t xml:space="preserve">it’s initialized before the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidRPr="00A20D8F"><w:rPr><w:rStyle w:val="CodeInline"/></w:rPr><w:t>OnInit</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve"> is fired, and that subsequently it has not yet begun to track the </w:t></w:r><w:r w:rsidR="0009536C"><w:t>view state</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><w:p w:rsidR="00165A64" w:rsidRDefault="00B33C55" w:rsidP="00201746"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t>Y</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">ou </w:t></w:r><w:r w:rsidR="00360EBF"><w:t xml:space="preserve">can </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">also </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00165A64"><w:t>databind</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> controls before </w:t></w:r><w:r w:rsidR="00360EBF"><w:t xml:space="preserve">they have been </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">added to the parent control’s control hierarchy. This is </w:t></w:r><w:r w:rsidR="00360EBF"><w:t xml:space="preserve">very </w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve">powerful and flexible. So real </w:t></w:r><w:r w:rsidR="006F5E64"><w:t>developers</w:t></w:r><w:r w:rsidR="00165A64"><w:t xml:space="preserve"> write their own custom controls and know how they work internally. </w:t></w:r><w:r w:rsidR="006F5E64"><w:t>Because this is a good topic for extensibility I’ll cover this in this book, too.</w:t></w:r></w:p><w:p w:rsidR="00C20A3D" w:rsidRDefault="00C20A3D" w:rsidP="00C20A3D"><w:pPr><w:pStyle w:val="berschrift2"/></w:pPr><w:r><w:t>Summary</w:t></w:r></w:p><w:p w:rsidR="00C20A3D" w:rsidRDefault="00C20A3D" w:rsidP="00C20A3D"><w:pPr><w:pStyle w:val="BodyTextFirst"/></w:pPr><w:r><w:t xml:space="preserve">In this chapter you learned about the internal processing of ASP.NET. Especially we took a look into the processing pipeline, which is running a single request and performs the steps required to create the content send to the client finally. The pipeline forms the life cycle of </w:t></w:r><w:r><w:lastRenderedPageBreak/><w:t xml:space="preserve">application, pages, and controls. During the life cycle several states store current processing step’s data. To </w:t></w:r><w:r w:rsidR="00EC1EE5"><w:t xml:space="preserve">rescue data from one request to another, the view state is used. You learned what the view state is for and how to overcome the quirks and traps the </w:t></w:r><w:proofErr w:type="spellStart"/><w:r w:rsidR="00EC1EE5"><w:t>implemention</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r w:rsidR="00EC1EE5"><w:t xml:space="preserve"> has.</w:t></w:r></w:p><w:p w:rsidR="00EC1EE5" w:rsidRPr="00C20A3D" w:rsidRDefault="00EC1EE5" w:rsidP="00EC1EE5"><w:pPr><w:pStyle w:val="BodyTextCont"/></w:pPr><w:r><w:t>However, Web applications handle usually more than one request at a time. The next chapter extends the description by looking into threading, thread pools, and other stuff required to make an ASP.NET project fast and reliable even if it comes under pressure from multiple requests.</w:t></w:r></w:p><w:sectPr w:rsidR="00EC1EE5" w:rsidRPr="00C20A3D" w:rsidSect="00A26137"><w:pgSz w:w="12240" w:h="15840"/><w:pgMar w:top="1800" w:right="1800" w:bottom="1440" w:left="1800" w:header="720" w:footer="720" w:gutter="0"/><w:cols w:space="720"/></w:sectPr></w:body></w:document>