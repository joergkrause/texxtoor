<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="xs" version="2.0">
    <xd:doc xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl" scope="stylesheet">
        <xd:desc>
            <xd:p><xd:b>Created on:</xd:b> Nov 15, 2013</xd:p>
            <xd:p><xd:b>Author:</xd:b> Mahesh Pal Singh</xd:p>
            <xd:p/>
        </xd:desc>
    </xd:doc>
<xsl:output indent="yes"></xsl:output>
<xsl:template match="/">
<xsl:result-document method="xml" href="normalizeListing.xsl">
<xsl:text disable-output-escaping="yes">
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="xs" version="2.0"&gt;
    &lt;xd:doc xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl" scope="stylesheet"&gt;
        &lt;xd:desc&gt;
            &lt;xd:p&gt;&lt;xd:b&gt;Created on:&lt;/xd:b&gt;&lt;/xd:p&gt;
            &lt;xd:p&gt;&lt;xd:b&gt;Author:&lt;/xd:b&gt;Mahesh Pal Singh&lt;/xd:p&gt;
            &lt;xd:p&gt;This XSLT is AutoGenerated&lt;/xd:p&gt;
        &lt;/xd:desc&gt;
        &lt;/xd:doc&gt;</xsl:text>
    <xsl:comment> Following is the identity Template that will replicate the original input XML except for specific templates below </xsl:comment>
    <xsl:text disable-output-escaping="yes">
    &lt;xsl:template match="node()|@*"&gt;        
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="node()|@*"&gt;&lt;/xsl:apply-templates&gt;
        &lt;/xsl:copy&gt;        
        &lt;/xsl:template&gt;</xsl:text>    
    <xsl:comment>Templace to conjuct all element with name Element and type attribute text</xsl:comment>
    <xsl:comment>Logic here is pick all contiguous Element element with class type Text and group them under a parent</xsl:comment>
    <xsl:text disable-output-escaping="yes">
    &lt;xsl:template match="//p[@class='ListingText']"&gt;
        &lt;xsl:variable name="heading"&gt;                    
        &lt;xsl:choose&gt;
</xsl:text>
            <xsl:for-each select="config/list">
                <xsl:variable name="word">
                    <xsl:value-of select="."/>
                </xsl:variable>
                    <xsl:text disable-output-escaping="yes">&lt;xsl:when test="preceding::p[@class='</xsl:text>
                <xsl:value-of select="$word"/>
                <xsl:text disable-output-escaping="yes">']"&gt;</xsl:text>
                <xsl:text disable-output-escaping="yes">&lt;xsl:value-of select="preceding::p[@class='</xsl:text><xsl:value-of select="$word"/><xsl:text disable-output-escaping="yes">'][1]"/&gt;&lt;/xsl:when&gt;</xsl:text>
            </xsl:for-each>
            <xsl:text disable-output-escaping="yes">&lt;xsl:otherwise&gt;&lt;/xsl:otherwise&gt;
          &lt;/xsl:choose&gt;
          &lt;/xsl:variable&gt;
            &lt;xsl:choose&gt;            
                &lt;xsl:when test="not(preceding-sibling::*[1][local-name()='p'][@class='ListingText'])and following-sibling::*[1][local-name()='p'][@class='ListingText']"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$heading=''"&gt;
                        &lt;xsl:text disable-output-escaping="yes"&gt;</xsl:text><xsl:text disable-output-escaping="no">&lt;Element Type="Listing"&gt;</xsl:text><xsl:text disable-output-escaping="yes">&lt;/xsl:text&gt;</xsl:text><xsl:text disable-output-escaping="yes">&lt;xsl:copy-of select="*|text()"&gt;&lt;/xsl:copy-of&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                        &lt;xsl:text disable-output-escaping="yes"&gt;</xsl:text><xsl:text disable-output-escaping="no">&lt;</xsl:text><xsl:text disable-output-escaping="yes">Element Type="Listing" Name="&lt;/xsl:text&gt;&lt;xsl:text&gt;&lt;/xsl:text&gt;&lt;xsl:value-of select="replace(replace($heading,'\n+',''),'\s+',' ')"/&gt;&lt;xsl:text  disable-output-escaping="yes"&gt;"</xsl:text><xsl:text disable-output-escaping="no">&gt;</xsl:text><xsl:text disable-output-escaping="yes">&lt;/xsl:text&gt;&lt;xsl:copy-of select="*|text()"&gt;&lt;/xsl:copy-of&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt; 
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="preceding-sibling::*[1][local-name()='p'][@class='ListingText'] and following-sibling::*[1][local-name()='p'][@class='ListingText']"&gt;
                            &lt;xsl:copy-of select="*|text()"&gt;&lt;/xsl:copy-of&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="preceding-sibling::*[1][local-name()='p'][@class='ListingText'] and not(following-sibling::*[1][local-name()='p'][@class='ListingText'])"&gt;
                        &lt;xsl:copy-of select="*|text()"&gt;&lt;/xsl:copy-of&gt;&lt;xsl:text disable-output-escaping="yes"&gt;</xsl:text><xsl:text disable-output-escaping="no">&lt;/Element&gt;</xsl:text><xsl:text disable-output-escaping="yes">&lt;/xsl:text&gt;&lt;xsl:text&gt;</xsl:text><xsl:text disable-output-escaping="yes">&amp;#x00a;</xsl:text><xsl:text disable-output-escaping="yes">&lt;/xsl:text&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="not(preceding-sibling::*[1][local-name()='p'][@class='ListingText']) and not(following-sibling::*[1][local-name()='p'][@class='ListingText'])"&gt;
                            &lt;xsl:copy-of select="."&gt;&lt;/xsl:copy-of&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:copy-of select="."&gt;&lt;/xsl:copy-of&gt;
                        &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;
    &lt;/xsl:stylesheet&gt;</xsl:text>      
             </xsl:result-document>
    </xsl:template>
</xsl:stylesheet>
