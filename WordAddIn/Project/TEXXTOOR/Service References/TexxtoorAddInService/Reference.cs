//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TEXXTOOR.TexxtoorAddInService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceElement", Namespace="http://schemas.datacontract.org/2004/07/Texxtoor.Portal.ServiceApi.Services.Servi" +
        "ceDtos")]
    [System.SerializableAttribute()]
    public partial class ServiceElement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.ServiceElement> ChildrenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.ServiceElement> Children {
            get {
                return this.ChildrenField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildrenField, value) != true)) {
                    this.ChildrenField = value;
                    this.RaisePropertyChanged("Children");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentProperties", Namespace="http://schemas.datacontract.org/2004/07/Texxtoor.Portal.ServiceApi.Services.Servi" +
        "ceDtos")]
    [System.SerializableAttribute()]
    public partial class DocumentProperties : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowChaptersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowMetaDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChapterDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentLanguageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ListingSnippetDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SectionDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowNumberChainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextSnippetDefaultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowChapters {
            get {
                return this.AllowChaptersField;
            }
            set {
                if ((this.AllowChaptersField.Equals(value) != true)) {
                    this.AllowChaptersField = value;
                    this.RaisePropertyChanged("AllowChapters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowMetaData {
            get {
                return this.AllowMetaDataField;
            }
            set {
                if ((this.AllowMetaDataField.Equals(value) != true)) {
                    this.AllowMetaDataField = value;
                    this.RaisePropertyChanged("AllowMetaData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChapterDefault {
            get {
                return this.ChapterDefaultField;
            }
            set {
                if ((object.ReferenceEquals(this.ChapterDefaultField, value) != true)) {
                    this.ChapterDefaultField = value;
                    this.RaisePropertyChanged("ChapterDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentLanguage {
            get {
                return this.DocumentLanguageField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentLanguageField, value) != true)) {
                    this.DocumentLanguageField = value;
                    this.RaisePropertyChanged("DocumentLanguage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ListingSnippetDefault {
            get {
                return this.ListingSnippetDefaultField;
            }
            set {
                if ((object.ReferenceEquals(this.ListingSnippetDefaultField, value) != true)) {
                    this.ListingSnippetDefaultField = value;
                    this.RaisePropertyChanged("ListingSnippetDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SectionDefault {
            get {
                return this.SectionDefaultField;
            }
            set {
                if ((object.ReferenceEquals(this.SectionDefaultField, value) != true)) {
                    this.SectionDefaultField = value;
                    this.RaisePropertyChanged("SectionDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowNumberChain {
            get {
                return this.ShowNumberChainField;
            }
            set {
                if ((this.ShowNumberChainField.Equals(value) != true)) {
                    this.ShowNumberChainField = value;
                    this.RaisePropertyChanged("ShowNumberChain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TextSnippetDefault {
            get {
                return this.TextSnippetDefaultField;
            }
            set {
                if ((object.ReferenceEquals(this.TextSnippetDefaultField, value) != true)) {
                    this.TextSnippetDefaultField = value;
                    this.RaisePropertyChanged("TextSnippetDefault");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Comment", Namespace="http://schemas.datacontract.org/2004/07/Texxtoor.Portal.ServiceApi.Services.Servi" +
        "ceDtos")]
    [System.SerializableAttribute()]
    public partial class Comment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TermType", Namespace="http://schemas.datacontract.org/2004/07/Texxtoor.DataModels.Models.Author")]
    public enum TermType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cite = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Definition = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Abbreviation = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Idiom = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Variable = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Link = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TexxtoorAddInService.IUploadService")]
    public interface IUploadService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/UploadImage", ReplyAction="http://tempuri.org/IUploadService/UploadImageResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, string>>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.KeyValuePair<int, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.ServiceElement>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TEXXTOOR.TexxtoorAddInService.ServiceElement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TEXXTOOR.TexxtoorAddInService.DocumentProperties))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TEXXTOOR.TexxtoorAddInService.Comment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TEXXTOOR.TexxtoorAddInService.TermType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<int>))]
        object UploadImage(int documentId, int chapterId, System.Nullable<int> currentSnippetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/UploadImage", ReplyAction="http://tempuri.org/IUploadService/UploadImageResponse")]
        System.IAsyncResult BeginUploadImage(int documentId, int chapterId, System.Nullable<int> currentSnippetId, System.AsyncCallback callback, object asyncState);
        
        object EndUploadImage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/PublishDocument", ReplyAction="http://tempuri.org/IUploadService/PublishDocumentResponse")]
        int PublishDocument(string ssid, int documentId, string html);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/PublishDocument", ReplyAction="http://tempuri.org/IUploadService/PublishDocumentResponse")]
        System.IAsyncResult BeginPublishDocument(string ssid, int documentId, string html, System.AsyncCallback callback, object asyncState);
        
        int EndPublishDocument(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/PublishNewDocument", ReplyAction="http://tempuri.org/IUploadService/PublishNewDocumentResponse")]
        int PublishNewDocument(string ssid, int projectId, string name, string html);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/PublishNewDocument", ReplyAction="http://tempuri.org/IUploadService/PublishNewDocumentResponse")]
        System.IAsyncResult BeginPublishNewDocument(string ssid, int projectId, string name, string html, System.AsyncCallback callback, object asyncState);
        
        int EndPublishNewDocument(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetAllProjects", ReplyAction="http://tempuri.org/IUploadService/GetAllProjectsResponse")]
        System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.ServiceElement> GetAllProjects(string ssid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/GetAllProjects", ReplyAction="http://tempuri.org/IUploadService/GetAllProjectsResponse")]
        System.IAsyncResult BeginGetAllProjects(string ssid, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.ServiceElement> EndGetAllProjects(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/SignOut", ReplyAction="http://tempuri.org/IUploadService/SignOutResponse")]
        string SignOut(string ssid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/SignOut", ReplyAction="http://tempuri.org/IUploadService/SignOutResponse")]
        System.IAsyncResult BeginSignOut(string ssid, System.AsyncCallback callback, object asyncState);
        
        string EndSignOut(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/SignIn", ReplyAction="http://tempuri.org/IUploadService/SignInResponse")]
        string SignIn(string uname, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/SignIn", ReplyAction="http://tempuri.org/IUploadService/SignInResponse")]
        System.IAsyncResult BeginSignIn(string uname, string password, System.AsyncCallback callback, object asyncState);
        
        string EndSignIn(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetDocumentSettings", ReplyAction="http://tempuri.org/IUploadService/GetDocumentSettingsResponse")]
        TEXXTOOR.TexxtoorAddInService.DocumentProperties GetDocumentSettings(string ssid, int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/GetDocumentSettings", ReplyAction="http://tempuri.org/IUploadService/GetDocumentSettingsResponse")]
        System.IAsyncResult BeginGetDocumentSettings(string ssid, int id, System.AsyncCallback callback, object asyncState);
        
        TEXXTOOR.TexxtoorAddInService.DocumentProperties EndGetDocumentSettings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/SaveComment", ReplyAction="http://tempuri.org/IUploadService/SaveCommentResponse")]
        System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment> SaveComment(string ssid, int id, int snippetId, string target, string subject, string comment, bool closed);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/SaveComment", ReplyAction="http://tempuri.org/IUploadService/SaveCommentResponse")]
        System.IAsyncResult BeginSaveComment(string ssid, int id, int snippetId, string target, string subject, string comment, bool closed, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment> EndSaveComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/LoadComments", ReplyAction="http://tempuri.org/IUploadService/LoadCommentsResponse")]
        System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment> LoadComments(string ssid, int id, int snippetId, string target);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/LoadComments", ReplyAction="http://tempuri.org/IUploadService/LoadCommentsResponse")]
        System.IAsyncResult BeginLoadComments(string ssid, int id, int snippetId, string target, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment> EndLoadComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/SemanticLists", ReplyAction="http://tempuri.org/IUploadService/SemanticListsResponse")]
        System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, string>> SemanticLists(string ssid, int id, TEXXTOOR.TexxtoorAddInService.TermType type);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/SemanticLists", ReplyAction="http://tempuri.org/IUploadService/SemanticListsResponse")]
        System.IAsyncResult BeginSemanticLists(string ssid, int id, TEXXTOOR.TexxtoorAddInService.TermType type, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, string>> EndSemanticLists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetServerImages", ReplyAction="http://tempuri.org/IUploadService/GetServerImagesResponse")]
        System.Collections.Generic.List<int> GetServerImages(string ssid, int documentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/GetServerImages", ReplyAction="http://tempuri.org/IUploadService/GetServerImagesResponse")]
        System.IAsyncResult BeginGetServerImages(string ssid, int documentId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<int> EndGetServerImages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetServerImage", ReplyAction="http://tempuri.org/IUploadService/GetServerImageResponse")]
        byte[] GetServerImage(string ssid, int id, bool asThumbnail, string thumbNailSize);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/GetServerImage", ReplyAction="http://tempuri.org/IUploadService/GetServerImageResponse")]
        System.IAsyncResult BeginGetServerImage(string ssid, int id, bool asThumbnail, string thumbNailSize, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetServerImage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadService/GetServerImageName", ReplyAction="http://tempuri.org/IUploadService/GetServerImageNameResponse")]
        string GetServerImageName(string ssid, int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadService/GetServerImageName", ReplyAction="http://tempuri.org/IUploadService/GetServerImageNameResponse")]
        System.IAsyncResult BeginGetServerImageName(string ssid, int id, System.AsyncCallback callback, object asyncState);
        
        string EndGetServerImageName(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUploadServiceChannel : TEXXTOOR.TexxtoorAddInService.IUploadService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PublishDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PublishDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PublishNewDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PublishNewDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.ServiceElement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.ServiceElement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SignOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SignOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SignInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SignInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDocumentSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDocumentSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TEXXTOOR.TexxtoorAddInService.DocumentProperties Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TEXXTOOR.TexxtoorAddInService.DocumentProperties)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoadCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SemanticListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SemanticListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, string>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, string>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServerImagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServerImagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServerImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServerImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServerImageNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServerImageNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadServiceClient : System.ServiceModel.ClientBase<TEXXTOOR.TexxtoorAddInService.IUploadService>, TEXXTOOR.TexxtoorAddInService.IUploadService {
        
        private BeginOperationDelegate onBeginUploadImageDelegate;
        
        private EndOperationDelegate onEndUploadImageDelegate;
        
        private System.Threading.SendOrPostCallback onUploadImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginPublishDocumentDelegate;
        
        private EndOperationDelegate onEndPublishDocumentDelegate;
        
        private System.Threading.SendOrPostCallback onPublishDocumentCompletedDelegate;
        
        private BeginOperationDelegate onBeginPublishNewDocumentDelegate;
        
        private EndOperationDelegate onEndPublishNewDocumentDelegate;
        
        private System.Threading.SendOrPostCallback onPublishNewDocumentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllProjectsDelegate;
        
        private EndOperationDelegate onEndGetAllProjectsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllProjectsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSignOutDelegate;
        
        private EndOperationDelegate onEndSignOutDelegate;
        
        private System.Threading.SendOrPostCallback onSignOutCompletedDelegate;
        
        private BeginOperationDelegate onBeginSignInDelegate;
        
        private EndOperationDelegate onEndSignInDelegate;
        
        private System.Threading.SendOrPostCallback onSignInCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDocumentSettingsDelegate;
        
        private EndOperationDelegate onEndGetDocumentSettingsDelegate;
        
        private System.Threading.SendOrPostCallback onGetDocumentSettingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveCommentDelegate;
        
        private EndOperationDelegate onEndSaveCommentDelegate;
        
        private System.Threading.SendOrPostCallback onSaveCommentCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadCommentsDelegate;
        
        private EndOperationDelegate onEndLoadCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onLoadCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSemanticListsDelegate;
        
        private EndOperationDelegate onEndSemanticListsDelegate;
        
        private System.Threading.SendOrPostCallback onSemanticListsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServerImagesDelegate;
        
        private EndOperationDelegate onEndGetServerImagesDelegate;
        
        private System.Threading.SendOrPostCallback onGetServerImagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServerImageDelegate;
        
        private EndOperationDelegate onEndGetServerImageDelegate;
        
        private System.Threading.SendOrPostCallback onGetServerImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServerImageNameDelegate;
        
        private EndOperationDelegate onEndGetServerImageNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetServerImageNameCompletedDelegate;
        
        public UploadServiceClient() {
        }
        
        public UploadServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UploadServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<UploadImageCompletedEventArgs> UploadImageCompleted;
        
        public event System.EventHandler<PublishDocumentCompletedEventArgs> PublishDocumentCompleted;
        
        public event System.EventHandler<PublishNewDocumentCompletedEventArgs> PublishNewDocumentCompleted;
        
        public event System.EventHandler<GetAllProjectsCompletedEventArgs> GetAllProjectsCompleted;
        
        public event System.EventHandler<SignOutCompletedEventArgs> SignOutCompleted;
        
        public event System.EventHandler<SignInCompletedEventArgs> SignInCompleted;
        
        public event System.EventHandler<GetDocumentSettingsCompletedEventArgs> GetDocumentSettingsCompleted;
        
        public event System.EventHandler<SaveCommentCompletedEventArgs> SaveCommentCompleted;
        
        public event System.EventHandler<LoadCommentsCompletedEventArgs> LoadCommentsCompleted;
        
        public event System.EventHandler<SemanticListsCompletedEventArgs> SemanticListsCompleted;
        
        public event System.EventHandler<GetServerImagesCompletedEventArgs> GetServerImagesCompleted;
        
        public event System.EventHandler<GetServerImageCompletedEventArgs> GetServerImageCompleted;
        
        public event System.EventHandler<GetServerImageNameCompletedEventArgs> GetServerImageNameCompleted;
        
        public object UploadImage(int documentId, int chapterId, System.Nullable<int> currentSnippetId) {
            return base.Channel.UploadImage(documentId, chapterId, currentSnippetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUploadImage(int documentId, int chapterId, System.Nullable<int> currentSnippetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadImage(documentId, chapterId, currentSnippetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object EndUploadImage(System.IAsyncResult result) {
            return base.Channel.EndUploadImage(result);
        }
        
        private System.IAsyncResult OnBeginUploadImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int documentId = ((int)(inValues[0]));
            int chapterId = ((int)(inValues[1]));
            System.Nullable<int> currentSnippetId = ((System.Nullable<int>)(inValues[2]));
            return this.BeginUploadImage(documentId, chapterId, currentSnippetId, callback, asyncState);
        }
        
        private object[] OnEndUploadImage(System.IAsyncResult result) {
            object retVal = this.EndUploadImage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadImageCompleted(object state) {
            if ((this.UploadImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadImageCompleted(this, new UploadImageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadImageAsync(int documentId, int chapterId, System.Nullable<int> currentSnippetId) {
            this.UploadImageAsync(documentId, chapterId, currentSnippetId, null);
        }
        
        public void UploadImageAsync(int documentId, int chapterId, System.Nullable<int> currentSnippetId, object userState) {
            if ((this.onBeginUploadImageDelegate == null)) {
                this.onBeginUploadImageDelegate = new BeginOperationDelegate(this.OnBeginUploadImage);
            }
            if ((this.onEndUploadImageDelegate == null)) {
                this.onEndUploadImageDelegate = new EndOperationDelegate(this.OnEndUploadImage);
            }
            if ((this.onUploadImageCompletedDelegate == null)) {
                this.onUploadImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadImageCompleted);
            }
            base.InvokeAsync(this.onBeginUploadImageDelegate, new object[] {
                        documentId,
                        chapterId,
                        currentSnippetId}, this.onEndUploadImageDelegate, this.onUploadImageCompletedDelegate, userState);
        }
        
        public int PublishDocument(string ssid, int documentId, string html) {
            return base.Channel.PublishDocument(ssid, documentId, html);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPublishDocument(string ssid, int documentId, string html, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPublishDocument(ssid, documentId, html, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndPublishDocument(System.IAsyncResult result) {
            return base.Channel.EndPublishDocument(result);
        }
        
        private System.IAsyncResult OnBeginPublishDocument(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ssid = ((string)(inValues[0]));
            int documentId = ((int)(inValues[1]));
            string html = ((string)(inValues[2]));
            return this.BeginPublishDocument(ssid, documentId, html, callback, asyncState);
        }
        
        private object[] OnEndPublishDocument(System.IAsyncResult result) {
            int retVal = this.EndPublishDocument(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPublishDocumentCompleted(object state) {
            if ((this.PublishDocumentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PublishDocumentCompleted(this, new PublishDocumentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PublishDocumentAsync(string ssid, int documentId, string html) {
            this.PublishDocumentAsync(ssid, documentId, html, null);
        }
        
        public void PublishDocumentAsync(string ssid, int documentId, string html, object userState) {
            if ((this.onBeginPublishDocumentDelegate == null)) {
                this.onBeginPublishDocumentDelegate = new BeginOperationDelegate(this.OnBeginPublishDocument);
            }
            if ((this.onEndPublishDocumentDelegate == null)) {
                this.onEndPublishDocumentDelegate = new EndOperationDelegate(this.OnEndPublishDocument);
            }
            if ((this.onPublishDocumentCompletedDelegate == null)) {
                this.onPublishDocumentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPublishDocumentCompleted);
            }
            base.InvokeAsync(this.onBeginPublishDocumentDelegate, new object[] {
                        ssid,
                        documentId,
                        html}, this.onEndPublishDocumentDelegate, this.onPublishDocumentCompletedDelegate, userState);
        }
        
        public int PublishNewDocument(string ssid, int projectId, string name, string html) {
            return base.Channel.PublishNewDocument(ssid, projectId, name, html);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPublishNewDocument(string ssid, int projectId, string name, string html, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPublishNewDocument(ssid, projectId, name, html, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndPublishNewDocument(System.IAsyncResult result) {
            return base.Channel.EndPublishNewDocument(result);
        }
        
        private System.IAsyncResult OnBeginPublishNewDocument(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ssid = ((string)(inValues[0]));
            int projectId = ((int)(inValues[1]));
            string name = ((string)(inValues[2]));
            string html = ((string)(inValues[3]));
            return this.BeginPublishNewDocument(ssid, projectId, name, html, callback, asyncState);
        }
        
        private object[] OnEndPublishNewDocument(System.IAsyncResult result) {
            int retVal = this.EndPublishNewDocument(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPublishNewDocumentCompleted(object state) {
            if ((this.PublishNewDocumentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PublishNewDocumentCompleted(this, new PublishNewDocumentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PublishNewDocumentAsync(string ssid, int projectId, string name, string html) {
            this.PublishNewDocumentAsync(ssid, projectId, name, html, null);
        }
        
        public void PublishNewDocumentAsync(string ssid, int projectId, string name, string html, object userState) {
            if ((this.onBeginPublishNewDocumentDelegate == null)) {
                this.onBeginPublishNewDocumentDelegate = new BeginOperationDelegate(this.OnBeginPublishNewDocument);
            }
            if ((this.onEndPublishNewDocumentDelegate == null)) {
                this.onEndPublishNewDocumentDelegate = new EndOperationDelegate(this.OnEndPublishNewDocument);
            }
            if ((this.onPublishNewDocumentCompletedDelegate == null)) {
                this.onPublishNewDocumentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPublishNewDocumentCompleted);
            }
            base.InvokeAsync(this.onBeginPublishNewDocumentDelegate, new object[] {
                        ssid,
                        projectId,
                        name,
                        html}, this.onEndPublishNewDocumentDelegate, this.onPublishNewDocumentCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.ServiceElement> GetAllProjects(string ssid) {
            return base.Channel.GetAllProjects(ssid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllProjects(string ssid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllProjects(ssid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.ServiceElement> EndGetAllProjects(System.IAsyncResult result) {
            return base.Channel.EndGetAllProjects(result);
        }
        
        private System.IAsyncResult OnBeginGetAllProjects(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ssid = ((string)(inValues[0]));
            return this.BeginGetAllProjects(ssid, callback, asyncState);
        }
        
        private object[] OnEndGetAllProjects(System.IAsyncResult result) {
            System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.ServiceElement> retVal = this.EndGetAllProjects(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllProjectsCompleted(object state) {
            if ((this.GetAllProjectsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllProjectsCompleted(this, new GetAllProjectsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllProjectsAsync(string ssid) {
            this.GetAllProjectsAsync(ssid, null);
        }
        
        public void GetAllProjectsAsync(string ssid, object userState) {
            if ((this.onBeginGetAllProjectsDelegate == null)) {
                this.onBeginGetAllProjectsDelegate = new BeginOperationDelegate(this.OnBeginGetAllProjects);
            }
            if ((this.onEndGetAllProjectsDelegate == null)) {
                this.onEndGetAllProjectsDelegate = new EndOperationDelegate(this.OnEndGetAllProjects);
            }
            if ((this.onGetAllProjectsCompletedDelegate == null)) {
                this.onGetAllProjectsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllProjectsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllProjectsDelegate, new object[] {
                        ssid}, this.onEndGetAllProjectsDelegate, this.onGetAllProjectsCompletedDelegate, userState);
        }
        
        public string SignOut(string ssid) {
            return base.Channel.SignOut(ssid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSignOut(string ssid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSignOut(ssid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSignOut(System.IAsyncResult result) {
            return base.Channel.EndSignOut(result);
        }
        
        private System.IAsyncResult OnBeginSignOut(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ssid = ((string)(inValues[0]));
            return this.BeginSignOut(ssid, callback, asyncState);
        }
        
        private object[] OnEndSignOut(System.IAsyncResult result) {
            string retVal = this.EndSignOut(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSignOutCompleted(object state) {
            if ((this.SignOutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SignOutCompleted(this, new SignOutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SignOutAsync(string ssid) {
            this.SignOutAsync(ssid, null);
        }
        
        public void SignOutAsync(string ssid, object userState) {
            if ((this.onBeginSignOutDelegate == null)) {
                this.onBeginSignOutDelegate = new BeginOperationDelegate(this.OnBeginSignOut);
            }
            if ((this.onEndSignOutDelegate == null)) {
                this.onEndSignOutDelegate = new EndOperationDelegate(this.OnEndSignOut);
            }
            if ((this.onSignOutCompletedDelegate == null)) {
                this.onSignOutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSignOutCompleted);
            }
            base.InvokeAsync(this.onBeginSignOutDelegate, new object[] {
                        ssid}, this.onEndSignOutDelegate, this.onSignOutCompletedDelegate, userState);
        }
        
        public string SignIn(string uname, string password) {
            return base.Channel.SignIn(uname, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSignIn(string uname, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSignIn(uname, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSignIn(System.IAsyncResult result) {
            return base.Channel.EndSignIn(result);
        }
        
        private System.IAsyncResult OnBeginSignIn(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string uname = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginSignIn(uname, password, callback, asyncState);
        }
        
        private object[] OnEndSignIn(System.IAsyncResult result) {
            string retVal = this.EndSignIn(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSignInCompleted(object state) {
            if ((this.SignInCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SignInCompleted(this, new SignInCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SignInAsync(string uname, string password) {
            this.SignInAsync(uname, password, null);
        }
        
        public void SignInAsync(string uname, string password, object userState) {
            if ((this.onBeginSignInDelegate == null)) {
                this.onBeginSignInDelegate = new BeginOperationDelegate(this.OnBeginSignIn);
            }
            if ((this.onEndSignInDelegate == null)) {
                this.onEndSignInDelegate = new EndOperationDelegate(this.OnEndSignIn);
            }
            if ((this.onSignInCompletedDelegate == null)) {
                this.onSignInCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSignInCompleted);
            }
            base.InvokeAsync(this.onBeginSignInDelegate, new object[] {
                        uname,
                        password}, this.onEndSignInDelegate, this.onSignInCompletedDelegate, userState);
        }
        
        public TEXXTOOR.TexxtoorAddInService.DocumentProperties GetDocumentSettings(string ssid, int id) {
            return base.Channel.GetDocumentSettings(ssid, id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDocumentSettings(string ssid, int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDocumentSettings(ssid, id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public TEXXTOOR.TexxtoorAddInService.DocumentProperties EndGetDocumentSettings(System.IAsyncResult result) {
            return base.Channel.EndGetDocumentSettings(result);
        }
        
        private System.IAsyncResult OnBeginGetDocumentSettings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ssid = ((string)(inValues[0]));
            int id = ((int)(inValues[1]));
            return this.BeginGetDocumentSettings(ssid, id, callback, asyncState);
        }
        
        private object[] OnEndGetDocumentSettings(System.IAsyncResult result) {
            TEXXTOOR.TexxtoorAddInService.DocumentProperties retVal = this.EndGetDocumentSettings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDocumentSettingsCompleted(object state) {
            if ((this.GetDocumentSettingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDocumentSettingsCompleted(this, new GetDocumentSettingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDocumentSettingsAsync(string ssid, int id) {
            this.GetDocumentSettingsAsync(ssid, id, null);
        }
        
        public void GetDocumentSettingsAsync(string ssid, int id, object userState) {
            if ((this.onBeginGetDocumentSettingsDelegate == null)) {
                this.onBeginGetDocumentSettingsDelegate = new BeginOperationDelegate(this.OnBeginGetDocumentSettings);
            }
            if ((this.onEndGetDocumentSettingsDelegate == null)) {
                this.onEndGetDocumentSettingsDelegate = new EndOperationDelegate(this.OnEndGetDocumentSettings);
            }
            if ((this.onGetDocumentSettingsCompletedDelegate == null)) {
                this.onGetDocumentSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDocumentSettingsCompleted);
            }
            base.InvokeAsync(this.onBeginGetDocumentSettingsDelegate, new object[] {
                        ssid,
                        id}, this.onEndGetDocumentSettingsDelegate, this.onGetDocumentSettingsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment> SaveComment(string ssid, int id, int snippetId, string target, string subject, string comment, bool closed) {
            return base.Channel.SaveComment(ssid, id, snippetId, target, subject, comment, closed);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveComment(string ssid, int id, int snippetId, string target, string subject, string comment, bool closed, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveComment(ssid, id, snippetId, target, subject, comment, closed, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment> EndSaveComment(System.IAsyncResult result) {
            return base.Channel.EndSaveComment(result);
        }
        
        private System.IAsyncResult OnBeginSaveComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ssid = ((string)(inValues[0]));
            int id = ((int)(inValues[1]));
            int snippetId = ((int)(inValues[2]));
            string target = ((string)(inValues[3]));
            string subject = ((string)(inValues[4]));
            string comment = ((string)(inValues[5]));
            bool closed = ((bool)(inValues[6]));
            return this.BeginSaveComment(ssid, id, snippetId, target, subject, comment, closed, callback, asyncState);
        }
        
        private object[] OnEndSaveComment(System.IAsyncResult result) {
            System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment> retVal = this.EndSaveComment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveCommentCompleted(object state) {
            if ((this.SaveCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveCommentCompleted(this, new SaveCommentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveCommentAsync(string ssid, int id, int snippetId, string target, string subject, string comment, bool closed) {
            this.SaveCommentAsync(ssid, id, snippetId, target, subject, comment, closed, null);
        }
        
        public void SaveCommentAsync(string ssid, int id, int snippetId, string target, string subject, string comment, bool closed, object userState) {
            if ((this.onBeginSaveCommentDelegate == null)) {
                this.onBeginSaveCommentDelegate = new BeginOperationDelegate(this.OnBeginSaveComment);
            }
            if ((this.onEndSaveCommentDelegate == null)) {
                this.onEndSaveCommentDelegate = new EndOperationDelegate(this.OnEndSaveComment);
            }
            if ((this.onSaveCommentCompletedDelegate == null)) {
                this.onSaveCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveCommentCompleted);
            }
            base.InvokeAsync(this.onBeginSaveCommentDelegate, new object[] {
                        ssid,
                        id,
                        snippetId,
                        target,
                        subject,
                        comment,
                        closed}, this.onEndSaveCommentDelegate, this.onSaveCommentCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment> LoadComments(string ssid, int id, int snippetId, string target) {
            return base.Channel.LoadComments(ssid, id, snippetId, target);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLoadComments(string ssid, int id, int snippetId, string target, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadComments(ssid, id, snippetId, target, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment> EndLoadComments(System.IAsyncResult result) {
            return base.Channel.EndLoadComments(result);
        }
        
        private System.IAsyncResult OnBeginLoadComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ssid = ((string)(inValues[0]));
            int id = ((int)(inValues[1]));
            int snippetId = ((int)(inValues[2]));
            string target = ((string)(inValues[3]));
            return this.BeginLoadComments(ssid, id, snippetId, target, callback, asyncState);
        }
        
        private object[] OnEndLoadComments(System.IAsyncResult result) {
            System.Collections.Generic.List<TEXXTOOR.TexxtoorAddInService.Comment> retVal = this.EndLoadComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadCommentsCompleted(object state) {
            if ((this.LoadCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadCommentsCompleted(this, new LoadCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadCommentsAsync(string ssid, int id, int snippetId, string target) {
            this.LoadCommentsAsync(ssid, id, snippetId, target, null);
        }
        
        public void LoadCommentsAsync(string ssid, int id, int snippetId, string target, object userState) {
            if ((this.onBeginLoadCommentsDelegate == null)) {
                this.onBeginLoadCommentsDelegate = new BeginOperationDelegate(this.OnBeginLoadComments);
            }
            if ((this.onEndLoadCommentsDelegate == null)) {
                this.onEndLoadCommentsDelegate = new EndOperationDelegate(this.OnEndLoadComments);
            }
            if ((this.onLoadCommentsCompletedDelegate == null)) {
                this.onLoadCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginLoadCommentsDelegate, new object[] {
                        ssid,
                        id,
                        snippetId,
                        target}, this.onEndLoadCommentsDelegate, this.onLoadCommentsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, string>> SemanticLists(string ssid, int id, TEXXTOOR.TexxtoorAddInService.TermType type) {
            return base.Channel.SemanticLists(ssid, id, type);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSemanticLists(string ssid, int id, TEXXTOOR.TexxtoorAddInService.TermType type, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSemanticLists(ssid, id, type, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, string>> EndSemanticLists(System.IAsyncResult result) {
            return base.Channel.EndSemanticLists(result);
        }
        
        private System.IAsyncResult OnBeginSemanticLists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ssid = ((string)(inValues[0]));
            int id = ((int)(inValues[1]));
            TEXXTOOR.TexxtoorAddInService.TermType type = ((TEXXTOOR.TexxtoorAddInService.TermType)(inValues[2]));
            return this.BeginSemanticLists(ssid, id, type, callback, asyncState);
        }
        
        private object[] OnEndSemanticLists(System.IAsyncResult result) {
            System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, string>> retVal = this.EndSemanticLists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSemanticListsCompleted(object state) {
            if ((this.SemanticListsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SemanticListsCompleted(this, new SemanticListsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SemanticListsAsync(string ssid, int id, TEXXTOOR.TexxtoorAddInService.TermType type) {
            this.SemanticListsAsync(ssid, id, type, null);
        }
        
        public void SemanticListsAsync(string ssid, int id, TEXXTOOR.TexxtoorAddInService.TermType type, object userState) {
            if ((this.onBeginSemanticListsDelegate == null)) {
                this.onBeginSemanticListsDelegate = new BeginOperationDelegate(this.OnBeginSemanticLists);
            }
            if ((this.onEndSemanticListsDelegate == null)) {
                this.onEndSemanticListsDelegate = new EndOperationDelegate(this.OnEndSemanticLists);
            }
            if ((this.onSemanticListsCompletedDelegate == null)) {
                this.onSemanticListsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSemanticListsCompleted);
            }
            base.InvokeAsync(this.onBeginSemanticListsDelegate, new object[] {
                        ssid,
                        id,
                        type}, this.onEndSemanticListsDelegate, this.onSemanticListsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<int> GetServerImages(string ssid, int documentId) {
            return base.Channel.GetServerImages(ssid, documentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetServerImages(string ssid, int documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServerImages(ssid, documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<int> EndGetServerImages(System.IAsyncResult result) {
            return base.Channel.EndGetServerImages(result);
        }
        
        private System.IAsyncResult OnBeginGetServerImages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ssid = ((string)(inValues[0]));
            int documentId = ((int)(inValues[1]));
            return this.BeginGetServerImages(ssid, documentId, callback, asyncState);
        }
        
        private object[] OnEndGetServerImages(System.IAsyncResult result) {
            System.Collections.Generic.List<int> retVal = this.EndGetServerImages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServerImagesCompleted(object state) {
            if ((this.GetServerImagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServerImagesCompleted(this, new GetServerImagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServerImagesAsync(string ssid, int documentId) {
            this.GetServerImagesAsync(ssid, documentId, null);
        }
        
        public void GetServerImagesAsync(string ssid, int documentId, object userState) {
            if ((this.onBeginGetServerImagesDelegate == null)) {
                this.onBeginGetServerImagesDelegate = new BeginOperationDelegate(this.OnBeginGetServerImages);
            }
            if ((this.onEndGetServerImagesDelegate == null)) {
                this.onEndGetServerImagesDelegate = new EndOperationDelegate(this.OnEndGetServerImages);
            }
            if ((this.onGetServerImagesCompletedDelegate == null)) {
                this.onGetServerImagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServerImagesCompleted);
            }
            base.InvokeAsync(this.onBeginGetServerImagesDelegate, new object[] {
                        ssid,
                        documentId}, this.onEndGetServerImagesDelegate, this.onGetServerImagesCompletedDelegate, userState);
        }
        
        public byte[] GetServerImage(string ssid, int id, bool asThumbnail, string thumbNailSize) {
            return base.Channel.GetServerImage(ssid, id, asThumbnail, thumbNailSize);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetServerImage(string ssid, int id, bool asThumbnail, string thumbNailSize, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServerImage(ssid, id, asThumbnail, thumbNailSize, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndGetServerImage(System.IAsyncResult result) {
            return base.Channel.EndGetServerImage(result);
        }
        
        private System.IAsyncResult OnBeginGetServerImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ssid = ((string)(inValues[0]));
            int id = ((int)(inValues[1]));
            bool asThumbnail = ((bool)(inValues[2]));
            string thumbNailSize = ((string)(inValues[3]));
            return this.BeginGetServerImage(ssid, id, asThumbnail, thumbNailSize, callback, asyncState);
        }
        
        private object[] OnEndGetServerImage(System.IAsyncResult result) {
            byte[] retVal = this.EndGetServerImage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServerImageCompleted(object state) {
            if ((this.GetServerImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServerImageCompleted(this, new GetServerImageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServerImageAsync(string ssid, int id, bool asThumbnail, string thumbNailSize) {
            this.GetServerImageAsync(ssid, id, asThumbnail, thumbNailSize, null);
        }
        
        public void GetServerImageAsync(string ssid, int id, bool asThumbnail, string thumbNailSize, object userState) {
            if ((this.onBeginGetServerImageDelegate == null)) {
                this.onBeginGetServerImageDelegate = new BeginOperationDelegate(this.OnBeginGetServerImage);
            }
            if ((this.onEndGetServerImageDelegate == null)) {
                this.onEndGetServerImageDelegate = new EndOperationDelegate(this.OnEndGetServerImage);
            }
            if ((this.onGetServerImageCompletedDelegate == null)) {
                this.onGetServerImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServerImageCompleted);
            }
            base.InvokeAsync(this.onBeginGetServerImageDelegate, new object[] {
                        ssid,
                        id,
                        asThumbnail,
                        thumbNailSize}, this.onEndGetServerImageDelegate, this.onGetServerImageCompletedDelegate, userState);
        }
        
        public string GetServerImageName(string ssid, int id) {
            return base.Channel.GetServerImageName(ssid, id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetServerImageName(string ssid, int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServerImageName(ssid, id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetServerImageName(System.IAsyncResult result) {
            return base.Channel.EndGetServerImageName(result);
        }
        
        private System.IAsyncResult OnBeginGetServerImageName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ssid = ((string)(inValues[0]));
            int id = ((int)(inValues[1]));
            return this.BeginGetServerImageName(ssid, id, callback, asyncState);
        }
        
        private object[] OnEndGetServerImageName(System.IAsyncResult result) {
            string retVal = this.EndGetServerImageName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServerImageNameCompleted(object state) {
            if ((this.GetServerImageNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServerImageNameCompleted(this, new GetServerImageNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServerImageNameAsync(string ssid, int id) {
            this.GetServerImageNameAsync(ssid, id, null);
        }
        
        public void GetServerImageNameAsync(string ssid, int id, object userState) {
            if ((this.onBeginGetServerImageNameDelegate == null)) {
                this.onBeginGetServerImageNameDelegate = new BeginOperationDelegate(this.OnBeginGetServerImageName);
            }
            if ((this.onEndGetServerImageNameDelegate == null)) {
                this.onEndGetServerImageNameDelegate = new EndOperationDelegate(this.OnEndGetServerImageName);
            }
            if ((this.onGetServerImageNameCompletedDelegate == null)) {
                this.onGetServerImageNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServerImageNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetServerImageNameDelegate, new object[] {
                        ssid,
                        id}, this.onEndGetServerImageNameDelegate, this.onGetServerImageNameCompletedDelegate, userState);
        }
    }
}
